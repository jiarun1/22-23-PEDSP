
Doppler_Radar_Test_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013030  08007b3c  08007b3c  00017b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ab6c  0801ab6c  00030070  2**0
                  CONTENTS
  4 .ARM          00000008  0801ab6c  0801ab6c  0002ab6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ab74  0801ab74  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ab74  0801ab74  0002ab74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ab78  0801ab78  0002ab78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0801ab7c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031fc  20000070  0801abec  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000326c  0801abec  0003326c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ee1a  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003816  00000000  00000000  0004eeba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  000526d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001370  00000000  00000000  00053ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000293ef  00000000  00000000  00054e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001956f  00000000  00000000  0007e22f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108cf1  00000000  00000000  0009779e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001a048f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054cc  00000000  00000000  001a0554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000038a2  00000000  00000000  001a5a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007b24 	.word	0x08007b24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08007b24 	.word	0x08007b24

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fe40 	bl	8001154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f82a 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 fa26 	bl	8000928 <MX_GPIO_Init>
  MX_DMA_Init();
 80004dc:	f000 fa06 	bl	80008ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f9d4 	bl	800088c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004e4:	f000 f874 	bl	80005d0 <MX_ADC1_Init>
  MX_TIM2_Init();
 80004e8:	f000 f97a 	bl	80007e0 <MX_TIM2_Init>
  MX_TIM1_Init();
 80004ec:	f000 f8e8 	bl	80006c0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80004f0:	480a      	ldr	r0, [pc, #40]	; (800051c <main+0x50>)
 80004f2:	f004 fd21 	bl	8004f38 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80004f6:	2108      	movs	r1, #8
 80004f8:	4808      	ldr	r0, [pc, #32]	; (800051c <main+0x50>)
 80004fa:	f004 fde5 	bl	80050c8 <HAL_TIM_PWM_Start>
  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, 5);
 80004fe:	4b07      	ldr	r3, [pc, #28]	; (800051c <main+0x50>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2205      	movs	r2, #5
 8000504:	63da      	str	r2, [r3, #60]	; 0x3c

  Doppler_Radar_Init(&DopplerADC, &hadc1, &hdma_adc1, 5000);
 8000506:	f241 3388 	movw	r3, #5000	; 0x1388
 800050a:	4a05      	ldr	r2, [pc, #20]	; (8000520 <main+0x54>)
 800050c:	4905      	ldr	r1, [pc, #20]	; (8000524 <main+0x58>)
 800050e:	4806      	ldr	r0, [pc, #24]	; (8000528 <main+0x5c>)
 8000510:	f000 fc7d 	bl	8000e0e <Doppler_Radar_Init>

  HAL_Delay(100);
 8000514:	2064      	movs	r0, #100	; 0x64
 8000516:	f000 fe99 	bl	800124c <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051a:	e7fe      	b.n	800051a <main+0x4e>
 800051c:	20000138 	.word	0x20000138
 8000520:	200000f0 	.word	0x200000f0
 8000524:	2000008c 	.word	0x2000008c
 8000528:	20000254 	.word	0x20000254

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b096      	sub	sp, #88	; 0x58
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0314 	add.w	r3, r7, #20
 8000536:	2244      	movs	r2, #68	; 0x44
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f007 fac8 	bl	8007ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	463b      	mov	r3, r7
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
 800054c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800054e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000552:	f003 f9df 	bl	8003914 <HAL_PWREx_ControlVoltageScaling>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800055c:	f000 fa4a 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000560:	2302      	movs	r3, #2
 8000562:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000564:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000568:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056a:	2310      	movs	r3, #16
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000572:	2302      	movs	r3, #2
 8000574:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000576:	2301      	movs	r3, #1
 8000578:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800057a:	230a      	movs	r3, #10
 800057c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800057e:	2307      	movs	r3, #7
 8000580:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	4618      	mov	r0, r3
 8000590:	f003 fa16 	bl	80039c0 <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800059a:	f000 fa2b 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2303      	movs	r3, #3
 80005a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b2:	463b      	mov	r3, r7
 80005b4:	2104      	movs	r1, #4
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 fdde 	bl	8004178 <HAL_RCC_ClockConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005c2:	f000 fa17 	bl	80009f4 <Error_Handler>
  }
}
 80005c6:	bf00      	nop
 80005c8:	3758      	adds	r7, #88	; 0x58
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	; 0x28
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
 80005f0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005f2:	4b30      	ldr	r3, [pc, #192]	; (80006b4 <MX_ADC1_Init+0xe4>)
 80005f4:	4a30      	ldr	r2, [pc, #192]	; (80006b8 <MX_ADC1_Init+0xe8>)
 80005f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005f8:	4b2e      	ldr	r3, [pc, #184]	; (80006b4 <MX_ADC1_Init+0xe4>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fe:	4b2d      	ldr	r3, [pc, #180]	; (80006b4 <MX_ADC1_Init+0xe4>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000604:	4b2b      	ldr	r3, [pc, #172]	; (80006b4 <MX_ADC1_Init+0xe4>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060a:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <MX_ADC1_Init+0xe4>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000610:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <MX_ADC1_Init+0xe4>)
 8000612:	2204      	movs	r2, #4
 8000614:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000616:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <MX_ADC1_Init+0xe4>)
 8000618:	2200      	movs	r2, #0
 800061a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800061c:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <MX_ADC1_Init+0xe4>)
 800061e:	2200      	movs	r2, #0
 8000620:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000622:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <MX_ADC1_Init+0xe4>)
 8000624:	2201      	movs	r2, #1
 8000626:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <MX_ADC1_Init+0xe4>)
 800062a:	2200      	movs	r2, #0
 800062c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC3;
 8000630:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <MX_ADC1_Init+0xe4>)
 8000632:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8000636:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000638:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <MX_ADC1_Init+0xe4>)
 800063a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800063e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000640:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <MX_ADC1_Init+0xe4>)
 8000642:	2201      	movs	r2, #1
 8000644:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000648:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <MX_ADC1_Init+0xe4>)
 800064a:	2200      	movs	r2, #0
 800064c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800064e:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <MX_ADC1_Init+0xe4>)
 8000650:	2200      	movs	r2, #0
 8000652:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000656:	4817      	ldr	r0, [pc, #92]	; (80006b4 <MX_ADC1_Init+0xe4>)
 8000658:	f001 f860 	bl	800171c <HAL_ADC_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000662:	f000 f9c7 	bl	80009f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	4619      	mov	r1, r3
 8000670:	4810      	ldr	r0, [pc, #64]	; (80006b4 <MX_ADC1_Init+0xe4>)
 8000672:	f002 fb87 	bl	8002d84 <HAL_ADCEx_MultiModeConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800067c:	f000 f9ba 	bl	80009f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000680:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_ADC1_Init+0xec>)
 8000682:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000684:	2306      	movs	r3, #6
 8000686:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800068c:	237f      	movs	r3, #127	; 0x7f
 800068e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000690:	2304      	movs	r3, #4
 8000692:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	4619      	mov	r1, r3
 800069c:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_ADC1_Init+0xe4>)
 800069e:	f001 fcf3 	bl	8002088 <HAL_ADC_ConfigChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80006a8:	f000 f9a4 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	3728      	adds	r7, #40	; 0x28
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	2000008c 	.word	0x2000008c
 80006b8:	50040000 	.word	0x50040000
 80006bc:	32601000 	.word	0x32601000

080006c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b096      	sub	sp, #88	; 0x58
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]
 80006e2:	615a      	str	r2, [r3, #20]
 80006e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	222c      	movs	r2, #44	; 0x2c
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f007 f9ef 	bl	8007ad0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006f2:	4b39      	ldr	r3, [pc, #228]	; (80007d8 <MX_TIM1_Init+0x118>)
 80006f4:	4a39      	ldr	r2, [pc, #228]	; (80007dc <MX_TIM1_Init+0x11c>)
 80006f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 800-1;
 80006f8:	4b37      	ldr	r3, [pc, #220]	; (80007d8 <MX_TIM1_Init+0x118>)
 80006fa:	f240 321f 	movw	r2, #799	; 0x31f
 80006fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000700:	4b35      	ldr	r3, [pc, #212]	; (80007d8 <MX_TIM1_Init+0x118>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20-1;
 8000706:	4b34      	ldr	r3, [pc, #208]	; (80007d8 <MX_TIM1_Init+0x118>)
 8000708:	2213      	movs	r2, #19
 800070a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070c:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <MX_TIM1_Init+0x118>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000712:	4b31      	ldr	r3, [pc, #196]	; (80007d8 <MX_TIM1_Init+0x118>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000718:	4b2f      	ldr	r3, [pc, #188]	; (80007d8 <MX_TIM1_Init+0x118>)
 800071a:	2200      	movs	r2, #0
 800071c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800071e:	482e      	ldr	r0, [pc, #184]	; (80007d8 <MX_TIM1_Init+0x118>)
 8000720:	f004 fc7a 	bl	8005018 <HAL_TIM_PWM_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800072a:	f000 f963 	bl	80009f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072e:	2300      	movs	r3, #0
 8000730:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000732:	2300      	movs	r3, #0
 8000734:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000736:	2300      	movs	r3, #0
 8000738:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800073a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800073e:	4619      	mov	r1, r3
 8000740:	4825      	ldr	r0, [pc, #148]	; (80007d8 <MX_TIM1_Init+0x118>)
 8000742:	f005 fa71 	bl	8005c28 <HAL_TIMEx_MasterConfigSynchronization>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800074c:	f000 f952 	bl	80009f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000750:	2360      	movs	r3, #96	; 0x60
 8000752:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 7;
 8000754:	2307      	movs	r3, #7
 8000756:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000758:	2300      	movs	r3, #0
 800075a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800075c:	2300      	movs	r3, #0
 800075e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000760:	2304      	movs	r3, #4
 8000762:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000764:	2300      	movs	r3, #0
 8000766:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000768:	2300      	movs	r3, #0
 800076a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800076c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000770:	2208      	movs	r2, #8
 8000772:	4619      	mov	r1, r3
 8000774:	4818      	ldr	r0, [pc, #96]	; (80007d8 <MX_TIM1_Init+0x118>)
 8000776:	f004 fdad 	bl	80052d4 <HAL_TIM_PWM_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000780:	f000 f938 	bl	80009f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000798:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800079c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	4619      	mov	r1, r3
 80007b8:	4807      	ldr	r0, [pc, #28]	; (80007d8 <MX_TIM1_Init+0x118>)
 80007ba:	f005 fabd 	bl	8005d38 <HAL_TIMEx_ConfigBreakDeadTime>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80007c4:	f000 f916 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <MX_TIM1_Init+0x118>)
 80007ca:	f000 fa0f 	bl	8000bec <HAL_TIM_MspPostInit>

}
 80007ce:	bf00      	nop
 80007d0:	3758      	adds	r7, #88	; 0x58
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000138 	.word	0x20000138
 80007dc:	40012c00 	.word	0x40012c00

080007e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f2:	463b      	mov	r3, r7
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
 8000800:	615a      	str	r2, [r3, #20]
 8000802:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000804:	4b20      	ldr	r3, [pc, #128]	; (8000888 <MX_TIM2_Init+0xa8>)
 8000806:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800080a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 800080c:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <MX_TIM2_Init+0xa8>)
 800080e:	224f      	movs	r2, #79	; 0x4f
 8000810:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000812:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <MX_TIM2_Init+0xa8>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_TIM2_Init+0xa8>)
 800081a:	2201      	movs	r2, #1
 800081c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_TIM2_Init+0xa8>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_TIM2_Init+0xa8>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800082a:	4817      	ldr	r0, [pc, #92]	; (8000888 <MX_TIM2_Init+0xa8>)
 800082c:	f004 fbf4 	bl	8005018 <HAL_TIM_PWM_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000836:	f000 f8dd 	bl	80009f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	480f      	ldr	r0, [pc, #60]	; (8000888 <MX_TIM2_Init+0xa8>)
 800084a:	f005 f9ed 	bl	8005c28 <HAL_TIMEx_MasterConfigSynchronization>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000854:	f000 f8ce 	bl	80009f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000858:	2360      	movs	r3, #96	; 0x60
 800085a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000868:	463b      	mov	r3, r7
 800086a:	2204      	movs	r2, #4
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <MX_TIM2_Init+0xa8>)
 8000870:	f004 fd30 	bl	80052d4 <HAL_TIM_PWM_ConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800087a:	f000 f8bb 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	3728      	adds	r7, #40	; 0x28
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000184 	.word	0x20000184

0800088c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 8000892:	4a15      	ldr	r2, [pc, #84]	; (80008e8 <MX_USART2_UART_Init+0x5c>)
 8000894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008d0:	f005 fab0 	bl	8005e34 <HAL_UART_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008da:	f000 f88b 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200001d0 	.word	0x200001d0
 80008e8:	40004400 	.word	0x40004400

080008ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_DMA_Init+0x38>)
 80008f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008f6:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <MX_DMA_Init+0x38>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6493      	str	r3, [r2, #72]	; 0x48
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_DMA_Init+0x38>)
 8000900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	200b      	movs	r0, #11
 8000910:	f002 fbc3 	bl	800309a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000914:	200b      	movs	r0, #11
 8000916:	f002 fbdc 	bl	80030d2 <HAL_NVIC_EnableIRQ>

}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <MX_GPIO_Init+0xc4>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	4a2a      	ldr	r2, [pc, #168]	; (80009ec <MX_GPIO_Init+0xc4>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094a:	4b28      	ldr	r3, [pc, #160]	; (80009ec <MX_GPIO_Init+0xc4>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <MX_GPIO_Init+0xc4>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	4a24      	ldr	r2, [pc, #144]	; (80009ec <MX_GPIO_Init+0xc4>)
 800095c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000962:	4b22      	ldr	r3, [pc, #136]	; (80009ec <MX_GPIO_Init+0xc4>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <MX_GPIO_Init+0xc4>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	4a1e      	ldr	r2, [pc, #120]	; (80009ec <MX_GPIO_Init+0xc4>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <MX_GPIO_Init+0xc4>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000986:	4b19      	ldr	r3, [pc, #100]	; (80009ec <MX_GPIO_Init+0xc4>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	4a18      	ldr	r2, [pc, #96]	; (80009ec <MX_GPIO_Init+0xc4>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000992:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_GPIO_Init+0xc4>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2120      	movs	r1, #32
 80009a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a6:	f002 ff8f 	bl	80038c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	480b      	ldr	r0, [pc, #44]	; (80009f0 <MX_GPIO_Init+0xc8>)
 80009c2:	f002 fdd7 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009c6:	2320      	movs	r3, #32
 80009c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e0:	f002 fdc8 	bl	8003574 <HAL_GPIO_Init>

}
 80009e4:	bf00      	nop
 80009e6:	3728      	adds	r7, #40	; 0x28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40021000 	.word	0x40021000
 80009f0:	48000800 	.word	0x48000800

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	e7fe      	b.n	80009fc <Error_Handler+0x8>
	...

08000a00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <HAL_MspInit+0x44>)
 8000a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0a:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <HAL_MspInit+0x44>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6613      	str	r3, [r2, #96]	; 0x60
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <HAL_MspInit+0x44>)
 8000a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_MspInit+0x44>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_MspInit+0x44>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_MspInit+0x44>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000

08000a48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b0ac      	sub	sp, #176	; 0xb0
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2288      	movs	r2, #136	; 0x88
 8000a66:	2100      	movs	r1, #0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f007 f831 	bl	8007ad0 <memset>
  if(hadc->Instance==ADC1)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a41      	ldr	r2, [pc, #260]	; (8000b78 <HAL_ADC_MspInit+0x130>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d17b      	bne.n	8000b70 <HAL_ADC_MspInit+0x128>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a7c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000a86:	2302      	movs	r3, #2
 8000a88:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000a8e:	2308      	movs	r3, #8
 8000a90:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a92:	2307      	movs	r3, #7
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a96:	2302      	movs	r3, #2
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aa2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f003 fd89 	bl	80045c0 <HAL_RCCEx_PeriphCLKConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000ab4:	f7ff ff9e 	bl	80009f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ab8:	4b30      	ldr	r3, [pc, #192]	; (8000b7c <HAL_ADC_MspInit+0x134>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abc:	4a2f      	ldr	r2, [pc, #188]	; (8000b7c <HAL_ADC_MspInit+0x134>)
 8000abe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ac2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac4:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <HAL_ADC_MspInit+0x134>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad0:	4b2a      	ldr	r3, [pc, #168]	; (8000b7c <HAL_ADC_MspInit+0x134>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad4:	4a29      	ldr	r2, [pc, #164]	; (8000b7c <HAL_ADC_MspInit+0x134>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000adc:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <HAL_ADC_MspInit+0x134>)
 8000ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000aee:	230b      	movs	r3, #11
 8000af0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000afe:	4619      	mov	r1, r3
 8000b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b04:	f002 fd36 	bl	8003574 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b08:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <HAL_ADC_MspInit+0x138>)
 8000b0a:	4a1e      	ldr	r2, [pc, #120]	; (8000b84 <HAL_ADC_MspInit+0x13c>)
 8000b0c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <HAL_ADC_MspInit+0x138>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <HAL_ADC_MspInit+0x138>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <HAL_ADC_MspInit+0x138>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <HAL_ADC_MspInit+0x138>)
 8000b22:	2280      	movs	r2, #128	; 0x80
 8000b24:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <HAL_ADC_MspInit+0x138>)
 8000b28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b2c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <HAL_ADC_MspInit+0x138>)
 8000b30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b34:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_ADC_MspInit+0x138>)
 8000b38:	2220      	movs	r2, #32
 8000b3a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b3c:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <HAL_ADC_MspInit+0x138>)
 8000b3e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000b42:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b44:	480e      	ldr	r0, [pc, #56]	; (8000b80 <HAL_ADC_MspInit+0x138>)
 8000b46:	f002 fadf 	bl	8003108 <HAL_DMA_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <HAL_ADC_MspInit+0x10c>
    {
      Error_Handler();
 8000b50:	f7ff ff50 	bl	80009f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <HAL_ADC_MspInit+0x138>)
 8000b58:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b5a:	4a09      	ldr	r2, [pc, #36]	; (8000b80 <HAL_ADC_MspInit+0x138>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2100      	movs	r1, #0
 8000b64:	2012      	movs	r0, #18
 8000b66:	f002 fa98 	bl	800309a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b6a:	2012      	movs	r0, #18
 8000b6c:	f002 fab1 	bl	80030d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b70:	bf00      	nop
 8000b72:	37b0      	adds	r7, #176	; 0xb0
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	50040000 	.word	0x50040000
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	200000f0 	.word	0x200000f0
 8000b84:	40020008 	.word	0x40020008

08000b88 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a13      	ldr	r2, [pc, #76]	; (8000be4 <HAL_TIM_PWM_MspInit+0x5c>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d10c      	bne.n	8000bb4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b9a:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <HAL_TIM_PWM_MspInit+0x60>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <HAL_TIM_PWM_MspInit+0x60>)
 8000ba0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ba4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <HAL_TIM_PWM_MspInit+0x60>)
 8000ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bb2:	e010      	b.n	8000bd6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bbc:	d10b      	bne.n	8000bd6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <HAL_TIM_PWM_MspInit+0x60>)
 8000bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc2:	4a09      	ldr	r2, [pc, #36]	; (8000be8 <HAL_TIM_PWM_MspInit+0x60>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <HAL_TIM_PWM_MspInit+0x60>)
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
}
 8000bd6:	bf00      	nop
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40012c00 	.word	0x40012c00
 8000be8:	40021000 	.word	0x40021000

08000bec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a12      	ldr	r2, [pc, #72]	; (8000c54 <HAL_TIM_MspPostInit+0x68>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d11d      	bne.n	8000c4a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_TIM_MspPostInit+0x6c>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	4a11      	ldr	r2, [pc, #68]	; (8000c58 <HAL_TIM_MspPostInit+0x6c>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <HAL_TIM_MspPostInit+0x6c>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	4619      	mov	r1, r3
 8000c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c46:	f002 fc95 	bl	8003574 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3720      	adds	r7, #32
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40012c00 	.word	0x40012c00
 8000c58:	40021000 	.word	0x40021000

08000c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b0ac      	sub	sp, #176	; 0xb0
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2288      	movs	r2, #136	; 0x88
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f006 ff27 	bl	8007ad0 <memset>
  if(huart->Instance==USART2)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a21      	ldr	r2, [pc, #132]	; (8000d0c <HAL_UART_MspInit+0xb0>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d13b      	bne.n	8000d04 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c90:	2300      	movs	r3, #0
 8000c92:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f003 fc91 	bl	80045c0 <HAL_RCCEx_PeriphCLKConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ca4:	f7ff fea6 	bl	80009f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <HAL_UART_MspInit+0xb4>)
 8000caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cac:	4a18      	ldr	r2, [pc, #96]	; (8000d10 <HAL_UART_MspInit+0xb4>)
 8000cae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb2:	6593      	str	r3, [r2, #88]	; 0x58
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <HAL_UART_MspInit+0xb4>)
 8000cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <HAL_UART_MspInit+0xb4>)
 8000cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc4:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <HAL_UART_MspInit+0xb4>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ccc:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <HAL_UART_MspInit+0xb4>)
 8000cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cd8:	230c      	movs	r3, #12
 8000cda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf0:	2307      	movs	r3, #7
 8000cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d00:	f002 fc38 	bl	8003574 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d04:	bf00      	nop
 8000d06:	37b0      	adds	r7, #176	; 0xb0
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40004400 	.word	0x40004400
 8000d10:	40021000 	.word	0x40021000

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <NMI_Handler+0x4>

08000d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <MemManage_Handler+0x4>

08000d26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d60:	f000 fa54 	bl	800120c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	Doppler_Radar_IQRHandler(&DopplerADC);
 8000d6c:	4803      	ldr	r0, [pc, #12]	; (8000d7c <DMA1_Channel1_IRQHandler+0x14>)
 8000d6e:	f000 f86b 	bl	8000e48 <Doppler_Radar_IQRHandler>

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d72:	4803      	ldr	r0, [pc, #12]	; (8000d80 <DMA1_Channel1_IRQHandler+0x18>)
 8000d74:	f002 fb1e 	bl	80033b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */


  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000254 	.word	0x20000254
 8000d80:	200000f0 	.word	0x200000f0

08000d84 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <ADC1_2_IRQHandler+0x10>)
 8000d8a:	f000 ff3b 	bl	8001c04 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000008c 	.word	0x2000008c

08000d98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <SystemInit+0x20>)
 8000d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <SystemInit+0x20>)
 8000da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dc0:	f7ff ffea 	bl	8000d98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc4:	480c      	ldr	r0, [pc, #48]	; (8000df8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dc6:	490d      	ldr	r1, [pc, #52]	; (8000dfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <LoopForever+0xe>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ddc:	4c0a      	ldr	r4, [pc, #40]	; (8000e08 <LoopForever+0x16>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dea:	f006 fe4d 	bl	8007a88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dee:	f7ff fb6d 	bl	80004cc <main>

08000df2 <LoopForever>:

LoopForever:
    b LoopForever
 8000df2:	e7fe      	b.n	8000df2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000df4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e00:	0801ab7c 	.word	0x0801ab7c
  ldr r2, =_sbss
 8000e04:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e08:	2000326c 	.word	0x2000326c

08000e0c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC3_IRQHandler>

08000e0e <Doppler_Radar_Init>:
 */
#include "Doppler_Radar.h"
#include "stdlib.h"

void Doppler_Radar_Init(DopplerADC_t* Dev, ADC_HandleTypeDef* adc, DMA_HandleTypeDef* adc_dma, uint16_t period)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b084      	sub	sp, #16
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	60f8      	str	r0, [r7, #12]
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	807b      	strh	r3, [r7, #2]
	Dev->Input.ADC = adc;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	601a      	str	r2, [r3, #0]
	Dev->Input.ADC_DMA = adc_dma;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	605a      	str	r2, [r3, #4]
	Dev->Input.Period = period;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	887a      	ldrh	r2, [r7, #2]
 8000e2c:	811a      	strh	r2, [r3, #8]

	HAL_ADC_Start_DMA(Dev->Input.ADC, Dev->ADC_Measure, SAMPLE_POINT);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	6818      	ldr	r0, [r3, #0]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	3310      	adds	r3, #16
 8000e36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f000 fdc4 	bl	80019c8 <HAL_ADC_Start_DMA>
}
 8000e40:	bf00      	nop
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <Doppler_Radar_IQRHandler>:



void Doppler_Radar_IQRHandler(DopplerADC_t* Dev)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e56:	f843 0c2c 	str.w	r0, [r3, #-44]
	if(__HAL_DMA_GET_FLAG(Dev->Input.ADC_DMA, DMA_FLAG_TC1) == RESET)
 8000e5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e5e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	4bb6      	ldr	r3, [pc, #728]	; (8001144 <Doppler_Radar_IQRHandler+0x2fc>)
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d909      	bls.n	8000e82 <Doppler_Radar_IQRHandler+0x3a>
 8000e6e:	4bb6      	ldr	r3, [pc, #728]	; (8001148 <Doppler_Radar_IQRHandler+0x300>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	bf0c      	ite	eq
 8000e7a:	2301      	moveq	r3, #1
 8000e7c:	2300      	movne	r3, #0
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	e008      	b.n	8000e94 <Doppler_Radar_IQRHandler+0x4c>
 8000e82:	4bb2      	ldr	r3, [pc, #712]	; (800114c <Doppler_Radar_IQRHandler+0x304>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	bf0c      	ite	eq
 8000e8e:	2301      	moveq	r3, #1
 8000e90:	2300      	movne	r3, #0
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f040 814f 	bne.w	8001138 <Doppler_Radar_IQRHandler+0x2f0>
	{

		return;
	}

	HAL_ADC_Stop_DMA(Dev->Input.ADC);
 8000e9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e9e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 fe4b 	bl	8001b40 <HAL_ADC_Stop_DMA>

	__HAL_DMA_CLEAR_FLAG(Dev->Input.ADC_DMA, DMA_FLAG_TC1);
 8000eaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eae:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4ba2      	ldr	r3, [pc, #648]	; (8001144 <Doppler_Radar_IQRHandler+0x2fc>)
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d903      	bls.n	8000ec6 <Doppler_Radar_IQRHandler+0x7e>
 8000ebe:	4ba2      	ldr	r3, [pc, #648]	; (8001148 <Doppler_Radar_IQRHandler+0x300>)
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	e002      	b.n	8000ecc <Doppler_Radar_IQRHandler+0x84>
 8000ec6:	4ba1      	ldr	r3, [pc, #644]	; (800114c <Doppler_Radar_IQRHandler+0x304>)
 8000ec8:	2202      	movs	r2, #2
 8000eca:	605a      	str	r2, [r3, #4]

	float32_t Processing_Sig[SAMPLE_POINT];

	// pre processing of the ADC measurement

	Dev->Average = 0;
 8000ecc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ed0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000ed4:	f04f 0200 	mov.w	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]

	for(int i = 0; i < SAMPLE_POINT; i++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000ee0:	f102 020c 	add.w	r2, r2, #12
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	e046      	b.n	8000f76 <Doppler_Radar_IQRHandler+0x12e>
	{
		Processing_Sig[i] = Dev->ADC_Measure[i];
 8000ee8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eec:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000ef0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000ef4:	f102 020c 	add.w	r2, r2, #12
 8000ef8:	6812      	ldr	r2, [r2, #0]
 8000efa:	3204      	adds	r2, #4
 8000efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f00:	ee07 3a90 	vmov	s15, r3
 8000f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000f12:	f103 030c 	add.w	r3, r3, #12
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	3b10      	subs	r3, #16
 8000f1e:	edc3 7a00 	vstr	s15, [r3]
		Dev->Average += (float32_t)Processing_Sig[i] / SAMPLE_POINT;
 8000f22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f26:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000f2a:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f32:	461a      	mov	r2, r3
 8000f34:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000f38:	f103 030c 	add.w	r3, r3, #12
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	3b10      	subs	r3, #16
 8000f44:	edd3 6a00 	vldr	s13, [r3]
 8000f48:	ed9f 6a81 	vldr	s12, [pc, #516]	; 8001150 <Doppler_Radar_IQRHandler+0x308>
 8000f4c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f58:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000f5c:	edc3 7a03 	vstr	s15, [r3, #12]
	for(int i = 0; i < SAMPLE_POINT; i++)
 8000f60:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000f64:	f103 030c 	add.w	r3, r3, #12
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000f70:	f102 020c 	add.w	r2, r2, #12
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000f7a:	f103 030c 	add.w	r3, r3, #12
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f84:	dbb0      	blt.n	8000ee8 <Doppler_Radar_IQRHandler+0xa0>
	}

	for(int i = 0; i < SAMPLE_POINT; i++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000f8c:	f102 0208 	add.w	r2, r2, #8
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e02c      	b.n	8000fee <Doppler_Radar_IQRHandler+0x1a6>
	{
		Processing_Sig[i] -= Dev->Average;
 8000f94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f98:	461a      	mov	r2, r3
 8000f9a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000f9e:	f103 0308 	add.w	r3, r3, #8
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	3b10      	subs	r3, #16
 8000faa:	ed93 7a00 	vldr	s14, [r3]
 8000fae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fb2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000fb6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000fc8:	f103 0308 	add.w	r3, r3, #8
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	3b10      	subs	r3, #16
 8000fd4:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < SAMPLE_POINT; i++)
 8000fd8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000fdc:	f103 0308 	add.w	r3, r3, #8
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000fe8:	f102 0208 	add.w	r2, r2, #8
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000ff2:	f103 0308 	add.w	r3, r3, #8
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ffc:	dbca      	blt.n	8000f94 <Doppler_Radar_IQRHandler+0x14c>
	}



	arm_rfft_fast_instance_f32 S;
	arm_rfft_fast_init_f32(&S, SAMPLE_POINT);
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	3b08      	subs	r3, #8
 8001004:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001008:	4618      	mov	r0, r3
 800100a:	f005 fc91 	bl	8006930 <arm_rfft_fast_init_f32>
	arm_rfft_fast_f32(&S, Processing_Sig, Dev->fft_result, 0);
 800100e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001012:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001016:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800101a:	3210      	adds	r2, #16
 800101c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001020:	3910      	subs	r1, #16
 8001022:	f107 0010 	add.w	r0, r7, #16
 8001026:	3808      	subs	r0, #8
 8001028:	2300      	movs	r3, #0
 800102a:	f005 fd65 	bl	8006af8 <arm_rfft_fast_f32>

	arm_cmplx_mag_f32(Dev->fft_result, Dev->fft_mag, SAMPLE_POINT);
 800102e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001032:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800103a:	3310      	adds	r3, #16
 800103c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001040:	f852 2c2c 	ldr.w	r2, [r2, #-44]
 8001044:	f502 5100 	add.w	r1, r2, #8192	; 0x2000
 8001048:	3110      	adds	r1, #16
 800104a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800104e:	4618      	mov	r0, r3
 8001050:	f006 f930 	bl	80072b4 <arm_cmplx_mag_f32>

	float32_t max_fft = 0;
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800105c:	f102 0204 	add.w	r2, r2, #4
 8001060:	6013      	str	r3, [r2, #0]
	for(uint16_t i = 0; i < SAMPLE_POINT/2;i++)
 8001062:	2300      	movs	r3, #0
 8001064:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001068:	f102 0202 	add.w	r2, r2, #2
 800106c:	8013      	strh	r3, [r2, #0]
 800106e:	e04b      	b.n	8001108 <Doppler_Radar_IQRHandler+0x2c0>
	{
		if(Dev->fft_mag[i] > max_fft)
 8001070:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001074:	f103 0302 	add.w	r3, r3, #2
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800107e:	f852 2c2c 	ldr.w	r2, [r2, #-44]
 8001082:	f603 0304 	addw	r3, r3, #2052	; 0x804
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	edd3 7a00 	vldr	s15, [r3]
 800108e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001092:	f103 0304 	add.w	r3, r3, #4
 8001096:	ed93 7a00 	vldr	s14, [r3]
 800109a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800109e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a2:	d526      	bpl.n	80010f2 <Doppler_Radar_IQRHandler+0x2aa>
		{
			max_fft = Dev->fft_mag[i];
 80010a4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80010a8:	f103 0302 	add.w	r3, r3, #2
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80010b2:	f852 2c2c 	ldr.w	r2, [r2, #-44]
 80010b6:	f603 0304 	addw	r3, r3, #2052	; 0x804
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80010c4:	f102 0204 	add.w	r2, r2, #4
 80010c8:	6013      	str	r3, [r2, #0]
			Dev->max_frequency = i * Dev->Input.Period;
 80010ca:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80010ce:	f103 0302 	add.w	r3, r3, #2
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80010d8:	f852 2c2c 	ldr.w	r2, [r2, #-44]
 80010dc:	8912      	ldrh	r2, [r2, #8]
 80010de:	fb02 f303 	mul.w	r3, r2, r3
 80010e2:	461a      	mov	r2, r3
 80010e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010e8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80010ec:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80010f0:	611a      	str	r2, [r3, #16]
	for(uint16_t i = 0; i < SAMPLE_POINT/2;i++)
 80010f2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80010f6:	f103 0302 	add.w	r3, r3, #2
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	3301      	adds	r3, #1
 80010fe:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001102:	f102 0202 	add.w	r2, r2, #2
 8001106:	8013      	strh	r3, [r2, #0]
 8001108:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800110c:	f103 0302 	add.w	r3, r3, #2
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001116:	d3ab      	bcc.n	8001070 <Doppler_Radar_IQRHandler+0x228>
		}
	}

	HAL_ADC_Start_DMA(Dev->Input.ADC, Dev->ADC_Measure, SAMPLE_POINT);
 8001118:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800111c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001120:	6818      	ldr	r0, [r3, #0]
 8001122:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001126:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800112a:	3310      	adds	r3, #16
 800112c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001130:	4619      	mov	r1, r3
 8001132:	f000 fc49 	bl	80019c8 <HAL_ADC_Start_DMA>
 8001136:	e000      	b.n	800113a <Doppler_Radar_IQRHandler+0x2f2>
		return;
 8001138:	bf00      	nop
}
 800113a:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40020080 	.word	0x40020080
 8001148:	40020400 	.word	0x40020400
 800114c:	40020000 	.word	0x40020000
 8001150:	44800000 	.word	0x44800000

08001154 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <HAL_Init+0x3c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <HAL_Init+0x3c>)
 8001164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001168:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116a:	2003      	movs	r0, #3
 800116c:	f001 ff8a 	bl	8003084 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001170:	2000      	movs	r0, #0
 8001172:	f000 f80f 	bl	8001194 <HAL_InitTick>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d002      	beq.n	8001182 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	71fb      	strb	r3, [r7, #7]
 8001180:	e001      	b.n	8001186 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001182:	f7ff fc3d 	bl	8000a00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001186:	79fb      	ldrb	r3, [r7, #7]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40022000 	.word	0x40022000

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800119c:	2300      	movs	r3, #0
 800119e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <HAL_InitTick+0x6c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d023      	beq.n	80011f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011a8:	4b16      	ldr	r3, [pc, #88]	; (8001204 <HAL_InitTick+0x70>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_InitTick+0x6c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 ff95 	bl	80030ee <HAL_SYSTICK_Config>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10f      	bne.n	80011ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d809      	bhi.n	80011e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d0:	2200      	movs	r2, #0
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295
 80011d8:	f001 ff5f 	bl	800309a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011dc:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <HAL_InitTick+0x74>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e007      	b.n	80011f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	73fb      	strb	r3, [r7, #15]
 80011e8:	e004      	b.n	80011f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	73fb      	strb	r3, [r7, #15]
 80011ee:	e001      	b.n	80011f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000008 	.word	0x20000008
 8001204:	20000000 	.word	0x20000000
 8001208:	20000004 	.word	0x20000004

0800120c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_IncTick+0x20>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x24>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4413      	add	r3, r2
 800121c:	4a04      	ldr	r2, [pc, #16]	; (8001230 <HAL_IncTick+0x24>)
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000008 	.word	0x20000008
 8001230:	20003268 	.word	0x20003268

08001234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return uwTick;
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <HAL_GetTick+0x14>)
 800123a:	681b      	ldr	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20003268 	.word	0x20003268

0800124c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001254:	f7ff ffee 	bl	8001234 <HAL_GetTick>
 8001258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001264:	d005      	beq.n	8001272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001266:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <HAL_Delay+0x44>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4413      	add	r3, r2
 8001270:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001272:	bf00      	nop
 8001274:	f7ff ffde 	bl	8001234 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	429a      	cmp	r2, r3
 8001282:	d8f7      	bhi.n	8001274 <HAL_Delay+0x28>
  {
  }
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000008 	.word	0x20000008

08001294 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	431a      	orrs	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	609a      	str	r2, [r3, #8]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	431a      	orrs	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	609a      	str	r2, [r3, #8]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	3360      	adds	r3, #96	; 0x60
 800130e:	461a      	mov	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <LL_ADC_SetOffset+0x44>)
 800131e:	4013      	ands	r3, r2
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	4313      	orrs	r3, r2
 800132c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001334:	bf00      	nop
 8001336:	371c      	adds	r7, #28
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	03fff000 	.word	0x03fff000

08001344 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3360      	adds	r3, #96	; 0x60
 8001352:	461a      	mov	r2, r3
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001364:	4618      	mov	r0, r3
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3360      	adds	r3, #96	; 0x60
 8001380:	461a      	mov	r2, r3
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	431a      	orrs	r2, r3
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800139a:	bf00      	nop
 800139c:	371c      	adds	r7, #28
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b087      	sub	sp, #28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3330      	adds	r3, #48	; 0x30
 80013dc:	461a      	mov	r2, r3
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	0a1b      	lsrs	r3, r3, #8
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	f003 030c 	and.w	r3, r3, #12
 80013e8:	4413      	add	r3, r2
 80013ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	f003 031f 	and.w	r3, r3, #31
 80013f6:	211f      	movs	r1, #31
 80013f8:	fa01 f303 	lsl.w	r3, r1, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	401a      	ands	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	0e9b      	lsrs	r3, r3, #26
 8001404:	f003 011f 	and.w	r1, r3, #31
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	f003 031f 	and.w	r3, r3, #31
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	431a      	orrs	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001418:	bf00      	nop
 800141a:	371c      	adds	r7, #28
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001430:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001438:	2301      	movs	r3, #1
 800143a:	e000      	b.n	800143e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800144a:	b480      	push	{r7}
 800144c:	b087      	sub	sp, #28
 800144e:	af00      	add	r7, sp, #0
 8001450:	60f8      	str	r0, [r7, #12]
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	3314      	adds	r3, #20
 800145a:	461a      	mov	r2, r3
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	0e5b      	lsrs	r3, r3, #25
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	4413      	add	r3, r2
 8001468:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	0d1b      	lsrs	r3, r3, #20
 8001472:	f003 031f 	and.w	r3, r3, #31
 8001476:	2107      	movs	r1, #7
 8001478:	fa01 f303 	lsl.w	r3, r1, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	401a      	ands	r2, r3
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	0d1b      	lsrs	r3, r3, #20
 8001484:	f003 031f 	and.w	r3, r3, #31
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	431a      	orrs	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001494:	bf00      	nop
 8001496:	371c      	adds	r7, #28
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014b8:	43db      	mvns	r3, r3
 80014ba:	401a      	ands	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f003 0318 	and.w	r3, r3, #24
 80014c2:	4908      	ldr	r1, [pc, #32]	; (80014e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80014c4:	40d9      	lsrs	r1, r3
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	400b      	ands	r3, r1
 80014ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ce:	431a      	orrs	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	0007ffff 	.word	0x0007ffff

080014e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f003 031f 	and.w	r3, r3, #31
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001530:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6093      	str	r3, [r2, #8]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001558:	d101      	bne.n	800155e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800157c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001580:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80015a8:	d101      	bne.n	80015ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015aa:	2301      	movs	r3, #1
 80015ac:	e000      	b.n	80015b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015d0:	f043 0201 	orr.w	r2, r3, #1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015f8:	f043 0202 	orr.w	r2, r3, #2
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b01      	cmp	r3, #1
 800161e:	d101      	bne.n	8001624 <LL_ADC_IsEnabled+0x18>
 8001620:	2301      	movs	r3, #1
 8001622:	e000      	b.n	8001626 <LL_ADC_IsEnabled+0x1a>
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b02      	cmp	r3, #2
 8001644:	d101      	bne.n	800164a <LL_ADC_IsDisableOngoing+0x18>
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <LL_ADC_IsDisableOngoing+0x1a>
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001668:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800166c:	f043 0204 	orr.w	r2, r3, #4
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001690:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001694:	f043 0210 	orr.w	r2, r3, #16
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d101      	bne.n	80016c0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016e2:	f043 0220 	orr.w	r2, r3, #32
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b08      	cmp	r3, #8
 8001708:	d101      	bne.n	800170e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800171c:	b590      	push	{r4, r7, lr}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e136      	b.n	80019a4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001740:	2b00      	cmp	r3, #0
 8001742:	d109      	bne.n	8001758 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff f97f 	bl	8000a48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fef1 	bl	8001544 <LL_ADC_IsDeepPowerDownEnabled>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d004      	beq.n	8001772 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fed7 	bl	8001520 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff ff0c 	bl	8001594 <LL_ADC_IsInternalRegulatorEnabled>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d115      	bne.n	80017ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fef0 	bl	800156c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800178c:	4b87      	ldr	r3, [pc, #540]	; (80019ac <HAL_ADC_Init+0x290>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	099b      	lsrs	r3, r3, #6
 8001792:	4a87      	ldr	r2, [pc, #540]	; (80019b0 <HAL_ADC_Init+0x294>)
 8001794:	fba2 2303 	umull	r2, r3, r2, r3
 8001798:	099b      	lsrs	r3, r3, #6
 800179a:	3301      	adds	r3, #1
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017a0:	e002      	b.n	80017a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	3b01      	subs	r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f9      	bne.n	80017a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff feee 	bl	8001594 <LL_ADC_IsInternalRegulatorEnabled>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10d      	bne.n	80017da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c2:	f043 0210 	orr.w	r2, r3, #16
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ce:	f043 0201 	orr.w	r2, r3, #1
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff ff62 	bl	80016a8 <LL_ADC_REG_IsConversionOngoing>
 80017e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ea:	f003 0310 	and.w	r3, r3, #16
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f040 80cf 	bne.w	8001992 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f040 80cb 	bne.w	8001992 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001800:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001804:	f043 0202 	orr.w	r2, r3, #2
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fefb 	bl	800160c <LL_ADC_IsEnabled>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d115      	bne.n	8001848 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800181c:	4865      	ldr	r0, [pc, #404]	; (80019b4 <HAL_ADC_Init+0x298>)
 800181e:	f7ff fef5 	bl	800160c <LL_ADC_IsEnabled>
 8001822:	4604      	mov	r4, r0
 8001824:	4864      	ldr	r0, [pc, #400]	; (80019b8 <HAL_ADC_Init+0x29c>)
 8001826:	f7ff fef1 	bl	800160c <LL_ADC_IsEnabled>
 800182a:	4603      	mov	r3, r0
 800182c:	431c      	orrs	r4, r3
 800182e:	4863      	ldr	r0, [pc, #396]	; (80019bc <HAL_ADC_Init+0x2a0>)
 8001830:	f7ff feec 	bl	800160c <LL_ADC_IsEnabled>
 8001834:	4603      	mov	r3, r0
 8001836:	4323      	orrs	r3, r4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d105      	bne.n	8001848 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	4619      	mov	r1, r3
 8001842:	485f      	ldr	r0, [pc, #380]	; (80019c0 <HAL_ADC_Init+0x2a4>)
 8001844:	f7ff fd26 	bl	8001294 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	7e5b      	ldrb	r3, [r3, #25]
 800184c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001852:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001858:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800185e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001866:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d106      	bne.n	8001884 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	3b01      	subs	r3, #1
 800187c:	045b      	lsls	r3, r3, #17
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001888:	2b00      	cmp	r3, #0
 800188a:	d009      	beq.n	80018a0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001898:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	4b47      	ldr	r3, [pc, #284]	; (80019c4 <HAL_ADC_Init+0x2a8>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6812      	ldr	r2, [r2, #0]
 80018ae:	69b9      	ldr	r1, [r7, #24]
 80018b0:	430b      	orrs	r3, r1
 80018b2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fef5 	bl	80016a8 <LL_ADC_REG_IsConversionOngoing>
 80018be:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff16 	bl	80016f6 <LL_ADC_INJ_IsConversionOngoing>
 80018ca:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d13d      	bne.n	800194e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d13a      	bne.n	800194e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018dc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018e4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018f4:	f023 0302 	bic.w	r3, r3, #2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	69b9      	ldr	r1, [r7, #24]
 80018fe:	430b      	orrs	r3, r1
 8001900:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001908:	2b01      	cmp	r3, #1
 800190a:	d118      	bne.n	800193e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001916:	f023 0304 	bic.w	r3, r3, #4
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001922:	4311      	orrs	r1, r2
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001928:	4311      	orrs	r1, r2
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800192e:	430a      	orrs	r2, r1
 8001930:	431a      	orrs	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0201 	orr.w	r2, r2, #1
 800193a:	611a      	str	r2, [r3, #16]
 800193c:	e007      	b.n	800194e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	691a      	ldr	r2, [r3, #16]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0201 	bic.w	r2, r2, #1
 800194c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d10c      	bne.n	8001970 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195c:	f023 010f 	bic.w	r1, r3, #15
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	1e5a      	subs	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	631a      	str	r2, [r3, #48]	; 0x30
 800196e:	e007      	b.n	8001980 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 020f 	bic.w	r2, r2, #15
 800197e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001984:	f023 0303 	bic.w	r3, r3, #3
 8001988:	f043 0201 	orr.w	r2, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	655a      	str	r2, [r3, #84]	; 0x54
 8001990:	e007      	b.n	80019a2 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001996:	f043 0210 	orr.w	r2, r3, #16
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80019a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3724      	adds	r7, #36	; 0x24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd90      	pop	{r4, r7, pc}
 80019ac:	20000000 	.word	0x20000000
 80019b0:	053e2d63 	.word	0x053e2d63
 80019b4:	50040000 	.word	0x50040000
 80019b8:	50040100 	.word	0x50040100
 80019bc:	50040200 	.word	0x50040200
 80019c0:	50040300 	.word	0x50040300
 80019c4:	fff0c007 	.word	0xfff0c007

080019c8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019d4:	4853      	ldr	r0, [pc, #332]	; (8001b24 <HAL_ADC_Start_DMA+0x15c>)
 80019d6:	f7ff fd87 	bl	80014e8 <LL_ADC_GetMultimode>
 80019da:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff fe61 	bl	80016a8 <LL_ADC_REG_IsConversionOngoing>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f040 8093 	bne.w	8001b14 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <HAL_ADC_Start_DMA+0x34>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e08e      	b.n	8001b1a <HAL_ADC_Start_DMA+0x152>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a47      	ldr	r2, [pc, #284]	; (8001b28 <HAL_ADC_Start_DMA+0x160>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d008      	beq.n	8001a20 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	2b05      	cmp	r3, #5
 8001a18:	d002      	beq.n	8001a20 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	2b09      	cmp	r3, #9
 8001a1e:	d172      	bne.n	8001b06 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f000 ffdd 	bl	80029e0 <ADC_Enable>
 8001a26:	4603      	mov	r3, r0
 8001a28:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001a2a:	7dfb      	ldrb	r3, [r7, #23]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d165      	bne.n	8001afc <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a38      	ldr	r2, [pc, #224]	; (8001b2c <HAL_ADC_Start_DMA+0x164>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d002      	beq.n	8001a54 <HAL_ADC_Start_DMA+0x8c>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	e000      	b.n	8001a56 <HAL_ADC_Start_DMA+0x8e>
 8001a54:	4b36      	ldr	r3, [pc, #216]	; (8001b30 <HAL_ADC_Start_DMA+0x168>)
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	6812      	ldr	r2, [r2, #0]
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d002      	beq.n	8001a64 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d105      	bne.n	8001a70 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a68:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d006      	beq.n	8001a8a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a80:	f023 0206 	bic.w	r2, r3, #6
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	659a      	str	r2, [r3, #88]	; 0x58
 8001a88:	e002      	b.n	8001a90 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a94:	4a27      	ldr	r2, [pc, #156]	; (8001b34 <HAL_ADC_Start_DMA+0x16c>)
 8001a96:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9c:	4a26      	ldr	r2, [pc, #152]	; (8001b38 <HAL_ADC_Start_DMA+0x170>)
 8001a9e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa4:	4a25      	ldr	r2, [pc, #148]	; (8001b3c <HAL_ADC_Start_DMA+0x174>)
 8001aa6:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	221c      	movs	r2, #28
 8001aae:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 0210 	orr.w	r2, r2, #16
 8001ac6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0201 	orr.w	r2, r2, #1
 8001ad6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	3340      	adds	r3, #64	; 0x40
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f001 fbc6 	bl	8003278 <HAL_DMA_Start_IT>
 8001aec:	4603      	mov	r3, r0
 8001aee:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fdaf 	bl	8001658 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001afa:	e00d      	b.n	8001b18 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001b04:	e008      	b.n	8001b18 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001b12:	e001      	b.n	8001b18 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b14:	2302      	movs	r3, #2
 8001b16:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	50040300 	.word	0x50040300
 8001b28:	50040200 	.word	0x50040200
 8001b2c:	50040100 	.word	0x50040100
 8001b30:	50040000 	.word	0x50040000
 8001b34:	08002bab 	.word	0x08002bab
 8001b38:	08002c83 	.word	0x08002c83
 8001b3c:	08002c9f 	.word	0x08002c9f

08001b40 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_ADC_Stop_DMA+0x16>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e051      	b.n	8001bfa <HAL_ADC_Stop_DMA+0xba>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001b5e:	2103      	movs	r1, #3
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 fe81 	bl	8002868 <ADC_ConversionStop>
 8001b66:	4603      	mov	r3, r0
 8001b68:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d13f      	bne.n	8001bf0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0201 	bic.w	r2, r2, #1
 8001b7e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b84:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d10f      	bne.n	8001bae <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b92:	4618      	mov	r0, r3
 8001b94:	f001 fbd0 	bl	8003338 <HAL_DMA_Abort>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d005      	beq.n	8001bae <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0210 	bic.w	r2, r2, #16
 8001bbc:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d105      	bne.n	8001bd0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 ff91 	bl	8002aec <ADC_Disable>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	73fb      	strb	r3, [r7, #15]
 8001bce:	e002      	b.n	8001bd6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 ff8b 	bl	8002aec <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d109      	bne.n	8001bf0 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001be4:	f023 0301 	bic.w	r3, r3, #1
 8001be8:	f043 0201 	orr.w	r2, r3, #1
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c20:	4882      	ldr	r0, [pc, #520]	; (8001e2c <HAL_ADC_IRQHandler+0x228>)
 8001c22:	f7ff fc61 	bl	80014e8 <LL_ADC_GetMultimode>
 8001c26:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d017      	beq.n	8001c62 <HAL_ADC_IRQHandler+0x5e>
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d012      	beq.n	8001c62 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d105      	bne.n	8001c54 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f001 f88a 	bl	8002d6e <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d004      	beq.n	8001c76 <HAL_ADC_IRQHandler+0x72>
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	f003 0304 	and.w	r3, r3, #4
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10a      	bne.n	8001c8c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 8083 	beq.w	8001d88 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d07d      	beq.n	8001d88 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d105      	bne.n	8001ca4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fb7c 	bl	80013a6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d062      	beq.n	8001d7a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a5d      	ldr	r2, [pc, #372]	; (8001e30 <HAL_ADC_IRQHandler+0x22c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d002      	beq.n	8001cc4 <HAL_ADC_IRQHandler+0xc0>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	e000      	b.n	8001cc6 <HAL_ADC_IRQHandler+0xc2>
 8001cc4:	4b5b      	ldr	r3, [pc, #364]	; (8001e34 <HAL_ADC_IRQHandler+0x230>)
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6812      	ldr	r2, [r2, #0]
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d008      	beq.n	8001ce0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d005      	beq.n	8001ce0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	2b05      	cmp	r3, #5
 8001cd8:	d002      	beq.n	8001ce0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2b09      	cmp	r3, #9
 8001cde:	d104      	bne.n	8001cea <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	623b      	str	r3, [r7, #32]
 8001ce8:	e00c      	b.n	8001d04 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a50      	ldr	r2, [pc, #320]	; (8001e30 <HAL_ADC_IRQHandler+0x22c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d002      	beq.n	8001cfa <HAL_ADC_IRQHandler+0xf6>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	e000      	b.n	8001cfc <HAL_ADC_IRQHandler+0xf8>
 8001cfa:	4b4e      	ldr	r3, [pc, #312]	; (8001e34 <HAL_ADC_IRQHandler+0x230>)
 8001cfc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d135      	bne.n	8001d7a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d12e      	bne.n	8001d7a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fcc1 	bl	80016a8 <LL_ADC_REG_IsConversionOngoing>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d11a      	bne.n	8001d62 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 020c 	bic.w	r2, r2, #12
 8001d3a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d112      	bne.n	8001d7a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d58:	f043 0201 	orr.w	r2, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	655a      	str	r2, [r3, #84]	; 0x54
 8001d60:	e00b      	b.n	8001d7a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d66:	f043 0210 	orr.w	r2, r3, #16
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d72:	f043 0201 	orr.w	r2, r3, #1
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f95c 	bl	8002038 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	220c      	movs	r2, #12
 8001d86:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 0320 	and.w	r3, r3, #32
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d004      	beq.n	8001d9c <HAL_ADC_IRQHandler+0x198>
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	f003 0320 	and.w	r3, r3, #32
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10b      	bne.n	8001db4 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 809f 	beq.w	8001ee6 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 8099 	beq.w	8001ee6 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d105      	bne.n	8001dcc <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fb27 	bl	8001424 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001dd6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fae2 	bl	80013a6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001de2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a11      	ldr	r2, [pc, #68]	; (8001e30 <HAL_ADC_IRQHandler+0x22c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d002      	beq.n	8001df4 <HAL_ADC_IRQHandler+0x1f0>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	e000      	b.n	8001df6 <HAL_ADC_IRQHandler+0x1f2>
 8001df4:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <HAL_ADC_IRQHandler+0x230>)
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d008      	beq.n	8001e10 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d002      	beq.n	8001e10 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2b07      	cmp	r3, #7
 8001e0e:	d104      	bne.n	8001e1a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	623b      	str	r3, [r7, #32]
 8001e18:	e013      	b.n	8001e42 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <HAL_ADC_IRQHandler+0x22c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d009      	beq.n	8001e38 <HAL_ADC_IRQHandler+0x234>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	e007      	b.n	8001e3a <HAL_ADC_IRQHandler+0x236>
 8001e2a:	bf00      	nop
 8001e2c:	50040300 	.word	0x50040300
 8001e30:	50040100 	.word	0x50040100
 8001e34:	50040000 	.word	0x50040000
 8001e38:	4b7d      	ldr	r3, [pc, #500]	; (8002030 <HAL_ADC_IRQHandler+0x42c>)
 8001e3a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d047      	beq.n	8001ed8 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001e48:	6a3b      	ldr	r3, [r7, #32]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d007      	beq.n	8001e62 <HAL_ADC_IRQHandler+0x25e>
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d03f      	beq.n	8001ed8 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d13a      	bne.n	8001ed8 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e6c:	2b40      	cmp	r3, #64	; 0x40
 8001e6e:	d133      	bne.n	8001ed8 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d12e      	bne.n	8001ed8 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fc39 	bl	80016f6 <LL_ADC_INJ_IsConversionOngoing>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d11a      	bne.n	8001ec0 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e98:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d112      	bne.n	8001ed8 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb6:	f043 0201 	orr.w	r2, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	655a      	str	r2, [r3, #84]	; 0x54
 8001ebe:	e00b      	b.n	8001ed8 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec4:	f043 0210 	orr.w	r2, r3, #16
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	f043 0201 	orr.w	r2, r3, #1
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 ff20 	bl	8002d1e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2260      	movs	r2, #96	; 0x60
 8001ee4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d011      	beq.n	8001f14 <HAL_ADC_IRQHandler+0x310>
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00c      	beq.n	8001f14 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f8aa 	bl	8002060 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d012      	beq.n	8001f44 <HAL_ADC_IRQHandler+0x340>
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00d      	beq.n	8001f44 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 ff06 	bl	8002d46 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f42:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d012      	beq.n	8001f74 <HAL_ADC_IRQHandler+0x370>
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00d      	beq.n	8001f74 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 fef8 	bl	8002d5a <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d036      	beq.n	8001fec <HAL_ADC_IRQHandler+0x3e8>
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	f003 0310 	and.w	r3, r3, #16
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d031      	beq.n	8001fec <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d102      	bne.n	8001f96 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001f90:	2301      	movs	r3, #1
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
 8001f94:	e014      	b.n	8001fc0 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d008      	beq.n	8001fae <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001f9c:	4825      	ldr	r0, [pc, #148]	; (8002034 <HAL_ADC_IRQHandler+0x430>)
 8001f9e:	f7ff fab1 	bl	8001504 <LL_ADC_GetMultiDMATransfer>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00b      	beq.n	8001fc0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
 8001fac:	e008      	b.n	8001fc0 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d10e      	bne.n	8001fe4 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fca:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	f043 0202 	orr.w	r2, r3, #2
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f848 	bl	8002074 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2210      	movs	r2, #16
 8001fea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d018      	beq.n	8002028 <HAL_ADC_IRQHandler+0x424>
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d013      	beq.n	8002028 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002004:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002010:	f043 0208 	orr.w	r2, r3, #8
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002020:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fe85 	bl	8002d32 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002028:	bf00      	nop
 800202a:	3728      	adds	r7, #40	; 0x28
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	50040000 	.word	0x50040000
 8002034:	50040300 	.word	0x50040300

08002038 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b0b6      	sub	sp, #216	; 0xd8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x22>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e3c7      	b.n	800283a <HAL_ADC_ConfigChannel+0x7b2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff faf6 	bl	80016a8 <LL_ADC_REG_IsConversionOngoing>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f040 83a8 	bne.w	8002814 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b05      	cmp	r3, #5
 80020ca:	d824      	bhi.n	8002116 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	3b02      	subs	r3, #2
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d81b      	bhi.n	800210e <HAL_ADC_ConfigChannel+0x86>
 80020d6:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <HAL_ADC_ConfigChannel+0x54>)
 80020d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020dc:	080020ed 	.word	0x080020ed
 80020e0:	080020f5 	.word	0x080020f5
 80020e4:	080020fd 	.word	0x080020fd
 80020e8:	08002105 	.word	0x08002105
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	220c      	movs	r2, #12
 80020f0:	605a      	str	r2, [r3, #4]
          break;
 80020f2:	e011      	b.n	8002118 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	2212      	movs	r2, #18
 80020f8:	605a      	str	r2, [r3, #4]
          break;
 80020fa:	e00d      	b.n	8002118 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	2218      	movs	r2, #24
 8002100:	605a      	str	r2, [r3, #4]
          break;
 8002102:	e009      	b.n	8002118 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	f44f 7280 	mov.w	r2, #256	; 0x100
 800210a:	605a      	str	r2, [r3, #4]
          break;
 800210c:	e004      	b.n	8002118 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2206      	movs	r2, #6
 8002112:	605a      	str	r2, [r3, #4]
          break;
 8002114:	e000      	b.n	8002118 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002116:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	6859      	ldr	r1, [r3, #4]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	f7ff f951 	bl	80013cc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff faba 	bl	80016a8 <LL_ADC_REG_IsConversionOngoing>
 8002134:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fada 	bl	80016f6 <LL_ADC_INJ_IsConversionOngoing>
 8002142:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002146:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800214a:	2b00      	cmp	r3, #0
 800214c:	f040 81a6 	bne.w	800249c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002150:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002154:	2b00      	cmp	r3, #0
 8002156:	f040 81a1 	bne.w	800249c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	6819      	ldr	r1, [r3, #0]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	461a      	mov	r2, r3
 8002168:	f7ff f96f 	bl	800144a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	08db      	lsrs	r3, r3, #3
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	2b04      	cmp	r3, #4
 800218c:	d00a      	beq.n	80021a4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6919      	ldr	r1, [r3, #16]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800219e:	f7ff f8ad 	bl	80012fc <LL_ADC_SetOffset>
 80021a2:	e17b      	b.n	800249c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff f8ca 	bl	8001344 <LL_ADC_GetOffsetChannel>
 80021b0:	4603      	mov	r3, r0
 80021b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10a      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x148>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff f8bf 	bl	8001344 <LL_ADC_GetOffsetChannel>
 80021c6:	4603      	mov	r3, r0
 80021c8:	0e9b      	lsrs	r3, r3, #26
 80021ca:	f003 021f 	and.w	r2, r3, #31
 80021ce:	e01e      	b.n	800220e <HAL_ADC_ConfigChannel+0x186>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff f8b4 	bl	8001344 <LL_ADC_GetOffsetChannel>
 80021dc:	4603      	mov	r3, r0
 80021de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80021fe:	2320      	movs	r3, #32
 8002200:	e004      	b.n	800220c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002202:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	b2db      	uxtb	r3, r3
 800220c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002216:	2b00      	cmp	r3, #0
 8002218:	d105      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x19e>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	0e9b      	lsrs	r3, r3, #26
 8002220:	f003 031f 	and.w	r3, r3, #31
 8002224:	e018      	b.n	8002258 <HAL_ADC_ConfigChannel+0x1d0>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800223a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800223e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002242:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800224a:	2320      	movs	r3, #32
 800224c:	e004      	b.n	8002258 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800224e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002252:	fab3 f383 	clz	r3, r3
 8002256:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002258:	429a      	cmp	r2, r3
 800225a:	d106      	bne.n	800226a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2200      	movs	r2, #0
 8002262:	2100      	movs	r1, #0
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff f883 	bl	8001370 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2101      	movs	r1, #1
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff f867 	bl	8001344 <LL_ADC_GetOffsetChannel>
 8002276:	4603      	mov	r3, r0
 8002278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10a      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x20e>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2101      	movs	r1, #1
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff f85c 	bl	8001344 <LL_ADC_GetOffsetChannel>
 800228c:	4603      	mov	r3, r0
 800228e:	0e9b      	lsrs	r3, r3, #26
 8002290:	f003 021f 	and.w	r2, r3, #31
 8002294:	e01e      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x24c>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2101      	movs	r1, #1
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff f851 	bl	8001344 <LL_ADC_GetOffsetChannel>
 80022a2:	4603      	mov	r3, r0
 80022a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80022b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80022bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80022c4:	2320      	movs	r3, #32
 80022c6:	e004      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80022c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022cc:	fab3 f383 	clz	r3, r3
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d105      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x264>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0e9b      	lsrs	r3, r3, #26
 80022e6:	f003 031f 	and.w	r3, r3, #31
 80022ea:	e018      	b.n	800231e <HAL_ADC_ConfigChannel+0x296>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022f8:	fa93 f3a3 	rbit	r3, r3
 80022fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002300:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002304:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002308:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002310:	2320      	movs	r3, #32
 8002312:	e004      	b.n	800231e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002314:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002318:	fab3 f383 	clz	r3, r3
 800231c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800231e:	429a      	cmp	r2, r3
 8002320:	d106      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2200      	movs	r2, #0
 8002328:	2101      	movs	r1, #1
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff f820 	bl	8001370 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2102      	movs	r1, #2
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff f804 	bl	8001344 <LL_ADC_GetOffsetChannel>
 800233c:	4603      	mov	r3, r0
 800233e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10a      	bne.n	800235c <HAL_ADC_ConfigChannel+0x2d4>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2102      	movs	r1, #2
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe fff9 	bl	8001344 <LL_ADC_GetOffsetChannel>
 8002352:	4603      	mov	r3, r0
 8002354:	0e9b      	lsrs	r3, r3, #26
 8002356:	f003 021f 	and.w	r2, r3, #31
 800235a:	e01e      	b.n	800239a <HAL_ADC_ConfigChannel+0x312>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2102      	movs	r1, #2
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe ffee 	bl	8001344 <LL_ADC_GetOffsetChannel>
 8002368:	4603      	mov	r3, r0
 800236a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800237a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800237e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002382:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800238a:	2320      	movs	r3, #32
 800238c:	e004      	b.n	8002398 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800238e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d105      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x32a>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	0e9b      	lsrs	r3, r3, #26
 80023ac:	f003 031f 	and.w	r3, r3, #31
 80023b0:	e016      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x358>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023be:	fa93 f3a3 	rbit	r3, r3
 80023c2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80023c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80023ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80023d2:	2320      	movs	r3, #32
 80023d4:	e004      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80023d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023da:	fab3 f383 	clz	r3, r3
 80023de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d106      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2200      	movs	r2, #0
 80023ea:	2102      	movs	r1, #2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe ffbf 	bl	8001370 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2103      	movs	r1, #3
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe ffa3 	bl	8001344 <LL_ADC_GetOffsetChannel>
 80023fe:	4603      	mov	r3, r0
 8002400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10a      	bne.n	800241e <HAL_ADC_ConfigChannel+0x396>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2103      	movs	r1, #3
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe ff98 	bl	8001344 <LL_ADC_GetOffsetChannel>
 8002414:	4603      	mov	r3, r0
 8002416:	0e9b      	lsrs	r3, r3, #26
 8002418:	f003 021f 	and.w	r2, r3, #31
 800241c:	e017      	b.n	800244e <HAL_ADC_ConfigChannel+0x3c6>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2103      	movs	r1, #3
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe ff8d 	bl	8001344 <LL_ADC_GetOffsetChannel>
 800242a:	4603      	mov	r3, r0
 800242c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002430:	fa93 f3a3 	rbit	r3, r3
 8002434:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002436:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002438:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800243a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002440:	2320      	movs	r3, #32
 8002442:	e003      	b.n	800244c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002446:	fab3 f383 	clz	r3, r3
 800244a:	b2db      	uxtb	r3, r3
 800244c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002456:	2b00      	cmp	r3, #0
 8002458:	d105      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x3de>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	0e9b      	lsrs	r3, r3, #26
 8002460:	f003 031f 	and.w	r3, r3, #31
 8002464:	e011      	b.n	800248a <HAL_ADC_ConfigChannel+0x402>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002476:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800247e:	2320      	movs	r3, #32
 8002480:	e003      	b.n	800248a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002484:	fab3 f383 	clz	r3, r3
 8002488:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800248a:	429a      	cmp	r2, r3
 800248c:	d106      	bne.n	800249c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2200      	movs	r2, #0
 8002494:	2103      	movs	r1, #3
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe ff6a 	bl	8001370 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff f8b3 	bl	800160c <LL_ADC_IsEnabled>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f040 813f 	bne.w	800272c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	6819      	ldr	r1, [r3, #0]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	461a      	mov	r2, r3
 80024bc:	f7fe fff0 	bl	80014a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4a8e      	ldr	r2, [pc, #568]	; (8002700 <HAL_ADC_ConfigChannel+0x678>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	f040 8130 	bne.w	800272c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10b      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x46c>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	0e9b      	lsrs	r3, r3, #26
 80024e2:	3301      	adds	r3, #1
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	2b09      	cmp	r3, #9
 80024ea:	bf94      	ite	ls
 80024ec:	2301      	movls	r3, #1
 80024ee:	2300      	movhi	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	e019      	b.n	8002528 <HAL_ADC_ConfigChannel+0x4a0>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024fc:	fa93 f3a3 	rbit	r3, r3
 8002500:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002502:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002504:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800250c:	2320      	movs	r3, #32
 800250e:	e003      	b.n	8002518 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002510:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	3301      	adds	r3, #1
 800251a:	f003 031f 	and.w	r3, r3, #31
 800251e:	2b09      	cmp	r3, #9
 8002520:	bf94      	ite	ls
 8002522:	2301      	movls	r3, #1
 8002524:	2300      	movhi	r3, #0
 8002526:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002528:	2b00      	cmp	r3, #0
 800252a:	d079      	beq.n	8002620 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002534:	2b00      	cmp	r3, #0
 8002536:	d107      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x4c0>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	0e9b      	lsrs	r3, r3, #26
 800253e:	3301      	adds	r3, #1
 8002540:	069b      	lsls	r3, r3, #26
 8002542:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002546:	e015      	b.n	8002574 <HAL_ADC_ConfigChannel+0x4ec>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002550:	fa93 f3a3 	rbit	r3, r3
 8002554:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002558:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800255a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002560:	2320      	movs	r3, #32
 8002562:	e003      	b.n	800256c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	3301      	adds	r3, #1
 800256e:	069b      	lsls	r3, r3, #26
 8002570:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257c:	2b00      	cmp	r3, #0
 800257e:	d109      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x50c>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	0e9b      	lsrs	r3, r3, #26
 8002586:	3301      	adds	r3, #1
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	2101      	movs	r1, #1
 800258e:	fa01 f303 	lsl.w	r3, r1, r3
 8002592:	e017      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x53c>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80025a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025a4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80025a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80025ac:	2320      	movs	r3, #32
 80025ae:	e003      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80025b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025b2:	fab3 f383 	clz	r3, r3
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	3301      	adds	r3, #1
 80025ba:	f003 031f 	and.w	r3, r3, #31
 80025be:	2101      	movs	r1, #1
 80025c0:	fa01 f303 	lsl.w	r3, r1, r3
 80025c4:	ea42 0103 	orr.w	r1, r2, r3
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10a      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x562>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0e9b      	lsrs	r3, r3, #26
 80025da:	3301      	adds	r3, #1
 80025dc:	f003 021f 	and.w	r2, r3, #31
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	051b      	lsls	r3, r3, #20
 80025e8:	e018      	b.n	800261c <HAL_ADC_ConfigChannel+0x594>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80025fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002602:	2320      	movs	r3, #32
 8002604:	e003      	b.n	800260e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002608:	fab3 f383 	clz	r3, r3
 800260c:	b2db      	uxtb	r3, r3
 800260e:	3301      	adds	r3, #1
 8002610:	f003 021f 	and.w	r2, r3, #31
 8002614:	4613      	mov	r3, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4413      	add	r3, r2
 800261a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800261c:	430b      	orrs	r3, r1
 800261e:	e080      	b.n	8002722 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002628:	2b00      	cmp	r3, #0
 800262a:	d107      	bne.n	800263c <HAL_ADC_ConfigChannel+0x5b4>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	0e9b      	lsrs	r3, r3, #26
 8002632:	3301      	adds	r3, #1
 8002634:	069b      	lsls	r3, r3, #26
 8002636:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800263a:	e015      	b.n	8002668 <HAL_ADC_ConfigChannel+0x5e0>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002644:	fa93 f3a3 	rbit	r3, r3
 8002648:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800264a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002654:	2320      	movs	r3, #32
 8002656:	e003      	b.n	8002660 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	3301      	adds	r3, #1
 8002662:	069b      	lsls	r3, r3, #26
 8002664:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002670:	2b00      	cmp	r3, #0
 8002672:	d109      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x600>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	0e9b      	lsrs	r3, r3, #26
 800267a:	3301      	adds	r3, #1
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	2101      	movs	r1, #1
 8002682:	fa01 f303 	lsl.w	r3, r1, r3
 8002686:	e017      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x630>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	61fb      	str	r3, [r7, #28]
  return result;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80026a0:	2320      	movs	r3, #32
 80026a2:	e003      	b.n	80026ac <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	3301      	adds	r3, #1
 80026ae:	f003 031f 	and.w	r3, r3, #31
 80026b2:	2101      	movs	r1, #1
 80026b4:	fa01 f303 	lsl.w	r3, r1, r3
 80026b8:	ea42 0103 	orr.w	r1, r2, r3
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10d      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x65c>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	0e9b      	lsrs	r3, r3, #26
 80026ce:	3301      	adds	r3, #1
 80026d0:	f003 021f 	and.w	r2, r3, #31
 80026d4:	4613      	mov	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4413      	add	r3, r2
 80026da:	3b1e      	subs	r3, #30
 80026dc:	051b      	lsls	r3, r3, #20
 80026de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026e2:	e01d      	b.n	8002720 <HAL_ADC_ConfigChannel+0x698>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	fa93 f3a3 	rbit	r3, r3
 80026f0:	613b      	str	r3, [r7, #16]
  return result;
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d103      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80026fc:	2320      	movs	r3, #32
 80026fe:	e005      	b.n	800270c <HAL_ADC_ConfigChannel+0x684>
 8002700:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	fab3 f383 	clz	r3, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	3301      	adds	r3, #1
 800270e:	f003 021f 	and.w	r2, r3, #31
 8002712:	4613      	mov	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	4413      	add	r3, r2
 8002718:	3b1e      	subs	r3, #30
 800271a:	051b      	lsls	r3, r3, #20
 800271c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002720:	430b      	orrs	r3, r1
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	6892      	ldr	r2, [r2, #8]
 8002726:	4619      	mov	r1, r3
 8002728:	f7fe fe8f 	bl	800144a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4b44      	ldr	r3, [pc, #272]	; (8002844 <HAL_ADC_ConfigChannel+0x7bc>)
 8002732:	4013      	ands	r3, r2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d07a      	beq.n	800282e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002738:	4843      	ldr	r0, [pc, #268]	; (8002848 <HAL_ADC_ConfigChannel+0x7c0>)
 800273a:	f7fe fdd1 	bl	80012e0 <LL_ADC_GetCommonPathInternalCh>
 800273e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a41      	ldr	r2, [pc, #260]	; (800284c <HAL_ADC_ConfigChannel+0x7c4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d12c      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800274c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002750:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d126      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a3c      	ldr	r2, [pc, #240]	; (8002850 <HAL_ADC_ConfigChannel+0x7c8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d004      	beq.n	800276c <HAL_ADC_ConfigChannel+0x6e4>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a3b      	ldr	r2, [pc, #236]	; (8002854 <HAL_ADC_ConfigChannel+0x7cc>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d15d      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800276c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002770:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002774:	4619      	mov	r1, r3
 8002776:	4834      	ldr	r0, [pc, #208]	; (8002848 <HAL_ADC_ConfigChannel+0x7c0>)
 8002778:	f7fe fd9f 	bl	80012ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800277c:	4b36      	ldr	r3, [pc, #216]	; (8002858 <HAL_ADC_ConfigChannel+0x7d0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	099b      	lsrs	r3, r3, #6
 8002782:	4a36      	ldr	r2, [pc, #216]	; (800285c <HAL_ADC_ConfigChannel+0x7d4>)
 8002784:	fba2 2303 	umull	r2, r3, r2, r3
 8002788:	099b      	lsrs	r3, r3, #6
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	4613      	mov	r3, r2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002796:	e002      	b.n	800279e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3b01      	subs	r3, #1
 800279c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1f9      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027a4:	e040      	b.n	8002828 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a2d      	ldr	r2, [pc, #180]	; (8002860 <HAL_ADC_ConfigChannel+0x7d8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d118      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x75a>
 80027b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d112      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a23      	ldr	r2, [pc, #140]	; (8002850 <HAL_ADC_ConfigChannel+0x7c8>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d004      	beq.n	80027d0 <HAL_ADC_ConfigChannel+0x748>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a22      	ldr	r2, [pc, #136]	; (8002854 <HAL_ADC_ConfigChannel+0x7cc>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d12d      	bne.n	800282c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027d8:	4619      	mov	r1, r3
 80027da:	481b      	ldr	r0, [pc, #108]	; (8002848 <HAL_ADC_ConfigChannel+0x7c0>)
 80027dc:	f7fe fd6d 	bl	80012ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027e0:	e024      	b.n	800282c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a1f      	ldr	r2, [pc, #124]	; (8002864 <HAL_ADC_ConfigChannel+0x7dc>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d120      	bne.n	800282e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d11a      	bne.n	800282e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a14      	ldr	r2, [pc, #80]	; (8002850 <HAL_ADC_ConfigChannel+0x7c8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d115      	bne.n	800282e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002802:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002806:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800280a:	4619      	mov	r1, r3
 800280c:	480e      	ldr	r0, [pc, #56]	; (8002848 <HAL_ADC_ConfigChannel+0x7c0>)
 800280e:	f7fe fd54 	bl	80012ba <LL_ADC_SetCommonPathInternalCh>
 8002812:	e00c      	b.n	800282e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002818:	f043 0220 	orr.w	r2, r3, #32
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002826:	e002      	b.n	800282e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002828:	bf00      	nop
 800282a:	e000      	b.n	800282e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800282c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002836:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800283a:	4618      	mov	r0, r3
 800283c:	37d8      	adds	r7, #216	; 0xd8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	80080000 	.word	0x80080000
 8002848:	50040300 	.word	0x50040300
 800284c:	c7520000 	.word	0xc7520000
 8002850:	50040000 	.word	0x50040000
 8002854:	50040200 	.word	0x50040200
 8002858:	20000000 	.word	0x20000000
 800285c:	053e2d63 	.word	0x053e2d63
 8002860:	cb840000 	.word	0xcb840000
 8002864:	80000001 	.word	0x80000001

08002868 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe ff12 	bl	80016a8 <LL_ADC_REG_IsConversionOngoing>
 8002884:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe ff33 	bl	80016f6 <LL_ADC_INJ_IsConversionOngoing>
 8002890:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d103      	bne.n	80028a0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 8098 	beq.w	80029d0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d02a      	beq.n	8002904 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	7e5b      	ldrb	r3, [r3, #25]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d126      	bne.n	8002904 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	7e1b      	ldrb	r3, [r3, #24]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d122      	bne.n	8002904 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80028be:	2301      	movs	r3, #1
 80028c0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80028c2:	e014      	b.n	80028ee <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	4a45      	ldr	r2, [pc, #276]	; (80029dc <ADC_ConversionStop+0x174>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d90d      	bls.n	80028e8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d0:	f043 0210 	orr.w	r2, r3, #16
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028dc:	f043 0201 	orr.w	r2, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e074      	b.n	80029d2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	3301      	adds	r3, #1
 80028ec:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f8:	2b40      	cmp	r3, #64	; 0x40
 80028fa:	d1e3      	bne.n	80028c4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2240      	movs	r2, #64	; 0x40
 8002902:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d014      	beq.n	8002934 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe feca 	bl	80016a8 <LL_ADC_REG_IsConversionOngoing>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00c      	beq.n	8002934 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe fe87 	bl	8001632 <LL_ADC_IsDisableOngoing>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d104      	bne.n	8002934 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe fea6 	bl	8001680 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d014      	beq.n	8002964 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7fe fed9 	bl	80016f6 <LL_ADC_INJ_IsConversionOngoing>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00c      	beq.n	8002964 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe fe6f 	bl	8001632 <LL_ADC_IsDisableOngoing>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d104      	bne.n	8002964 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe feb5 	bl	80016ce <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d005      	beq.n	8002976 <ADC_ConversionStop+0x10e>
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d105      	bne.n	800297c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002970:	230c      	movs	r3, #12
 8002972:	617b      	str	r3, [r7, #20]
        break;
 8002974:	e005      	b.n	8002982 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002976:	2308      	movs	r3, #8
 8002978:	617b      	str	r3, [r7, #20]
        break;
 800297a:	e002      	b.n	8002982 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800297c:	2304      	movs	r3, #4
 800297e:	617b      	str	r3, [r7, #20]
        break;
 8002980:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002982:	f7fe fc57 	bl	8001234 <HAL_GetTick>
 8002986:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002988:	e01b      	b.n	80029c2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800298a:	f7fe fc53 	bl	8001234 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b05      	cmp	r3, #5
 8002996:	d914      	bls.n	80029c2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00d      	beq.n	80029c2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029aa:	f043 0210 	orr.w	r2, r3, #16
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b6:	f043 0201 	orr.w	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e007      	b.n	80029d2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1dc      	bne.n	800298a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3720      	adds	r7, #32
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	a33fffff 	.word	0xa33fffff

080029e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fe fe0b 	bl	800160c <LL_ADC_IsEnabled>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d169      	bne.n	8002ad0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	4b36      	ldr	r3, [pc, #216]	; (8002adc <ADC_Enable+0xfc>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00d      	beq.n	8002a26 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0e:	f043 0210 	orr.w	r2, r3, #16
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1a:	f043 0201 	orr.w	r2, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e055      	b.n	8002ad2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe fdc6 	bl	80015bc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a30:	482b      	ldr	r0, [pc, #172]	; (8002ae0 <ADC_Enable+0x100>)
 8002a32:	f7fe fc55 	bl	80012e0 <LL_ADC_GetCommonPathInternalCh>
 8002a36:	4603      	mov	r3, r0
 8002a38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d013      	beq.n	8002a68 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a40:	4b28      	ldr	r3, [pc, #160]	; (8002ae4 <ADC_Enable+0x104>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	099b      	lsrs	r3, r3, #6
 8002a46:	4a28      	ldr	r2, [pc, #160]	; (8002ae8 <ADC_Enable+0x108>)
 8002a48:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4c:	099b      	lsrs	r3, r3, #6
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	4613      	mov	r3, r2
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	4413      	add	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002a5a:	e002      	b.n	8002a62 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1f9      	bne.n	8002a5c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a68:	f7fe fbe4 	bl	8001234 <HAL_GetTick>
 8002a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a6e:	e028      	b.n	8002ac2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7fe fdc9 	bl	800160c <LL_ADC_IsEnabled>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d104      	bne.n	8002a8a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fe fd99 	bl	80015bc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a8a:	f7fe fbd3 	bl	8001234 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d914      	bls.n	8002ac2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d00d      	beq.n	8002ac2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aaa:	f043 0210 	orr.w	r2, r3, #16
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab6:	f043 0201 	orr.w	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e007      	b.n	8002ad2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d1cf      	bne.n	8002a70 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	8000003f 	.word	0x8000003f
 8002ae0:	50040300 	.word	0x50040300
 8002ae4:	20000000 	.word	0x20000000
 8002ae8:	053e2d63 	.word	0x053e2d63

08002aec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fe fd9a 	bl	8001632 <LL_ADC_IsDisableOngoing>
 8002afe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fe fd81 	bl	800160c <LL_ADC_IsEnabled>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d047      	beq.n	8002ba0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d144      	bne.n	8002ba0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 030d 	and.w	r3, r3, #13
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d10c      	bne.n	8002b3e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fe fd5b 	bl	80015e4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2203      	movs	r2, #3
 8002b34:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b36:	f7fe fb7d 	bl	8001234 <HAL_GetTick>
 8002b3a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b3c:	e029      	b.n	8002b92 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b42:	f043 0210 	orr.w	r2, r3, #16
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4e:	f043 0201 	orr.w	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e023      	b.n	8002ba2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b5a:	f7fe fb6b 	bl	8001234 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d914      	bls.n	8002b92 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00d      	beq.n	8002b92 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7a:	f043 0210 	orr.w	r2, r3, #16
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b86:	f043 0201 	orr.w	r2, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e007      	b.n	8002ba2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1dc      	bne.n	8002b5a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d14b      	bne.n	8002c5c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d021      	beq.n	8002c22 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe fbdf 	bl	80013a6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d032      	beq.n	8002c54 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d12b      	bne.n	8002c54 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d11f      	bne.n	8002c54 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c18:	f043 0201 	orr.w	r2, r3, #1
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	655a      	str	r2, [r3, #84]	; 0x54
 8002c20:	e018      	b.n	8002c54 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d111      	bne.n	8002c54 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d105      	bne.n	8002c54 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4c:	f043 0201 	orr.w	r2, r3, #1
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f7ff f9ef 	bl	8002038 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c5a:	e00e      	b.n	8002c7a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f7ff fa03 	bl	8002074 <HAL_ADC_ErrorCallback>
}
 8002c6e:	e004      	b.n	8002c7a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	4798      	blx	r3
}
 8002c7a:	bf00      	nop
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f7ff f9db 	bl	800204c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbc:	f043 0204 	orr.w	r2, r3, #4
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f7ff f9d5 	bl	8002074 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <LL_ADC_IsEnabled>:
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <LL_ADC_IsEnabled+0x18>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <LL_ADC_IsEnabled+0x1a>
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_ADC_REG_IsConversionOngoing>:
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d101      	bne.n	8002d10 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d84:	b590      	push	{r4, r7, lr}
 8002d86:	b09f      	sub	sp, #124	; 0x7c
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e093      	b.n	8002eca <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002daa:	2300      	movs	r3, #0
 8002dac:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002dae:	2300      	movs	r3, #0
 8002db0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a47      	ldr	r2, [pc, #284]	; (8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d102      	bne.n	8002dc2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002dbc:	4b46      	ldr	r3, [pc, #280]	; (8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	e001      	b.n	8002dc6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10b      	bne.n	8002de4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd0:	f043 0220 	orr.w	r2, r3, #32
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e072      	b.n	8002eca <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff ff86 	bl	8002cf8 <LL_ADC_REG_IsConversionOngoing>
 8002dec:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff ff80 	bl	8002cf8 <LL_ADC_REG_IsConversionOngoing>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d154      	bne.n	8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d151      	bne.n	8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e04:	4b35      	ldr	r3, [pc, #212]	; (8002edc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002e06:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d02c      	beq.n	8002e6a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	6859      	ldr	r1, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e22:	035b      	lsls	r3, r3, #13
 8002e24:	430b      	orrs	r3, r1
 8002e26:	431a      	orrs	r2, r3
 8002e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e2c:	4829      	ldr	r0, [pc, #164]	; (8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e2e:	f7ff ff50 	bl	8002cd2 <LL_ADC_IsEnabled>
 8002e32:	4604      	mov	r4, r0
 8002e34:	4828      	ldr	r0, [pc, #160]	; (8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e36:	f7ff ff4c 	bl	8002cd2 <LL_ADC_IsEnabled>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	431c      	orrs	r4, r3
 8002e3e:	4828      	ldr	r0, [pc, #160]	; (8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e40:	f7ff ff47 	bl	8002cd2 <LL_ADC_IsEnabled>
 8002e44:	4603      	mov	r3, r0
 8002e46:	4323      	orrs	r3, r4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d137      	bne.n	8002ebc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e54:	f023 030f 	bic.w	r3, r3, #15
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	6811      	ldr	r1, [r2, #0]
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	6892      	ldr	r2, [r2, #8]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	431a      	orrs	r2, r3
 8002e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e66:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e68:	e028      	b.n	8002ebc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e74:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e76:	4817      	ldr	r0, [pc, #92]	; (8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e78:	f7ff ff2b 	bl	8002cd2 <LL_ADC_IsEnabled>
 8002e7c:	4604      	mov	r4, r0
 8002e7e:	4816      	ldr	r0, [pc, #88]	; (8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e80:	f7ff ff27 	bl	8002cd2 <LL_ADC_IsEnabled>
 8002e84:	4603      	mov	r3, r0
 8002e86:	431c      	orrs	r4, r3
 8002e88:	4815      	ldr	r0, [pc, #84]	; (8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e8a:	f7ff ff22 	bl	8002cd2 <LL_ADC_IsEnabled>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	4323      	orrs	r3, r4
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d112      	bne.n	8002ebc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e9e:	f023 030f 	bic.w	r3, r3, #15
 8002ea2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ea4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ea6:	e009      	b.n	8002ebc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eac:	f043 0220 	orr.w	r2, r3, #32
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002eba:	e000      	b.n	8002ebe <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ebc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ec6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	377c      	adds	r7, #124	; 0x7c
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd90      	pop	{r4, r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	50040000 	.word	0x50040000
 8002ed8:	50040100 	.word	0x50040100
 8002edc:	50040300 	.word	0x50040300
 8002ee0:	50040200 	.word	0x50040200

08002ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f00:	4013      	ands	r3, r2
 8002f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f16:	4a04      	ldr	r2, [pc, #16]	; (8002f28 <__NVIC_SetPriorityGrouping+0x44>)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	60d3      	str	r3, [r2, #12]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f30:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <__NVIC_GetPriorityGrouping+0x18>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	0a1b      	lsrs	r3, r3, #8
 8002f36:	f003 0307 	and.w	r3, r3, #7
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	e000ed00 	.word	0xe000ed00

08002f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	db0b      	blt.n	8002f72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	f003 021f 	and.w	r2, r3, #31
 8002f60:	4907      	ldr	r1, [pc, #28]	; (8002f80 <__NVIC_EnableIRQ+0x38>)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	2001      	movs	r0, #1
 8002f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	e000e100 	.word	0xe000e100

08002f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	6039      	str	r1, [r7, #0]
 8002f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	db0a      	blt.n	8002fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	490c      	ldr	r1, [pc, #48]	; (8002fd0 <__NVIC_SetPriority+0x4c>)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	0112      	lsls	r2, r2, #4
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fac:	e00a      	b.n	8002fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	4908      	ldr	r1, [pc, #32]	; (8002fd4 <__NVIC_SetPriority+0x50>)
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	3b04      	subs	r3, #4
 8002fbc:	0112      	lsls	r2, r2, #4
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	761a      	strb	r2, [r3, #24]
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000e100 	.word	0xe000e100
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	; 0x24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f1c3 0307 	rsb	r3, r3, #7
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	bf28      	it	cs
 8002ff6:	2304      	movcs	r3, #4
 8002ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	2b06      	cmp	r3, #6
 8003000:	d902      	bls.n	8003008 <NVIC_EncodePriority+0x30>
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3b03      	subs	r3, #3
 8003006:	e000      	b.n	800300a <NVIC_EncodePriority+0x32>
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800300c:	f04f 32ff 	mov.w	r2, #4294967295
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43da      	mvns	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	401a      	ands	r2, r3
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003020:	f04f 31ff 	mov.w	r1, #4294967295
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	43d9      	mvns	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003030:	4313      	orrs	r3, r2
         );
}
 8003032:	4618      	mov	r0, r3
 8003034:	3724      	adds	r7, #36	; 0x24
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
	...

08003040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3b01      	subs	r3, #1
 800304c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003050:	d301      	bcc.n	8003056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003052:	2301      	movs	r3, #1
 8003054:	e00f      	b.n	8003076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003056:	4a0a      	ldr	r2, [pc, #40]	; (8003080 <SysTick_Config+0x40>)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3b01      	subs	r3, #1
 800305c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800305e:	210f      	movs	r1, #15
 8003060:	f04f 30ff 	mov.w	r0, #4294967295
 8003064:	f7ff ff8e 	bl	8002f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <SysTick_Config+0x40>)
 800306a:	2200      	movs	r2, #0
 800306c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800306e:	4b04      	ldr	r3, [pc, #16]	; (8003080 <SysTick_Config+0x40>)
 8003070:	2207      	movs	r2, #7
 8003072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	e000e010 	.word	0xe000e010

08003084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff ff29 	bl	8002ee4 <__NVIC_SetPriorityGrouping>
}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b086      	sub	sp, #24
 800309e:	af00      	add	r7, sp, #0
 80030a0:	4603      	mov	r3, r0
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
 80030a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030ac:	f7ff ff3e 	bl	8002f2c <__NVIC_GetPriorityGrouping>
 80030b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	6978      	ldr	r0, [r7, #20]
 80030b8:	f7ff ff8e 	bl	8002fd8 <NVIC_EncodePriority>
 80030bc:	4602      	mov	r2, r0
 80030be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff ff5d 	bl	8002f84 <__NVIC_SetPriority>
}
 80030ca:	bf00      	nop
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	4603      	mov	r3, r0
 80030da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff ff31 	bl	8002f48 <__NVIC_EnableIRQ>
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff ffa2 	bl	8003040 <SysTick_Config>
 80030fc:	4603      	mov	r3, r0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e098      	b.n	800324c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	4b4d      	ldr	r3, [pc, #308]	; (8003258 <HAL_DMA_Init+0x150>)
 8003122:	429a      	cmp	r2, r3
 8003124:	d80f      	bhi.n	8003146 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	4b4b      	ldr	r3, [pc, #300]	; (800325c <HAL_DMA_Init+0x154>)
 800312e:	4413      	add	r3, r2
 8003130:	4a4b      	ldr	r2, [pc, #300]	; (8003260 <HAL_DMA_Init+0x158>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	091b      	lsrs	r3, r3, #4
 8003138:	009a      	lsls	r2, r3, #2
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a48      	ldr	r2, [pc, #288]	; (8003264 <HAL_DMA_Init+0x15c>)
 8003142:	641a      	str	r2, [r3, #64]	; 0x40
 8003144:	e00e      	b.n	8003164 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	4b46      	ldr	r3, [pc, #280]	; (8003268 <HAL_DMA_Init+0x160>)
 800314e:	4413      	add	r3, r2
 8003150:	4a43      	ldr	r2, [pc, #268]	; (8003260 <HAL_DMA_Init+0x158>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	091b      	lsrs	r3, r3, #4
 8003158:	009a      	lsls	r2, r3, #2
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a42      	ldr	r2, [pc, #264]	; (800326c <HAL_DMA_Init+0x164>)
 8003162:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800317a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800317e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003188:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003194:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031be:	d039      	beq.n	8003234 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	4a27      	ldr	r2, [pc, #156]	; (8003264 <HAL_DMA_Init+0x15c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d11a      	bne.n	8003200 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80031ca:	4b29      	ldr	r3, [pc, #164]	; (8003270 <HAL_DMA_Init+0x168>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d2:	f003 031c 	and.w	r3, r3, #28
 80031d6:	210f      	movs	r1, #15
 80031d8:	fa01 f303 	lsl.w	r3, r1, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	4924      	ldr	r1, [pc, #144]	; (8003270 <HAL_DMA_Init+0x168>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80031e4:	4b22      	ldr	r3, [pc, #136]	; (8003270 <HAL_DMA_Init+0x168>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6859      	ldr	r1, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f0:	f003 031c 	and.w	r3, r3, #28
 80031f4:	fa01 f303 	lsl.w	r3, r1, r3
 80031f8:	491d      	ldr	r1, [pc, #116]	; (8003270 <HAL_DMA_Init+0x168>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]
 80031fe:	e019      	b.n	8003234 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003200:	4b1c      	ldr	r3, [pc, #112]	; (8003274 <HAL_DMA_Init+0x16c>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003208:	f003 031c 	and.w	r3, r3, #28
 800320c:	210f      	movs	r1, #15
 800320e:	fa01 f303 	lsl.w	r3, r1, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	4917      	ldr	r1, [pc, #92]	; (8003274 <HAL_DMA_Init+0x16c>)
 8003216:	4013      	ands	r3, r2
 8003218:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800321a:	4b16      	ldr	r3, [pc, #88]	; (8003274 <HAL_DMA_Init+0x16c>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6859      	ldr	r1, [r3, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	f003 031c 	and.w	r3, r3, #28
 800322a:	fa01 f303 	lsl.w	r3, r1, r3
 800322e:	4911      	ldr	r1, [pc, #68]	; (8003274 <HAL_DMA_Init+0x16c>)
 8003230:	4313      	orrs	r3, r2
 8003232:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	40020407 	.word	0x40020407
 800325c:	bffdfff8 	.word	0xbffdfff8
 8003260:	cccccccd 	.word	0xcccccccd
 8003264:	40020000 	.word	0x40020000
 8003268:	bffdfbf8 	.word	0xbffdfbf8
 800326c:	40020400 	.word	0x40020400
 8003270:	400200a8 	.word	0x400200a8
 8003274:	400204a8 	.word	0x400204a8

08003278 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_DMA_Start_IT+0x20>
 8003294:	2302      	movs	r3, #2
 8003296:	e04b      	b.n	8003330 <HAL_DMA_Start_IT+0xb8>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d13a      	bne.n	8003322 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0201 	bic.w	r2, r2, #1
 80032c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	68b9      	ldr	r1, [r7, #8]
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 f91e 	bl	8003512 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d008      	beq.n	80032f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f042 020e 	orr.w	r2, r2, #14
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	e00f      	b.n	8003310 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0204 	bic.w	r2, r2, #4
 80032fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 020a 	orr.w	r2, r2, #10
 800330e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	e005      	b.n	800332e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800332a:	2302      	movs	r3, #2
 800332c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800332e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003340:	2300      	movs	r3, #0
 8003342:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d008      	beq.n	8003362 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2204      	movs	r2, #4
 8003354:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e022      	b.n	80033a8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 020e 	bic.w	r2, r2, #14
 8003370:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0201 	bic.w	r2, r2, #1
 8003380:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	f003 021c 	and.w	r2, r3, #28
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	2101      	movs	r1, #1
 8003390:	fa01 f202 	lsl.w	r2, r1, r2
 8003394:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d0:	f003 031c 	and.w	r3, r3, #28
 80033d4:	2204      	movs	r2, #4
 80033d6:	409a      	lsls	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d026      	beq.n	800342e <HAL_DMA_IRQHandler+0x7a>
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d021      	beq.n	800342e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0320 	and.w	r3, r3, #32
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d107      	bne.n	8003408 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0204 	bic.w	r2, r2, #4
 8003406:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340c:	f003 021c 	and.w	r2, r3, #28
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	2104      	movs	r1, #4
 8003416:	fa01 f202 	lsl.w	r2, r1, r2
 800341a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	2b00      	cmp	r3, #0
 8003422:	d071      	beq.n	8003508 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800342c:	e06c      	b.n	8003508 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	f003 031c 	and.w	r3, r3, #28
 8003436:	2202      	movs	r2, #2
 8003438:	409a      	lsls	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4013      	ands	r3, r2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d02e      	beq.n	80034a0 <HAL_DMA_IRQHandler+0xec>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d029      	beq.n	80034a0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10b      	bne.n	8003472 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 020a 	bic.w	r2, r2, #10
 8003468:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003476:	f003 021c 	and.w	r2, r3, #28
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	2102      	movs	r1, #2
 8003480:	fa01 f202 	lsl.w	r2, r1, r2
 8003484:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	2b00      	cmp	r3, #0
 8003494:	d038      	beq.n	8003508 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800349e:	e033      	b.n	8003508 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a4:	f003 031c 	and.w	r3, r3, #28
 80034a8:	2208      	movs	r2, #8
 80034aa:	409a      	lsls	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d02a      	beq.n	800350a <HAL_DMA_IRQHandler+0x156>
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d025      	beq.n	800350a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 020e 	bic.w	r2, r2, #14
 80034cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	f003 021c 	and.w	r2, r3, #28
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	2101      	movs	r1, #1
 80034dc:	fa01 f202 	lsl.w	r2, r1, r2
 80034e0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d004      	beq.n	800350a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003508:	bf00      	nop
 800350a:	bf00      	nop
}
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003512:	b480      	push	{r7}
 8003514:	b085      	sub	sp, #20
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	607a      	str	r2, [r7, #4]
 800351e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003524:	f003 021c 	and.w	r2, r3, #28
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	2101      	movs	r1, #1
 800352e:	fa01 f202 	lsl.w	r2, r1, r2
 8003532:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	2b10      	cmp	r3, #16
 8003542:	d108      	bne.n	8003556 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003554:	e007      	b.n	8003566 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	60da      	str	r2, [r3, #12]
}
 8003566:	bf00      	nop
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
	...

08003574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003582:	e17f      	b.n	8003884 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	2101      	movs	r1, #1
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	fa01 f303 	lsl.w	r3, r1, r3
 8003590:	4013      	ands	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 8171 	beq.w	800387e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 0303 	and.w	r3, r3, #3
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d005      	beq.n	80035b4 <HAL_GPIO_Init+0x40>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 0303 	and.w	r3, r3, #3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d130      	bne.n	8003616 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	2203      	movs	r2, #3
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	43db      	mvns	r3, r3
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4013      	ands	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	68da      	ldr	r2, [r3, #12]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035ea:	2201      	movs	r2, #1
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43db      	mvns	r3, r3
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4013      	ands	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	091b      	lsrs	r3, r3, #4
 8003600:	f003 0201 	and.w	r2, r3, #1
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	2b03      	cmp	r3, #3
 8003620:	d118      	bne.n	8003654 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003628:	2201      	movs	r2, #1
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4013      	ands	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	08db      	lsrs	r3, r3, #3
 800363e:	f003 0201 	and.w	r2, r3, #1
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 0303 	and.w	r3, r3, #3
 800365c:	2b03      	cmp	r3, #3
 800365e:	d017      	beq.n	8003690 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	2203      	movs	r2, #3
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4013      	ands	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d123      	bne.n	80036e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	08da      	lsrs	r2, r3, #3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3208      	adds	r2, #8
 80036a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	220f      	movs	r2, #15
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	43db      	mvns	r3, r3
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4013      	ands	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	08da      	lsrs	r2, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3208      	adds	r2, #8
 80036de:	6939      	ldr	r1, [r7, #16]
 80036e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	2203      	movs	r2, #3
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	43db      	mvns	r3, r3
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4013      	ands	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 0203 	and.w	r2, r3, #3
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4313      	orrs	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 80ac 	beq.w	800387e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003726:	4b5f      	ldr	r3, [pc, #380]	; (80038a4 <HAL_GPIO_Init+0x330>)
 8003728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800372a:	4a5e      	ldr	r2, [pc, #376]	; (80038a4 <HAL_GPIO_Init+0x330>)
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	6613      	str	r3, [r2, #96]	; 0x60
 8003732:	4b5c      	ldr	r3, [pc, #368]	; (80038a4 <HAL_GPIO_Init+0x330>)
 8003734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	60bb      	str	r3, [r7, #8]
 800373c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800373e:	4a5a      	ldr	r2, [pc, #360]	; (80038a8 <HAL_GPIO_Init+0x334>)
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	089b      	lsrs	r3, r3, #2
 8003744:	3302      	adds	r3, #2
 8003746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800374a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	220f      	movs	r2, #15
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43db      	mvns	r3, r3
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4013      	ands	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003768:	d025      	beq.n	80037b6 <HAL_GPIO_Init+0x242>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a4f      	ldr	r2, [pc, #316]	; (80038ac <HAL_GPIO_Init+0x338>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d01f      	beq.n	80037b2 <HAL_GPIO_Init+0x23e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a4e      	ldr	r2, [pc, #312]	; (80038b0 <HAL_GPIO_Init+0x33c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d019      	beq.n	80037ae <HAL_GPIO_Init+0x23a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a4d      	ldr	r2, [pc, #308]	; (80038b4 <HAL_GPIO_Init+0x340>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d013      	beq.n	80037aa <HAL_GPIO_Init+0x236>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a4c      	ldr	r2, [pc, #304]	; (80038b8 <HAL_GPIO_Init+0x344>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00d      	beq.n	80037a6 <HAL_GPIO_Init+0x232>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a4b      	ldr	r2, [pc, #300]	; (80038bc <HAL_GPIO_Init+0x348>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d007      	beq.n	80037a2 <HAL_GPIO_Init+0x22e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a4a      	ldr	r2, [pc, #296]	; (80038c0 <HAL_GPIO_Init+0x34c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d101      	bne.n	800379e <HAL_GPIO_Init+0x22a>
 800379a:	2306      	movs	r3, #6
 800379c:	e00c      	b.n	80037b8 <HAL_GPIO_Init+0x244>
 800379e:	2307      	movs	r3, #7
 80037a0:	e00a      	b.n	80037b8 <HAL_GPIO_Init+0x244>
 80037a2:	2305      	movs	r3, #5
 80037a4:	e008      	b.n	80037b8 <HAL_GPIO_Init+0x244>
 80037a6:	2304      	movs	r3, #4
 80037a8:	e006      	b.n	80037b8 <HAL_GPIO_Init+0x244>
 80037aa:	2303      	movs	r3, #3
 80037ac:	e004      	b.n	80037b8 <HAL_GPIO_Init+0x244>
 80037ae:	2302      	movs	r3, #2
 80037b0:	e002      	b.n	80037b8 <HAL_GPIO_Init+0x244>
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <HAL_GPIO_Init+0x244>
 80037b6:	2300      	movs	r3, #0
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	f002 0203 	and.w	r2, r2, #3
 80037be:	0092      	lsls	r2, r2, #2
 80037c0:	4093      	lsls	r3, r2
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037c8:	4937      	ldr	r1, [pc, #220]	; (80038a8 <HAL_GPIO_Init+0x334>)
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	089b      	lsrs	r3, r3, #2
 80037ce:	3302      	adds	r3, #2
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037d6:	4b3b      	ldr	r3, [pc, #236]	; (80038c4 <HAL_GPIO_Init+0x350>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	43db      	mvns	r3, r3
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4013      	ands	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037fa:	4a32      	ldr	r2, [pc, #200]	; (80038c4 <HAL_GPIO_Init+0x350>)
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003800:	4b30      	ldr	r3, [pc, #192]	; (80038c4 <HAL_GPIO_Init+0x350>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	43db      	mvns	r3, r3
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4013      	ands	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4313      	orrs	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003824:	4a27      	ldr	r2, [pc, #156]	; (80038c4 <HAL_GPIO_Init+0x350>)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800382a:	4b26      	ldr	r3, [pc, #152]	; (80038c4 <HAL_GPIO_Init+0x350>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	43db      	mvns	r3, r3
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4013      	ands	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4313      	orrs	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800384e:	4a1d      	ldr	r2, [pc, #116]	; (80038c4 <HAL_GPIO_Init+0x350>)
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003854:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <HAL_GPIO_Init+0x350>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	43db      	mvns	r3, r3
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4013      	ands	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003878:	4a12      	ldr	r2, [pc, #72]	; (80038c4 <HAL_GPIO_Init+0x350>)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	3301      	adds	r3, #1
 8003882:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	fa22 f303 	lsr.w	r3, r2, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	f47f ae78 	bne.w	8003584 <HAL_GPIO_Init+0x10>
  }
}
 8003894:	bf00      	nop
 8003896:	bf00      	nop
 8003898:	371c      	adds	r7, #28
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40021000 	.word	0x40021000
 80038a8:	40010000 	.word	0x40010000
 80038ac:	48000400 	.word	0x48000400
 80038b0:	48000800 	.word	0x48000800
 80038b4:	48000c00 	.word	0x48000c00
 80038b8:	48001000 	.word	0x48001000
 80038bc:	48001400 	.word	0x48001400
 80038c0:	48001800 	.word	0x48001800
 80038c4:	40010400 	.word	0x40010400

080038c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	807b      	strh	r3, [r7, #2]
 80038d4:	4613      	mov	r3, r2
 80038d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038d8:	787b      	ldrb	r3, [r7, #1]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038de:	887a      	ldrh	r2, [r7, #2]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038e4:	e002      	b.n	80038ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038e6:	887a      	ldrh	r2, [r7, #2]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038fc:	4b04      	ldr	r3, [pc, #16]	; (8003910 <HAL_PWREx_GetVoltageRange+0x18>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003904:	4618      	mov	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40007000 	.word	0x40007000

08003914 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003922:	d130      	bne.n	8003986 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003924:	4b23      	ldr	r3, [pc, #140]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800392c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003930:	d038      	beq.n	80039a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003932:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800393a:	4a1e      	ldr	r2, [pc, #120]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800393c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003940:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003942:	4b1d      	ldr	r3, [pc, #116]	; (80039b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2232      	movs	r2, #50	; 0x32
 8003948:	fb02 f303 	mul.w	r3, r2, r3
 800394c:	4a1b      	ldr	r2, [pc, #108]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800394e:	fba2 2303 	umull	r2, r3, r2, r3
 8003952:	0c9b      	lsrs	r3, r3, #18
 8003954:	3301      	adds	r3, #1
 8003956:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003958:	e002      	b.n	8003960 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3b01      	subs	r3, #1
 800395e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003960:	4b14      	ldr	r3, [pc, #80]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800396c:	d102      	bne.n	8003974 <HAL_PWREx_ControlVoltageScaling+0x60>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1f2      	bne.n	800395a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003974:	4b0f      	ldr	r3, [pc, #60]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003980:	d110      	bne.n	80039a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e00f      	b.n	80039a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003986:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800398e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003992:	d007      	beq.n	80039a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003994:	4b07      	ldr	r3, [pc, #28]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800399c:	4a05      	ldr	r2, [pc, #20]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800399e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40007000 	.word	0x40007000
 80039b8:	20000000 	.word	0x20000000
 80039bc:	431bde83 	.word	0x431bde83

080039c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e3ca      	b.n	8004168 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039d2:	4b97      	ldr	r3, [pc, #604]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 030c 	and.w	r3, r3, #12
 80039da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039dc:	4b94      	ldr	r3, [pc, #592]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0310 	and.w	r3, r3, #16
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 80e4 	beq.w	8003bbc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d007      	beq.n	8003a0a <HAL_RCC_OscConfig+0x4a>
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	2b0c      	cmp	r3, #12
 80039fe:	f040 808b 	bne.w	8003b18 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	f040 8087 	bne.w	8003b18 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a0a:	4b89      	ldr	r3, [pc, #548]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d005      	beq.n	8003a22 <HAL_RCC_OscConfig+0x62>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e3a2      	b.n	8004168 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1a      	ldr	r2, [r3, #32]
 8003a26:	4b82      	ldr	r3, [pc, #520]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d004      	beq.n	8003a3c <HAL_RCC_OscConfig+0x7c>
 8003a32:	4b7f      	ldr	r3, [pc, #508]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a3a:	e005      	b.n	8003a48 <HAL_RCC_OscConfig+0x88>
 8003a3c:	4b7c      	ldr	r3, [pc, #496]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d223      	bcs.n	8003a94 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 fd55 	bl	8004500 <RCC_SetFlashLatencyFromMSIRange>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e383      	b.n	8004168 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a60:	4b73      	ldr	r3, [pc, #460]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a72      	ldr	r2, [pc, #456]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003a66:	f043 0308 	orr.w	r3, r3, #8
 8003a6a:	6013      	str	r3, [r2, #0]
 8003a6c:	4b70      	ldr	r3, [pc, #448]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	496d      	ldr	r1, [pc, #436]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a7e:	4b6c      	ldr	r3, [pc, #432]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	4968      	ldr	r1, [pc, #416]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	604b      	str	r3, [r1, #4]
 8003a92:	e025      	b.n	8003ae0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a94:	4b66      	ldr	r3, [pc, #408]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a65      	ldr	r2, [pc, #404]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003a9a:	f043 0308 	orr.w	r3, r3, #8
 8003a9e:	6013      	str	r3, [r2, #0]
 8003aa0:	4b63      	ldr	r3, [pc, #396]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	4960      	ldr	r1, [pc, #384]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ab2:	4b5f      	ldr	r3, [pc, #380]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	021b      	lsls	r3, r3, #8
 8003ac0:	495b      	ldr	r1, [pc, #364]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d109      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 fd15 	bl	8004500 <RCC_SetFlashLatencyFromMSIRange>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e343      	b.n	8004168 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ae0:	f000 fc4a 	bl	8004378 <HAL_RCC_GetSysClockFreq>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	4b52      	ldr	r3, [pc, #328]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	091b      	lsrs	r3, r3, #4
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	4950      	ldr	r1, [pc, #320]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003af2:	5ccb      	ldrb	r3, [r1, r3]
 8003af4:	f003 031f 	and.w	r3, r3, #31
 8003af8:	fa22 f303 	lsr.w	r3, r2, r3
 8003afc:	4a4e      	ldr	r2, [pc, #312]	; (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003afe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b00:	4b4e      	ldr	r3, [pc, #312]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fd fb45 	bl	8001194 <HAL_InitTick>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d052      	beq.n	8003bba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	e327      	b.n	8004168 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d032      	beq.n	8003b86 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b20:	4b43      	ldr	r3, [pc, #268]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a42      	ldr	r2, [pc, #264]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b2c:	f7fd fb82 	bl	8001234 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b34:	f7fd fb7e 	bl	8001234 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e310      	b.n	8004168 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b46:	4b3a      	ldr	r3, [pc, #232]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b52:	4b37      	ldr	r3, [pc, #220]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a36      	ldr	r2, [pc, #216]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003b58:	f043 0308 	orr.w	r3, r3, #8
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	4b34      	ldr	r3, [pc, #208]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	4931      	ldr	r1, [pc, #196]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b70:	4b2f      	ldr	r3, [pc, #188]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	021b      	lsls	r3, r3, #8
 8003b7e:	492c      	ldr	r1, [pc, #176]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	604b      	str	r3, [r1, #4]
 8003b84:	e01a      	b.n	8003bbc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b86:	4b2a      	ldr	r3, [pc, #168]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a29      	ldr	r2, [pc, #164]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003b8c:	f023 0301 	bic.w	r3, r3, #1
 8003b90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b92:	f7fd fb4f 	bl	8001234 <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b98:	e008      	b.n	8003bac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b9a:	f7fd fb4b 	bl	8001234 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e2dd      	b.n	8004168 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bac:	4b20      	ldr	r3, [pc, #128]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1f0      	bne.n	8003b9a <HAL_RCC_OscConfig+0x1da>
 8003bb8:	e000      	b.n	8003bbc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d074      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d005      	beq.n	8003bda <HAL_RCC_OscConfig+0x21a>
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2b0c      	cmp	r3, #12
 8003bd2:	d10e      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	2b03      	cmp	r3, #3
 8003bd8:	d10b      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bda:	4b15      	ldr	r3, [pc, #84]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d064      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x2f0>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d160      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e2ba      	b.n	8004168 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bfa:	d106      	bne.n	8003c0a <HAL_RCC_OscConfig+0x24a>
 8003bfc:	4b0c      	ldr	r3, [pc, #48]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a0b      	ldr	r2, [pc, #44]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	e026      	b.n	8003c58 <HAL_RCC_OscConfig+0x298>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c12:	d115      	bne.n	8003c40 <HAL_RCC_OscConfig+0x280>
 8003c14:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a05      	ldr	r2, [pc, #20]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003c1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	4b03      	ldr	r3, [pc, #12]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a02      	ldr	r2, [pc, #8]	; (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	e014      	b.n	8003c58 <HAL_RCC_OscConfig+0x298>
 8003c2e:	bf00      	nop
 8003c30:	40021000 	.word	0x40021000
 8003c34:	08007b3c 	.word	0x08007b3c
 8003c38:	20000000 	.word	0x20000000
 8003c3c:	20000004 	.word	0x20000004
 8003c40:	4ba0      	ldr	r3, [pc, #640]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a9f      	ldr	r2, [pc, #636]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	4b9d      	ldr	r3, [pc, #628]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a9c      	ldr	r2, [pc, #624]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d013      	beq.n	8003c88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c60:	f7fd fae8 	bl	8001234 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c68:	f7fd fae4 	bl	8001234 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b64      	cmp	r3, #100	; 0x64
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e276      	b.n	8004168 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c7a:	4b92      	ldr	r3, [pc, #584]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f0      	beq.n	8003c68 <HAL_RCC_OscConfig+0x2a8>
 8003c86:	e014      	b.n	8003cb2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c88:	f7fd fad4 	bl	8001234 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c90:	f7fd fad0 	bl	8001234 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b64      	cmp	r3, #100	; 0x64
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e262      	b.n	8004168 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ca2:	4b88      	ldr	r3, [pc, #544]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f0      	bne.n	8003c90 <HAL_RCC_OscConfig+0x2d0>
 8003cae:	e000      	b.n	8003cb2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d060      	beq.n	8003d80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x310>
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	2b0c      	cmp	r3, #12
 8003cc8:	d119      	bne.n	8003cfe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d116      	bne.n	8003cfe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cd0:	4b7c      	ldr	r3, [pc, #496]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x328>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e23f      	b.n	8004168 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce8:	4b76      	ldr	r3, [pc, #472]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	061b      	lsls	r3, r3, #24
 8003cf6:	4973      	ldr	r1, [pc, #460]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cfc:	e040      	b.n	8003d80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d023      	beq.n	8003d4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d06:	4b6f      	ldr	r3, [pc, #444]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a6e      	ldr	r2, [pc, #440]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d12:	f7fd fa8f 	bl	8001234 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d1a:	f7fd fa8b 	bl	8001234 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e21d      	b.n	8004168 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d2c:	4b65      	ldr	r3, [pc, #404]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0f0      	beq.n	8003d1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d38:	4b62      	ldr	r3, [pc, #392]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	061b      	lsls	r3, r3, #24
 8003d46:	495f      	ldr	r1, [pc, #380]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	604b      	str	r3, [r1, #4]
 8003d4c:	e018      	b.n	8003d80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d4e:	4b5d      	ldr	r3, [pc, #372]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a5c      	ldr	r2, [pc, #368]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5a:	f7fd fa6b 	bl	8001234 <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d62:	f7fd fa67 	bl	8001234 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e1f9      	b.n	8004168 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d74:	4b53      	ldr	r3, [pc, #332]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f0      	bne.n	8003d62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d03c      	beq.n	8003e06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d01c      	beq.n	8003dce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d94:	4b4b      	ldr	r3, [pc, #300]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d9a:	4a4a      	ldr	r2, [pc, #296]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da4:	f7fd fa46 	bl	8001234 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dac:	f7fd fa42 	bl	8001234 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e1d4      	b.n	8004168 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dbe:	4b41      	ldr	r3, [pc, #260]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0ef      	beq.n	8003dac <HAL_RCC_OscConfig+0x3ec>
 8003dcc:	e01b      	b.n	8003e06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dce:	4b3d      	ldr	r3, [pc, #244]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd4:	4a3b      	ldr	r2, [pc, #236]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003dd6:	f023 0301 	bic.w	r3, r3, #1
 8003dda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dde:	f7fd fa29 	bl	8001234 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003de6:	f7fd fa25 	bl	8001234 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e1b7      	b.n	8004168 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003df8:	4b32      	ldr	r3, [pc, #200]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1ef      	bne.n	8003de6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 80a6 	beq.w	8003f60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e14:	2300      	movs	r3, #0
 8003e16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e18:	4b2a      	ldr	r3, [pc, #168]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10d      	bne.n	8003e40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e24:	4b27      	ldr	r3, [pc, #156]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e28:	4a26      	ldr	r2, [pc, #152]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e2e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e30:	4b24      	ldr	r3, [pc, #144]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e38:	60bb      	str	r3, [r7, #8]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e40:	4b21      	ldr	r3, [pc, #132]	; (8003ec8 <HAL_RCC_OscConfig+0x508>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d118      	bne.n	8003e7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e4c:	4b1e      	ldr	r3, [pc, #120]	; (8003ec8 <HAL_RCC_OscConfig+0x508>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a1d      	ldr	r2, [pc, #116]	; (8003ec8 <HAL_RCC_OscConfig+0x508>)
 8003e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e58:	f7fd f9ec 	bl	8001234 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e60:	f7fd f9e8 	bl	8001234 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e17a      	b.n	8004168 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e72:	4b15      	ldr	r3, [pc, #84]	; (8003ec8 <HAL_RCC_OscConfig+0x508>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d108      	bne.n	8003e98 <HAL_RCC_OscConfig+0x4d8>
 8003e86:	4b0f      	ldr	r3, [pc, #60]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8c:	4a0d      	ldr	r2, [pc, #52]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003e8e:	f043 0301 	orr.w	r3, r3, #1
 8003e92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e96:	e029      	b.n	8003eec <HAL_RCC_OscConfig+0x52c>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	2b05      	cmp	r3, #5
 8003e9e:	d115      	bne.n	8003ecc <HAL_RCC_OscConfig+0x50c>
 8003ea0:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea6:	4a07      	ldr	r2, [pc, #28]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003ea8:	f043 0304 	orr.w	r3, r3, #4
 8003eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003eb0:	4b04      	ldr	r3, [pc, #16]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb6:	4a03      	ldr	r2, [pc, #12]	; (8003ec4 <HAL_RCC_OscConfig+0x504>)
 8003eb8:	f043 0301 	orr.w	r3, r3, #1
 8003ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ec0:	e014      	b.n	8003eec <HAL_RCC_OscConfig+0x52c>
 8003ec2:	bf00      	nop
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	40007000 	.word	0x40007000
 8003ecc:	4b9c      	ldr	r3, [pc, #624]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 8003ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed2:	4a9b      	ldr	r2, [pc, #620]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 8003ed4:	f023 0301 	bic.w	r3, r3, #1
 8003ed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003edc:	4b98      	ldr	r3, [pc, #608]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 8003ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee2:	4a97      	ldr	r2, [pc, #604]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 8003ee4:	f023 0304 	bic.w	r3, r3, #4
 8003ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d016      	beq.n	8003f22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef4:	f7fd f99e 	bl	8001234 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003efa:	e00a      	b.n	8003f12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efc:	f7fd f99a 	bl	8001234 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e12a      	b.n	8004168 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f12:	4b8b      	ldr	r3, [pc, #556]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 8003f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0ed      	beq.n	8003efc <HAL_RCC_OscConfig+0x53c>
 8003f20:	e015      	b.n	8003f4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f22:	f7fd f987 	bl	8001234 <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f28:	e00a      	b.n	8003f40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f2a:	f7fd f983 	bl	8001234 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e113      	b.n	8004168 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f40:	4b7f      	ldr	r3, [pc, #508]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 8003f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1ed      	bne.n	8003f2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f4e:	7ffb      	ldrb	r3, [r7, #31]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d105      	bne.n	8003f60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f54:	4b7a      	ldr	r3, [pc, #488]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 8003f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f58:	4a79      	ldr	r2, [pc, #484]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 8003f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f5e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 80fe 	beq.w	8004166 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	f040 80d0 	bne.w	8004114 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f74:	4b72      	ldr	r3, [pc, #456]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f003 0203 	and.w	r2, r3, #3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d130      	bne.n	8003fea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	3b01      	subs	r3, #1
 8003f94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d127      	bne.n	8003fea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d11f      	bne.n	8003fea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fb4:	2a07      	cmp	r2, #7
 8003fb6:	bf14      	ite	ne
 8003fb8:	2201      	movne	r2, #1
 8003fba:	2200      	moveq	r2, #0
 8003fbc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d113      	bne.n	8003fea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fcc:	085b      	lsrs	r3, r3, #1
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d109      	bne.n	8003fea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	085b      	lsrs	r3, r3, #1
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d06e      	beq.n	80040c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	2b0c      	cmp	r3, #12
 8003fee:	d069      	beq.n	80040c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ff0:	4b53      	ldr	r3, [pc, #332]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d105      	bne.n	8004008 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ffc:	4b50      	ldr	r3, [pc, #320]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0ad      	b.n	8004168 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800400c:	4b4c      	ldr	r3, [pc, #304]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a4b      	ldr	r2, [pc, #300]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 8004012:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004016:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004018:	f7fd f90c 	bl	8001234 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004020:	f7fd f908 	bl	8001234 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e09a      	b.n	8004168 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004032:	4b43      	ldr	r3, [pc, #268]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800403e:	4b40      	ldr	r3, [pc, #256]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	4b40      	ldr	r3, [pc, #256]	; (8004144 <HAL_RCC_OscConfig+0x784>)
 8004044:	4013      	ands	r3, r2
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800404e:	3a01      	subs	r2, #1
 8004050:	0112      	lsls	r2, r2, #4
 8004052:	4311      	orrs	r1, r2
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004058:	0212      	lsls	r2, r2, #8
 800405a:	4311      	orrs	r1, r2
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004060:	0852      	lsrs	r2, r2, #1
 8004062:	3a01      	subs	r2, #1
 8004064:	0552      	lsls	r2, r2, #21
 8004066:	4311      	orrs	r1, r2
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800406c:	0852      	lsrs	r2, r2, #1
 800406e:	3a01      	subs	r2, #1
 8004070:	0652      	lsls	r2, r2, #25
 8004072:	4311      	orrs	r1, r2
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004078:	0912      	lsrs	r2, r2, #4
 800407a:	0452      	lsls	r2, r2, #17
 800407c:	430a      	orrs	r2, r1
 800407e:	4930      	ldr	r1, [pc, #192]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 8004080:	4313      	orrs	r3, r2
 8004082:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004084:	4b2e      	ldr	r3, [pc, #184]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a2d      	ldr	r2, [pc, #180]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 800408a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800408e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004090:	4b2b      	ldr	r3, [pc, #172]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	4a2a      	ldr	r2, [pc, #168]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 8004096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800409a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800409c:	f7fd f8ca 	bl	8001234 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a4:	f7fd f8c6 	bl	8001234 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e058      	b.n	8004168 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040b6:	4b22      	ldr	r3, [pc, #136]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040c2:	e050      	b.n	8004166 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e04f      	b.n	8004168 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040c8:	4b1d      	ldr	r3, [pc, #116]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d148      	bne.n	8004166 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040d4:	4b1a      	ldr	r3, [pc, #104]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a19      	ldr	r2, [pc, #100]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 80040da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040e0:	4b17      	ldr	r3, [pc, #92]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	4a16      	ldr	r2, [pc, #88]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 80040e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040ec:	f7fd f8a2 	bl	8001234 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f4:	f7fd f89e 	bl	8001234 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e030      	b.n	8004168 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004106:	4b0e      	ldr	r3, [pc, #56]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f0      	beq.n	80040f4 <HAL_RCC_OscConfig+0x734>
 8004112:	e028      	b.n	8004166 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	2b0c      	cmp	r3, #12
 8004118:	d023      	beq.n	8004162 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800411a:	4b09      	ldr	r3, [pc, #36]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a08      	ldr	r2, [pc, #32]	; (8004140 <HAL_RCC_OscConfig+0x780>)
 8004120:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004126:	f7fd f885 	bl	8001234 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800412c:	e00c      	b.n	8004148 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800412e:	f7fd f881 	bl	8001234 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d905      	bls.n	8004148 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e013      	b.n	8004168 <HAL_RCC_OscConfig+0x7a8>
 8004140:	40021000 	.word	0x40021000
 8004144:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004148:	4b09      	ldr	r3, [pc, #36]	; (8004170 <HAL_RCC_OscConfig+0x7b0>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1ec      	bne.n	800412e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <HAL_RCC_OscConfig+0x7b0>)
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	4905      	ldr	r1, [pc, #20]	; (8004170 <HAL_RCC_OscConfig+0x7b0>)
 800415a:	4b06      	ldr	r3, [pc, #24]	; (8004174 <HAL_RCC_OscConfig+0x7b4>)
 800415c:	4013      	ands	r3, r2
 800415e:	60cb      	str	r3, [r1, #12]
 8004160:	e001      	b.n	8004166 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e000      	b.n	8004168 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3720      	adds	r7, #32
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40021000 	.word	0x40021000
 8004174:	feeefffc 	.word	0xfeeefffc

08004178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e0e7      	b.n	800435c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800418c:	4b75      	ldr	r3, [pc, #468]	; (8004364 <HAL_RCC_ClockConfig+0x1ec>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d910      	bls.n	80041bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800419a:	4b72      	ldr	r3, [pc, #456]	; (8004364 <HAL_RCC_ClockConfig+0x1ec>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f023 0207 	bic.w	r2, r3, #7
 80041a2:	4970      	ldr	r1, [pc, #448]	; (8004364 <HAL_RCC_ClockConfig+0x1ec>)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041aa:	4b6e      	ldr	r3, [pc, #440]	; (8004364 <HAL_RCC_ClockConfig+0x1ec>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d001      	beq.n	80041bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0cf      	b.n	800435c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d010      	beq.n	80041ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	4b66      	ldr	r3, [pc, #408]	; (8004368 <HAL_RCC_ClockConfig+0x1f0>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d908      	bls.n	80041ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041d8:	4b63      	ldr	r3, [pc, #396]	; (8004368 <HAL_RCC_ClockConfig+0x1f0>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	4960      	ldr	r1, [pc, #384]	; (8004368 <HAL_RCC_ClockConfig+0x1f0>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d04c      	beq.n	8004290 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d107      	bne.n	800420e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041fe:	4b5a      	ldr	r3, [pc, #360]	; (8004368 <HAL_RCC_ClockConfig+0x1f0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d121      	bne.n	800424e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e0a6      	b.n	800435c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d107      	bne.n	8004226 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004216:	4b54      	ldr	r3, [pc, #336]	; (8004368 <HAL_RCC_ClockConfig+0x1f0>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d115      	bne.n	800424e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e09a      	b.n	800435c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d107      	bne.n	800423e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800422e:	4b4e      	ldr	r3, [pc, #312]	; (8004368 <HAL_RCC_ClockConfig+0x1f0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d109      	bne.n	800424e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e08e      	b.n	800435c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800423e:	4b4a      	ldr	r3, [pc, #296]	; (8004368 <HAL_RCC_ClockConfig+0x1f0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e086      	b.n	800435c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800424e:	4b46      	ldr	r3, [pc, #280]	; (8004368 <HAL_RCC_ClockConfig+0x1f0>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f023 0203 	bic.w	r2, r3, #3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	4943      	ldr	r1, [pc, #268]	; (8004368 <HAL_RCC_ClockConfig+0x1f0>)
 800425c:	4313      	orrs	r3, r2
 800425e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004260:	f7fc ffe8 	bl	8001234 <HAL_GetTick>
 8004264:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004266:	e00a      	b.n	800427e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004268:	f7fc ffe4 	bl	8001234 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	f241 3288 	movw	r2, #5000	; 0x1388
 8004276:	4293      	cmp	r3, r2
 8004278:	d901      	bls.n	800427e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e06e      	b.n	800435c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800427e:	4b3a      	ldr	r3, [pc, #232]	; (8004368 <HAL_RCC_ClockConfig+0x1f0>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 020c 	and.w	r2, r3, #12
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	429a      	cmp	r2, r3
 800428e:	d1eb      	bne.n	8004268 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d010      	beq.n	80042be <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	4b31      	ldr	r3, [pc, #196]	; (8004368 <HAL_RCC_ClockConfig+0x1f0>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d208      	bcs.n	80042be <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ac:	4b2e      	ldr	r3, [pc, #184]	; (8004368 <HAL_RCC_ClockConfig+0x1f0>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	492b      	ldr	r1, [pc, #172]	; (8004368 <HAL_RCC_ClockConfig+0x1f0>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042be:	4b29      	ldr	r3, [pc, #164]	; (8004364 <HAL_RCC_ClockConfig+0x1ec>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d210      	bcs.n	80042ee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042cc:	4b25      	ldr	r3, [pc, #148]	; (8004364 <HAL_RCC_ClockConfig+0x1ec>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f023 0207 	bic.w	r2, r3, #7
 80042d4:	4923      	ldr	r1, [pc, #140]	; (8004364 <HAL_RCC_ClockConfig+0x1ec>)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	4313      	orrs	r3, r2
 80042da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042dc:	4b21      	ldr	r3, [pc, #132]	; (8004364 <HAL_RCC_ClockConfig+0x1ec>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d001      	beq.n	80042ee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e036      	b.n	800435c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d008      	beq.n	800430c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042fa:	4b1b      	ldr	r3, [pc, #108]	; (8004368 <HAL_RCC_ClockConfig+0x1f0>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	4918      	ldr	r1, [pc, #96]	; (8004368 <HAL_RCC_ClockConfig+0x1f0>)
 8004308:	4313      	orrs	r3, r2
 800430a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b00      	cmp	r3, #0
 8004316:	d009      	beq.n	800432c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004318:	4b13      	ldr	r3, [pc, #76]	; (8004368 <HAL_RCC_ClockConfig+0x1f0>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	4910      	ldr	r1, [pc, #64]	; (8004368 <HAL_RCC_ClockConfig+0x1f0>)
 8004328:	4313      	orrs	r3, r2
 800432a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800432c:	f000 f824 	bl	8004378 <HAL_RCC_GetSysClockFreq>
 8004330:	4602      	mov	r2, r0
 8004332:	4b0d      	ldr	r3, [pc, #52]	; (8004368 <HAL_RCC_ClockConfig+0x1f0>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	091b      	lsrs	r3, r3, #4
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	490b      	ldr	r1, [pc, #44]	; (800436c <HAL_RCC_ClockConfig+0x1f4>)
 800433e:	5ccb      	ldrb	r3, [r1, r3]
 8004340:	f003 031f 	and.w	r3, r3, #31
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
 8004348:	4a09      	ldr	r2, [pc, #36]	; (8004370 <HAL_RCC_ClockConfig+0x1f8>)
 800434a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800434c:	4b09      	ldr	r3, [pc, #36]	; (8004374 <HAL_RCC_ClockConfig+0x1fc>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4618      	mov	r0, r3
 8004352:	f7fc ff1f 	bl	8001194 <HAL_InitTick>
 8004356:	4603      	mov	r3, r0
 8004358:	72fb      	strb	r3, [r7, #11]

  return status;
 800435a:	7afb      	ldrb	r3, [r7, #11]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40022000 	.word	0x40022000
 8004368:	40021000 	.word	0x40021000
 800436c:	08007b3c 	.word	0x08007b3c
 8004370:	20000000 	.word	0x20000000
 8004374:	20000004 	.word	0x20000004

08004378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004378:	b480      	push	{r7}
 800437a:	b089      	sub	sp, #36	; 0x24
 800437c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	61fb      	str	r3, [r7, #28]
 8004382:	2300      	movs	r3, #0
 8004384:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004386:	4b3e      	ldr	r3, [pc, #248]	; (8004480 <HAL_RCC_GetSysClockFreq+0x108>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 030c 	and.w	r3, r3, #12
 800438e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004390:	4b3b      	ldr	r3, [pc, #236]	; (8004480 <HAL_RCC_GetSysClockFreq+0x108>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f003 0303 	and.w	r3, r3, #3
 8004398:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d005      	beq.n	80043ac <HAL_RCC_GetSysClockFreq+0x34>
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	2b0c      	cmp	r3, #12
 80043a4:	d121      	bne.n	80043ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d11e      	bne.n	80043ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043ac:	4b34      	ldr	r3, [pc, #208]	; (8004480 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0308 	and.w	r3, r3, #8
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d107      	bne.n	80043c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043b8:	4b31      	ldr	r3, [pc, #196]	; (8004480 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	f003 030f 	and.w	r3, r3, #15
 80043c4:	61fb      	str	r3, [r7, #28]
 80043c6:	e005      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043c8:	4b2d      	ldr	r3, [pc, #180]	; (8004480 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	091b      	lsrs	r3, r3, #4
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043d4:	4a2b      	ldr	r2, [pc, #172]	; (8004484 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d10d      	bne.n	8004400 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043e8:	e00a      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d102      	bne.n	80043f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043f0:	4b25      	ldr	r3, [pc, #148]	; (8004488 <HAL_RCC_GetSysClockFreq+0x110>)
 80043f2:	61bb      	str	r3, [r7, #24]
 80043f4:	e004      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d101      	bne.n	8004400 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043fc:	4b23      	ldr	r3, [pc, #140]	; (800448c <HAL_RCC_GetSysClockFreq+0x114>)
 80043fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	2b0c      	cmp	r3, #12
 8004404:	d134      	bne.n	8004470 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004406:	4b1e      	ldr	r3, [pc, #120]	; (8004480 <HAL_RCC_GetSysClockFreq+0x108>)
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d003      	beq.n	800441e <HAL_RCC_GetSysClockFreq+0xa6>
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	2b03      	cmp	r3, #3
 800441a:	d003      	beq.n	8004424 <HAL_RCC_GetSysClockFreq+0xac>
 800441c:	e005      	b.n	800442a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800441e:	4b1a      	ldr	r3, [pc, #104]	; (8004488 <HAL_RCC_GetSysClockFreq+0x110>)
 8004420:	617b      	str	r3, [r7, #20]
      break;
 8004422:	e005      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004424:	4b19      	ldr	r3, [pc, #100]	; (800448c <HAL_RCC_GetSysClockFreq+0x114>)
 8004426:	617b      	str	r3, [r7, #20]
      break;
 8004428:	e002      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	617b      	str	r3, [r7, #20]
      break;
 800442e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004430:	4b13      	ldr	r3, [pc, #76]	; (8004480 <HAL_RCC_GetSysClockFreq+0x108>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	091b      	lsrs	r3, r3, #4
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	3301      	adds	r3, #1
 800443c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800443e:	4b10      	ldr	r3, [pc, #64]	; (8004480 <HAL_RCC_GetSysClockFreq+0x108>)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	0a1b      	lsrs	r3, r3, #8
 8004444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	fb03 f202 	mul.w	r2, r3, r2
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	fbb2 f3f3 	udiv	r3, r2, r3
 8004454:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004456:	4b0a      	ldr	r3, [pc, #40]	; (8004480 <HAL_RCC_GetSysClockFreq+0x108>)
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	0e5b      	lsrs	r3, r3, #25
 800445c:	f003 0303 	and.w	r3, r3, #3
 8004460:	3301      	adds	r3, #1
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	fbb2 f3f3 	udiv	r3, r2, r3
 800446e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004470:	69bb      	ldr	r3, [r7, #24]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3724      	adds	r7, #36	; 0x24
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	40021000 	.word	0x40021000
 8004484:	08007b54 	.word	0x08007b54
 8004488:	00f42400 	.word	0x00f42400
 800448c:	007a1200 	.word	0x007a1200

08004490 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004494:	4b03      	ldr	r3, [pc, #12]	; (80044a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004496:	681b      	ldr	r3, [r3, #0]
}
 8004498:	4618      	mov	r0, r3
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	20000000 	.word	0x20000000

080044a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044ac:	f7ff fff0 	bl	8004490 <HAL_RCC_GetHCLKFreq>
 80044b0:	4602      	mov	r2, r0
 80044b2:	4b06      	ldr	r3, [pc, #24]	; (80044cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	0a1b      	lsrs	r3, r3, #8
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	4904      	ldr	r1, [pc, #16]	; (80044d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044be:	5ccb      	ldrb	r3, [r1, r3]
 80044c0:	f003 031f 	and.w	r3, r3, #31
 80044c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40021000 	.word	0x40021000
 80044d0:	08007b4c 	.word	0x08007b4c

080044d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044d8:	f7ff ffda 	bl	8004490 <HAL_RCC_GetHCLKFreq>
 80044dc:	4602      	mov	r2, r0
 80044de:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	0adb      	lsrs	r3, r3, #11
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	4904      	ldr	r1, [pc, #16]	; (80044fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80044ea:	5ccb      	ldrb	r3, [r1, r3]
 80044ec:	f003 031f 	and.w	r3, r3, #31
 80044f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40021000 	.word	0x40021000
 80044fc:	08007b4c 	.word	0x08007b4c

08004500 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004508:	2300      	movs	r3, #0
 800450a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800450c:	4b2a      	ldr	r3, [pc, #168]	; (80045b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800450e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004518:	f7ff f9ee 	bl	80038f8 <HAL_PWREx_GetVoltageRange>
 800451c:	6178      	str	r0, [r7, #20]
 800451e:	e014      	b.n	800454a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004520:	4b25      	ldr	r3, [pc, #148]	; (80045b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004524:	4a24      	ldr	r2, [pc, #144]	; (80045b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800452a:	6593      	str	r3, [r2, #88]	; 0x58
 800452c:	4b22      	ldr	r3, [pc, #136]	; (80045b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800452e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004538:	f7ff f9de 	bl	80038f8 <HAL_PWREx_GetVoltageRange>
 800453c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800453e:	4b1e      	ldr	r3, [pc, #120]	; (80045b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004542:	4a1d      	ldr	r2, [pc, #116]	; (80045b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004548:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004550:	d10b      	bne.n	800456a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b80      	cmp	r3, #128	; 0x80
 8004556:	d919      	bls.n	800458c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2ba0      	cmp	r3, #160	; 0xa0
 800455c:	d902      	bls.n	8004564 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800455e:	2302      	movs	r3, #2
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	e013      	b.n	800458c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004564:	2301      	movs	r3, #1
 8004566:	613b      	str	r3, [r7, #16]
 8004568:	e010      	b.n	800458c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b80      	cmp	r3, #128	; 0x80
 800456e:	d902      	bls.n	8004576 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004570:	2303      	movs	r3, #3
 8004572:	613b      	str	r3, [r7, #16]
 8004574:	e00a      	b.n	800458c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b80      	cmp	r3, #128	; 0x80
 800457a:	d102      	bne.n	8004582 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800457c:	2302      	movs	r3, #2
 800457e:	613b      	str	r3, [r7, #16]
 8004580:	e004      	b.n	800458c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b70      	cmp	r3, #112	; 0x70
 8004586:	d101      	bne.n	800458c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004588:	2301      	movs	r3, #1
 800458a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800458c:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f023 0207 	bic.w	r2, r3, #7
 8004594:	4909      	ldr	r1, [pc, #36]	; (80045bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800459c:	4b07      	ldr	r3, [pc, #28]	; (80045bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d001      	beq.n	80045ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e000      	b.n	80045b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40021000 	.word	0x40021000
 80045bc:	40022000 	.word	0x40022000

080045c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045c8:	2300      	movs	r3, #0
 80045ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045cc:	2300      	movs	r3, #0
 80045ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d041      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045e4:	d02a      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80045e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045ea:	d824      	bhi.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045f0:	d008      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045f6:	d81e      	bhi.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80045fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004600:	d010      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004602:	e018      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004604:	4b86      	ldr	r3, [pc, #536]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	4a85      	ldr	r2, [pc, #532]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800460a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800460e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004610:	e015      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3304      	adds	r3, #4
 8004616:	2100      	movs	r1, #0
 8004618:	4618      	mov	r0, r3
 800461a:	f000 fabb 	bl	8004b94 <RCCEx_PLLSAI1_Config>
 800461e:	4603      	mov	r3, r0
 8004620:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004622:	e00c      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3320      	adds	r3, #32
 8004628:	2100      	movs	r1, #0
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fba6 	bl	8004d7c <RCCEx_PLLSAI2_Config>
 8004630:	4603      	mov	r3, r0
 8004632:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004634:	e003      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	74fb      	strb	r3, [r7, #19]
      break;
 800463a:	e000      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800463c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800463e:	7cfb      	ldrb	r3, [r7, #19]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10b      	bne.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004644:	4b76      	ldr	r3, [pc, #472]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004652:	4973      	ldr	r1, [pc, #460]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004654:	4313      	orrs	r3, r2
 8004656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800465a:	e001      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800465c:	7cfb      	ldrb	r3, [r7, #19]
 800465e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d041      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004670:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004674:	d02a      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004676:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800467a:	d824      	bhi.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800467c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004680:	d008      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004682:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004686:	d81e      	bhi.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800468c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004690:	d010      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004692:	e018      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004694:	4b62      	ldr	r3, [pc, #392]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	4a61      	ldr	r2, [pc, #388]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800469a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800469e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046a0:	e015      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	3304      	adds	r3, #4
 80046a6:	2100      	movs	r1, #0
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 fa73 	bl	8004b94 <RCCEx_PLLSAI1_Config>
 80046ae:	4603      	mov	r3, r0
 80046b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046b2:	e00c      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3320      	adds	r3, #32
 80046b8:	2100      	movs	r1, #0
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 fb5e 	bl	8004d7c <RCCEx_PLLSAI2_Config>
 80046c0:	4603      	mov	r3, r0
 80046c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046c4:	e003      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	74fb      	strb	r3, [r7, #19]
      break;
 80046ca:	e000      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80046cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046ce:	7cfb      	ldrb	r3, [r7, #19]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10b      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046d4:	4b52      	ldr	r3, [pc, #328]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046e2:	494f      	ldr	r1, [pc, #316]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80046ea:	e001      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ec:	7cfb      	ldrb	r3, [r7, #19]
 80046ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80a0 	beq.w	800483e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046fe:	2300      	movs	r3, #0
 8004700:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004702:	4b47      	ldr	r3, [pc, #284]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800470e:	2301      	movs	r3, #1
 8004710:	e000      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004712:	2300      	movs	r3, #0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00d      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004718:	4b41      	ldr	r3, [pc, #260]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471c:	4a40      	ldr	r2, [pc, #256]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004722:	6593      	str	r3, [r2, #88]	; 0x58
 8004724:	4b3e      	ldr	r3, [pc, #248]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472c:	60bb      	str	r3, [r7, #8]
 800472e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004730:	2301      	movs	r3, #1
 8004732:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004734:	4b3b      	ldr	r3, [pc, #236]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a3a      	ldr	r2, [pc, #232]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800473a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800473e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004740:	f7fc fd78 	bl	8001234 <HAL_GetTick>
 8004744:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004746:	e009      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004748:	f7fc fd74 	bl	8001234 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d902      	bls.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	74fb      	strb	r3, [r7, #19]
        break;
 800475a:	e005      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800475c:	4b31      	ldr	r3, [pc, #196]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0ef      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004768:	7cfb      	ldrb	r3, [r7, #19]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d15c      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800476e:	4b2c      	ldr	r3, [pc, #176]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004774:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004778:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d01f      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	429a      	cmp	r2, r3
 800478a:	d019      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800478c:	4b24      	ldr	r3, [pc, #144]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004796:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004798:	4b21      	ldr	r3, [pc, #132]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800479a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479e:	4a20      	ldr	r2, [pc, #128]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047a8:	4b1d      	ldr	r3, [pc, #116]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ae:	4a1c      	ldr	r2, [pc, #112]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047b8:	4a19      	ldr	r2, [pc, #100]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d016      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ca:	f7fc fd33 	bl	8001234 <HAL_GetTick>
 80047ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047d0:	e00b      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d2:	f7fc fd2f 	bl	8001234 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d902      	bls.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	74fb      	strb	r3, [r7, #19]
            break;
 80047e8:	e006      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ea:	4b0d      	ldr	r3, [pc, #52]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0ec      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80047f8:	7cfb      	ldrb	r3, [r7, #19]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10c      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047fe:	4b08      	ldr	r3, [pc, #32]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004804:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800480e:	4904      	ldr	r1, [pc, #16]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004816:	e009      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004818:	7cfb      	ldrb	r3, [r7, #19]
 800481a:	74bb      	strb	r3, [r7, #18]
 800481c:	e006      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800481e:	bf00      	nop
 8004820:	40021000 	.word	0x40021000
 8004824:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004828:	7cfb      	ldrb	r3, [r7, #19]
 800482a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800482c:	7c7b      	ldrb	r3, [r7, #17]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d105      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004832:	4b9e      	ldr	r3, [pc, #632]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004836:	4a9d      	ldr	r2, [pc, #628]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800483c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800484a:	4b98      	ldr	r3, [pc, #608]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800484c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004850:	f023 0203 	bic.w	r2, r3, #3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004858:	4994      	ldr	r1, [pc, #592]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00a      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800486c:	4b8f      	ldr	r3, [pc, #572]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004872:	f023 020c 	bic.w	r2, r3, #12
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487a:	498c      	ldr	r1, [pc, #560]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800488e:	4b87      	ldr	r3, [pc, #540]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004894:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	4983      	ldr	r1, [pc, #524]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0308 	and.w	r3, r3, #8
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048b0:	4b7e      	ldr	r3, [pc, #504]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048be:	497b      	ldr	r1, [pc, #492]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0310 	and.w	r3, r3, #16
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048d2:	4b76      	ldr	r3, [pc, #472]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e0:	4972      	ldr	r1, [pc, #456]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0320 	and.w	r3, r3, #32
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048f4:	4b6d      	ldr	r3, [pc, #436]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004902:	496a      	ldr	r1, [pc, #424]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004904:	4313      	orrs	r3, r2
 8004906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004916:	4b65      	ldr	r3, [pc, #404]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004924:	4961      	ldr	r1, [pc, #388]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00a      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004938:	4b5c      	ldr	r3, [pc, #368]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800493a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004946:	4959      	ldr	r1, [pc, #356]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800495a:	4b54      	ldr	r3, [pc, #336]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004960:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004968:	4950      	ldr	r1, [pc, #320]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800496a:	4313      	orrs	r3, r2
 800496c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00a      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800497c:	4b4b      	ldr	r3, [pc, #300]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004982:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498a:	4948      	ldr	r1, [pc, #288]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00a      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800499e:	4b43      	ldr	r3, [pc, #268]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ac:	493f      	ldr	r1, [pc, #252]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d028      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049c0:	4b3a      	ldr	r3, [pc, #232]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ce:	4937      	ldr	r1, [pc, #220]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049de:	d106      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049e0:	4b32      	ldr	r3, [pc, #200]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	4a31      	ldr	r2, [pc, #196]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049ea:	60d3      	str	r3, [r2, #12]
 80049ec:	e011      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049f6:	d10c      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3304      	adds	r3, #4
 80049fc:	2101      	movs	r1, #1
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 f8c8 	bl	8004b94 <RCCEx_PLLSAI1_Config>
 8004a04:	4603      	mov	r3, r0
 8004a06:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a08:	7cfb      	ldrb	r3, [r7, #19]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004a0e:	7cfb      	ldrb	r3, [r7, #19]
 8004a10:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d028      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a1e:	4b23      	ldr	r3, [pc, #140]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2c:	491f      	ldr	r1, [pc, #124]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a3c:	d106      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a3e:	4b1b      	ldr	r3, [pc, #108]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	4a1a      	ldr	r2, [pc, #104]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a48:	60d3      	str	r3, [r2, #12]
 8004a4a:	e011      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a54:	d10c      	bne.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 f899 	bl	8004b94 <RCCEx_PLLSAI1_Config>
 8004a62:	4603      	mov	r3, r0
 8004a64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a66:	7cfb      	ldrb	r3, [r7, #19]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004a6c:	7cfb      	ldrb	r3, [r7, #19]
 8004a6e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d02b      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a7c:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a8a:	4908      	ldr	r1, [pc, #32]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a9a:	d109      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a9c:	4b03      	ldr	r3, [pc, #12]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	4a02      	ldr	r2, [pc, #8]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aa6:	60d3      	str	r3, [r2, #12]
 8004aa8:	e014      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004aaa:	bf00      	nop
 8004aac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ab8:	d10c      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	3304      	adds	r3, #4
 8004abe:	2101      	movs	r1, #1
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 f867 	bl	8004b94 <RCCEx_PLLSAI1_Config>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aca:	7cfb      	ldrb	r3, [r7, #19]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004ad0:	7cfb      	ldrb	r3, [r7, #19]
 8004ad2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d02f      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ae0:	4b2b      	ldr	r3, [pc, #172]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aee:	4928      	ldr	r1, [pc, #160]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004afa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004afe:	d10d      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3304      	adds	r3, #4
 8004b04:	2102      	movs	r1, #2
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 f844 	bl	8004b94 <RCCEx_PLLSAI1_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b10:	7cfb      	ldrb	r3, [r7, #19]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d014      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b16:	7cfb      	ldrb	r3, [r7, #19]
 8004b18:	74bb      	strb	r3, [r7, #18]
 8004b1a:	e011      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b24:	d10c      	bne.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	3320      	adds	r3, #32
 8004b2a:	2102      	movs	r1, #2
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f000 f925 	bl	8004d7c <RCCEx_PLLSAI2_Config>
 8004b32:	4603      	mov	r3, r0
 8004b34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b36:	7cfb      	ldrb	r3, [r7, #19]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b3c:	7cfb      	ldrb	r3, [r7, #19]
 8004b3e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00a      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b4c:	4b10      	ldr	r3, [pc, #64]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b52:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b5a:	490d      	ldr	r1, [pc, #52]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00b      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b6e:	4b08      	ldr	r3, [pc, #32]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b7e:	4904      	ldr	r1, [pc, #16]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b86:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40021000 	.word	0x40021000

08004b94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ba2:	4b75      	ldr	r3, [pc, #468]	; (8004d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d018      	beq.n	8004be0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004bae:	4b72      	ldr	r3, [pc, #456]	; (8004d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f003 0203 	and.w	r2, r3, #3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d10d      	bne.n	8004bda <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
       ||
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d009      	beq.n	8004bda <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004bc6:	4b6c      	ldr	r3, [pc, #432]	; (8004d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	091b      	lsrs	r3, r3, #4
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
       ||
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d047      	beq.n	8004c6a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	73fb      	strb	r3, [r7, #15]
 8004bde:	e044      	b.n	8004c6a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b03      	cmp	r3, #3
 8004be6:	d018      	beq.n	8004c1a <RCCEx_PLLSAI1_Config+0x86>
 8004be8:	2b03      	cmp	r3, #3
 8004bea:	d825      	bhi.n	8004c38 <RCCEx_PLLSAI1_Config+0xa4>
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d002      	beq.n	8004bf6 <RCCEx_PLLSAI1_Config+0x62>
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d009      	beq.n	8004c08 <RCCEx_PLLSAI1_Config+0x74>
 8004bf4:	e020      	b.n	8004c38 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bf6:	4b60      	ldr	r3, [pc, #384]	; (8004d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d11d      	bne.n	8004c3e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c06:	e01a      	b.n	8004c3e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c08:	4b5b      	ldr	r3, [pc, #364]	; (8004d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d116      	bne.n	8004c42 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c18:	e013      	b.n	8004c42 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c1a:	4b57      	ldr	r3, [pc, #348]	; (8004d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10f      	bne.n	8004c46 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c26:	4b54      	ldr	r3, [pc, #336]	; (8004d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d109      	bne.n	8004c46 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c36:	e006      	b.n	8004c46 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c3c:	e004      	b.n	8004c48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c3e:	bf00      	nop
 8004c40:	e002      	b.n	8004c48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c42:	bf00      	nop
 8004c44:	e000      	b.n	8004c48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c46:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10d      	bne.n	8004c6a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c4e:	4b4a      	ldr	r3, [pc, #296]	; (8004d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6819      	ldr	r1, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	430b      	orrs	r3, r1
 8004c64:	4944      	ldr	r1, [pc, #272]	; (8004d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d17d      	bne.n	8004d6c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c70:	4b41      	ldr	r3, [pc, #260]	; (8004d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a40      	ldr	r2, [pc, #256]	; (8004d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c7c:	f7fc fada 	bl	8001234 <HAL_GetTick>
 8004c80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c82:	e009      	b.n	8004c98 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c84:	f7fc fad6 	bl	8001234 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d902      	bls.n	8004c98 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	73fb      	strb	r3, [r7, #15]
        break;
 8004c96:	e005      	b.n	8004ca4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c98:	4b37      	ldr	r3, [pc, #220]	; (8004d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1ef      	bne.n	8004c84 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d160      	bne.n	8004d6c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d111      	bne.n	8004cd4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cb0:	4b31      	ldr	r3, [pc, #196]	; (8004d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6892      	ldr	r2, [r2, #8]
 8004cc0:	0211      	lsls	r1, r2, #8
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	68d2      	ldr	r2, [r2, #12]
 8004cc6:	0912      	lsrs	r2, r2, #4
 8004cc8:	0452      	lsls	r2, r2, #17
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	492a      	ldr	r1, [pc, #168]	; (8004d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	610b      	str	r3, [r1, #16]
 8004cd2:	e027      	b.n	8004d24 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d112      	bne.n	8004d00 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cda:	4b27      	ldr	r3, [pc, #156]	; (8004d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004ce2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6892      	ldr	r2, [r2, #8]
 8004cea:	0211      	lsls	r1, r2, #8
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6912      	ldr	r2, [r2, #16]
 8004cf0:	0852      	lsrs	r2, r2, #1
 8004cf2:	3a01      	subs	r2, #1
 8004cf4:	0552      	lsls	r2, r2, #21
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	491f      	ldr	r1, [pc, #124]	; (8004d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	610b      	str	r3, [r1, #16]
 8004cfe:	e011      	b.n	8004d24 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d00:	4b1d      	ldr	r3, [pc, #116]	; (8004d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6892      	ldr	r2, [r2, #8]
 8004d10:	0211      	lsls	r1, r2, #8
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6952      	ldr	r2, [r2, #20]
 8004d16:	0852      	lsrs	r2, r2, #1
 8004d18:	3a01      	subs	r2, #1
 8004d1a:	0652      	lsls	r2, r2, #25
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	4916      	ldr	r1, [pc, #88]	; (8004d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d24:	4b14      	ldr	r3, [pc, #80]	; (8004d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a13      	ldr	r2, [pc, #76]	; (8004d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d30:	f7fc fa80 	bl	8001234 <HAL_GetTick>
 8004d34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d36:	e009      	b.n	8004d4c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d38:	f7fc fa7c 	bl	8001234 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d902      	bls.n	8004d4c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	73fb      	strb	r3, [r7, #15]
          break;
 8004d4a:	e005      	b.n	8004d58 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d4c:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0ef      	beq.n	8004d38 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d106      	bne.n	8004d6c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d5e:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d60:	691a      	ldr	r2, [r3, #16]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	4904      	ldr	r1, [pc, #16]	; (8004d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	40021000 	.word	0x40021000

08004d7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d8a:	4b6a      	ldr	r3, [pc, #424]	; (8004f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d018      	beq.n	8004dc8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d96:	4b67      	ldr	r3, [pc, #412]	; (8004f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f003 0203 	and.w	r2, r3, #3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d10d      	bne.n	8004dc2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
       ||
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d009      	beq.n	8004dc2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004dae:	4b61      	ldr	r3, [pc, #388]	; (8004f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	091b      	lsrs	r3, r3, #4
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
       ||
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d047      	beq.n	8004e52 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	73fb      	strb	r3, [r7, #15]
 8004dc6:	e044      	b.n	8004e52 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b03      	cmp	r3, #3
 8004dce:	d018      	beq.n	8004e02 <RCCEx_PLLSAI2_Config+0x86>
 8004dd0:	2b03      	cmp	r3, #3
 8004dd2:	d825      	bhi.n	8004e20 <RCCEx_PLLSAI2_Config+0xa4>
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d002      	beq.n	8004dde <RCCEx_PLLSAI2_Config+0x62>
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d009      	beq.n	8004df0 <RCCEx_PLLSAI2_Config+0x74>
 8004ddc:	e020      	b.n	8004e20 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dde:	4b55      	ldr	r3, [pc, #340]	; (8004f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d11d      	bne.n	8004e26 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dee:	e01a      	b.n	8004e26 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004df0:	4b50      	ldr	r3, [pc, #320]	; (8004f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d116      	bne.n	8004e2a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e00:	e013      	b.n	8004e2a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e02:	4b4c      	ldr	r3, [pc, #304]	; (8004f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10f      	bne.n	8004e2e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e0e:	4b49      	ldr	r3, [pc, #292]	; (8004f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d109      	bne.n	8004e2e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e1e:	e006      	b.n	8004e2e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	73fb      	strb	r3, [r7, #15]
      break;
 8004e24:	e004      	b.n	8004e30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e26:	bf00      	nop
 8004e28:	e002      	b.n	8004e30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e2a:	bf00      	nop
 8004e2c:	e000      	b.n	8004e30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10d      	bne.n	8004e52 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e36:	4b3f      	ldr	r3, [pc, #252]	; (8004f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6819      	ldr	r1, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	430b      	orrs	r3, r1
 8004e4c:	4939      	ldr	r1, [pc, #228]	; (8004f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e52:	7bfb      	ldrb	r3, [r7, #15]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d167      	bne.n	8004f28 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e58:	4b36      	ldr	r3, [pc, #216]	; (8004f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a35      	ldr	r2, [pc, #212]	; (8004f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e64:	f7fc f9e6 	bl	8001234 <HAL_GetTick>
 8004e68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e6a:	e009      	b.n	8004e80 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e6c:	f7fc f9e2 	bl	8001234 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d902      	bls.n	8004e80 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	73fb      	strb	r3, [r7, #15]
        break;
 8004e7e:	e005      	b.n	8004e8c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e80:	4b2c      	ldr	r3, [pc, #176]	; (8004f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1ef      	bne.n	8004e6c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d14a      	bne.n	8004f28 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d111      	bne.n	8004ebc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e98:	4b26      	ldr	r3, [pc, #152]	; (8004f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6892      	ldr	r2, [r2, #8]
 8004ea8:	0211      	lsls	r1, r2, #8
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	68d2      	ldr	r2, [r2, #12]
 8004eae:	0912      	lsrs	r2, r2, #4
 8004eb0:	0452      	lsls	r2, r2, #17
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	491f      	ldr	r1, [pc, #124]	; (8004f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	614b      	str	r3, [r1, #20]
 8004eba:	e011      	b.n	8004ee0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ebc:	4b1d      	ldr	r3, [pc, #116]	; (8004f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ec4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6892      	ldr	r2, [r2, #8]
 8004ecc:	0211      	lsls	r1, r2, #8
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6912      	ldr	r2, [r2, #16]
 8004ed2:	0852      	lsrs	r2, r2, #1
 8004ed4:	3a01      	subs	r2, #1
 8004ed6:	0652      	lsls	r2, r2, #25
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	4916      	ldr	r1, [pc, #88]	; (8004f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ee0:	4b14      	ldr	r3, [pc, #80]	; (8004f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a13      	ldr	r2, [pc, #76]	; (8004f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eec:	f7fc f9a2 	bl	8001234 <HAL_GetTick>
 8004ef0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ef2:	e009      	b.n	8004f08 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ef4:	f7fc f99e 	bl	8001234 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d902      	bls.n	8004f08 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	73fb      	strb	r3, [r7, #15]
          break;
 8004f06:	e005      	b.n	8004f14 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f08:	4b0a      	ldr	r3, [pc, #40]	; (8004f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0ef      	beq.n	8004ef4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d106      	bne.n	8004f28 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f1a:	4b06      	ldr	r3, [pc, #24]	; (8004f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f1c:	695a      	ldr	r2, [r3, #20]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	4904      	ldr	r1, [pc, #16]	; (8004f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40021000 	.word	0x40021000

08004f38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d001      	beq.n	8004f50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e04f      	b.n	8004ff0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f042 0201 	orr.w	r2, r2, #1
 8004f66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a23      	ldr	r2, [pc, #140]	; (8004ffc <HAL_TIM_Base_Start_IT+0xc4>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d01d      	beq.n	8004fae <HAL_TIM_Base_Start_IT+0x76>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f7a:	d018      	beq.n	8004fae <HAL_TIM_Base_Start_IT+0x76>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a1f      	ldr	r2, [pc, #124]	; (8005000 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d013      	beq.n	8004fae <HAL_TIM_Base_Start_IT+0x76>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a1e      	ldr	r2, [pc, #120]	; (8005004 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00e      	beq.n	8004fae <HAL_TIM_Base_Start_IT+0x76>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a1c      	ldr	r2, [pc, #112]	; (8005008 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d009      	beq.n	8004fae <HAL_TIM_Base_Start_IT+0x76>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a1b      	ldr	r2, [pc, #108]	; (800500c <HAL_TIM_Base_Start_IT+0xd4>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d004      	beq.n	8004fae <HAL_TIM_Base_Start_IT+0x76>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a19      	ldr	r2, [pc, #100]	; (8005010 <HAL_TIM_Base_Start_IT+0xd8>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d115      	bne.n	8004fda <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	4b17      	ldr	r3, [pc, #92]	; (8005014 <HAL_TIM_Base_Start_IT+0xdc>)
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2b06      	cmp	r3, #6
 8004fbe:	d015      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0xb4>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc6:	d011      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0201 	orr.w	r2, r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd8:	e008      	b.n	8004fec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f042 0201 	orr.w	r2, r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	e000      	b.n	8004fee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	40012c00 	.word	0x40012c00
 8005000:	40000400 	.word	0x40000400
 8005004:	40000800 	.word	0x40000800
 8005008:	40000c00 	.word	0x40000c00
 800500c:	40013400 	.word	0x40013400
 8005010:	40014000 	.word	0x40014000
 8005014:	00010007 	.word	0x00010007

08005018 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e049      	b.n	80050be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d106      	bne.n	8005044 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7fb fda2 	bl	8000b88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3304      	adds	r3, #4
 8005054:	4619      	mov	r1, r3
 8005056:	4610      	mov	r0, r2
 8005058:	f000 fa50 	bl	80054fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
	...

080050c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d109      	bne.n	80050ec <HAL_TIM_PWM_Start+0x24>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	bf14      	ite	ne
 80050e4:	2301      	movne	r3, #1
 80050e6:	2300      	moveq	r3, #0
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	e03c      	b.n	8005166 <HAL_TIM_PWM_Start+0x9e>
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d109      	bne.n	8005106 <HAL_TIM_PWM_Start+0x3e>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	bf14      	ite	ne
 80050fe:	2301      	movne	r3, #1
 8005100:	2300      	moveq	r3, #0
 8005102:	b2db      	uxtb	r3, r3
 8005104:	e02f      	b.n	8005166 <HAL_TIM_PWM_Start+0x9e>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b08      	cmp	r3, #8
 800510a:	d109      	bne.n	8005120 <HAL_TIM_PWM_Start+0x58>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b01      	cmp	r3, #1
 8005116:	bf14      	ite	ne
 8005118:	2301      	movne	r3, #1
 800511a:	2300      	moveq	r3, #0
 800511c:	b2db      	uxtb	r3, r3
 800511e:	e022      	b.n	8005166 <HAL_TIM_PWM_Start+0x9e>
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b0c      	cmp	r3, #12
 8005124:	d109      	bne.n	800513a <HAL_TIM_PWM_Start+0x72>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b01      	cmp	r3, #1
 8005130:	bf14      	ite	ne
 8005132:	2301      	movne	r3, #1
 8005134:	2300      	moveq	r3, #0
 8005136:	b2db      	uxtb	r3, r3
 8005138:	e015      	b.n	8005166 <HAL_TIM_PWM_Start+0x9e>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b10      	cmp	r3, #16
 800513e:	d109      	bne.n	8005154 <HAL_TIM_PWM_Start+0x8c>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b01      	cmp	r3, #1
 800514a:	bf14      	ite	ne
 800514c:	2301      	movne	r3, #1
 800514e:	2300      	moveq	r3, #0
 8005150:	b2db      	uxtb	r3, r3
 8005152:	e008      	b.n	8005166 <HAL_TIM_PWM_Start+0x9e>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b01      	cmp	r3, #1
 800515e:	bf14      	ite	ne
 8005160:	2301      	movne	r3, #1
 8005162:	2300      	moveq	r3, #0
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e09c      	b.n	80052a8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d104      	bne.n	800517e <HAL_TIM_PWM_Start+0xb6>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800517c:	e023      	b.n	80051c6 <HAL_TIM_PWM_Start+0xfe>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b04      	cmp	r3, #4
 8005182:	d104      	bne.n	800518e <HAL_TIM_PWM_Start+0xc6>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800518c:	e01b      	b.n	80051c6 <HAL_TIM_PWM_Start+0xfe>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b08      	cmp	r3, #8
 8005192:	d104      	bne.n	800519e <HAL_TIM_PWM_Start+0xd6>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800519c:	e013      	b.n	80051c6 <HAL_TIM_PWM_Start+0xfe>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b0c      	cmp	r3, #12
 80051a2:	d104      	bne.n	80051ae <HAL_TIM_PWM_Start+0xe6>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051ac:	e00b      	b.n	80051c6 <HAL_TIM_PWM_Start+0xfe>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b10      	cmp	r3, #16
 80051b2:	d104      	bne.n	80051be <HAL_TIM_PWM_Start+0xf6>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051bc:	e003      	b.n	80051c6 <HAL_TIM_PWM_Start+0xfe>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2202      	movs	r2, #2
 80051c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2201      	movs	r2, #1
 80051cc:	6839      	ldr	r1, [r7, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fd04 	bl	8005bdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a35      	ldr	r2, [pc, #212]	; (80052b0 <HAL_TIM_PWM_Start+0x1e8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d013      	beq.n	8005206 <HAL_TIM_PWM_Start+0x13e>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a34      	ldr	r2, [pc, #208]	; (80052b4 <HAL_TIM_PWM_Start+0x1ec>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d00e      	beq.n	8005206 <HAL_TIM_PWM_Start+0x13e>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a32      	ldr	r2, [pc, #200]	; (80052b8 <HAL_TIM_PWM_Start+0x1f0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d009      	beq.n	8005206 <HAL_TIM_PWM_Start+0x13e>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a31      	ldr	r2, [pc, #196]	; (80052bc <HAL_TIM_PWM_Start+0x1f4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d004      	beq.n	8005206 <HAL_TIM_PWM_Start+0x13e>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a2f      	ldr	r2, [pc, #188]	; (80052c0 <HAL_TIM_PWM_Start+0x1f8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d101      	bne.n	800520a <HAL_TIM_PWM_Start+0x142>
 8005206:	2301      	movs	r3, #1
 8005208:	e000      	b.n	800520c <HAL_TIM_PWM_Start+0x144>
 800520a:	2300      	movs	r3, #0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d007      	beq.n	8005220 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800521e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a22      	ldr	r2, [pc, #136]	; (80052b0 <HAL_TIM_PWM_Start+0x1e8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d01d      	beq.n	8005266 <HAL_TIM_PWM_Start+0x19e>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005232:	d018      	beq.n	8005266 <HAL_TIM_PWM_Start+0x19e>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a22      	ldr	r2, [pc, #136]	; (80052c4 <HAL_TIM_PWM_Start+0x1fc>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d013      	beq.n	8005266 <HAL_TIM_PWM_Start+0x19e>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a21      	ldr	r2, [pc, #132]	; (80052c8 <HAL_TIM_PWM_Start+0x200>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d00e      	beq.n	8005266 <HAL_TIM_PWM_Start+0x19e>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a1f      	ldr	r2, [pc, #124]	; (80052cc <HAL_TIM_PWM_Start+0x204>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d009      	beq.n	8005266 <HAL_TIM_PWM_Start+0x19e>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a17      	ldr	r2, [pc, #92]	; (80052b4 <HAL_TIM_PWM_Start+0x1ec>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d004      	beq.n	8005266 <HAL_TIM_PWM_Start+0x19e>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a15      	ldr	r2, [pc, #84]	; (80052b8 <HAL_TIM_PWM_Start+0x1f0>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d115      	bne.n	8005292 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	4b18      	ldr	r3, [pc, #96]	; (80052d0 <HAL_TIM_PWM_Start+0x208>)
 800526e:	4013      	ands	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2b06      	cmp	r3, #6
 8005276:	d015      	beq.n	80052a4 <HAL_TIM_PWM_Start+0x1dc>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800527e:	d011      	beq.n	80052a4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0201 	orr.w	r2, r2, #1
 800528e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005290:	e008      	b.n	80052a4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f042 0201 	orr.w	r2, r2, #1
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	e000      	b.n	80052a6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	40012c00 	.word	0x40012c00
 80052b4:	40013400 	.word	0x40013400
 80052b8:	40014000 	.word	0x40014000
 80052bc:	40014400 	.word	0x40014400
 80052c0:	40014800 	.word	0x40014800
 80052c4:	40000400 	.word	0x40000400
 80052c8:	40000800 	.word	0x40000800
 80052cc:	40000c00 	.word	0x40000c00
 80052d0:	00010007 	.word	0x00010007

080052d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052e0:	2300      	movs	r3, #0
 80052e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d101      	bne.n	80052f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052ee:	2302      	movs	r3, #2
 80052f0:	e0ff      	b.n	80054f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b14      	cmp	r3, #20
 80052fe:	f200 80f0 	bhi.w	80054e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005302:	a201      	add	r2, pc, #4	; (adr r2, 8005308 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005308:	0800535d 	.word	0x0800535d
 800530c:	080054e3 	.word	0x080054e3
 8005310:	080054e3 	.word	0x080054e3
 8005314:	080054e3 	.word	0x080054e3
 8005318:	0800539d 	.word	0x0800539d
 800531c:	080054e3 	.word	0x080054e3
 8005320:	080054e3 	.word	0x080054e3
 8005324:	080054e3 	.word	0x080054e3
 8005328:	080053df 	.word	0x080053df
 800532c:	080054e3 	.word	0x080054e3
 8005330:	080054e3 	.word	0x080054e3
 8005334:	080054e3 	.word	0x080054e3
 8005338:	0800541f 	.word	0x0800541f
 800533c:	080054e3 	.word	0x080054e3
 8005340:	080054e3 	.word	0x080054e3
 8005344:	080054e3 	.word	0x080054e3
 8005348:	08005461 	.word	0x08005461
 800534c:	080054e3 	.word	0x080054e3
 8005350:	080054e3 	.word	0x080054e3
 8005354:	080054e3 	.word	0x080054e3
 8005358:	080054a1 	.word	0x080054a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	4618      	mov	r0, r3
 8005364:	f000 f964 	bl	8005630 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699a      	ldr	r2, [r3, #24]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0208 	orr.w	r2, r2, #8
 8005376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	699a      	ldr	r2, [r3, #24]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f022 0204 	bic.w	r2, r2, #4
 8005386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6999      	ldr	r1, [r3, #24]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	691a      	ldr	r2, [r3, #16]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	619a      	str	r2, [r3, #24]
      break;
 800539a:	e0a5      	b.n	80054e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68b9      	ldr	r1, [r7, #8]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 f9d4 	bl	8005750 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699a      	ldr	r2, [r3, #24]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699a      	ldr	r2, [r3, #24]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6999      	ldr	r1, [r3, #24]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	021a      	lsls	r2, r3, #8
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	619a      	str	r2, [r3, #24]
      break;
 80053dc:	e084      	b.n	80054e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68b9      	ldr	r1, [r7, #8]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f000 fa3d 	bl	8005864 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	69da      	ldr	r2, [r3, #28]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f042 0208 	orr.w	r2, r2, #8
 80053f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	69da      	ldr	r2, [r3, #28]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0204 	bic.w	r2, r2, #4
 8005408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	69d9      	ldr	r1, [r3, #28]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	691a      	ldr	r2, [r3, #16]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	61da      	str	r2, [r3, #28]
      break;
 800541c:	e064      	b.n	80054e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68b9      	ldr	r1, [r7, #8]
 8005424:	4618      	mov	r0, r3
 8005426:	f000 faa5 	bl	8005974 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	69da      	ldr	r2, [r3, #28]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69da      	ldr	r2, [r3, #28]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69d9      	ldr	r1, [r3, #28]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	021a      	lsls	r2, r3, #8
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	61da      	str	r2, [r3, #28]
      break;
 800545e:	e043      	b.n	80054e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	4618      	mov	r0, r3
 8005468:	f000 faee 	bl	8005a48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0208 	orr.w	r2, r2, #8
 800547a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0204 	bic.w	r2, r2, #4
 800548a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	691a      	ldr	r2, [r3, #16]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800549e:	e023      	b.n	80054e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68b9      	ldr	r1, [r7, #8]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 fb32 	bl	8005b10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	021a      	lsls	r2, r3, #8
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054e0:	e002      	b.n	80054e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	75fb      	strb	r3, [r7, #23]
      break;
 80054e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop

080054fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a40      	ldr	r2, [pc, #256]	; (8005610 <TIM_Base_SetConfig+0x114>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d013      	beq.n	800553c <TIM_Base_SetConfig+0x40>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800551a:	d00f      	beq.n	800553c <TIM_Base_SetConfig+0x40>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a3d      	ldr	r2, [pc, #244]	; (8005614 <TIM_Base_SetConfig+0x118>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d00b      	beq.n	800553c <TIM_Base_SetConfig+0x40>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a3c      	ldr	r2, [pc, #240]	; (8005618 <TIM_Base_SetConfig+0x11c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d007      	beq.n	800553c <TIM_Base_SetConfig+0x40>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a3b      	ldr	r2, [pc, #236]	; (800561c <TIM_Base_SetConfig+0x120>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d003      	beq.n	800553c <TIM_Base_SetConfig+0x40>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a3a      	ldr	r2, [pc, #232]	; (8005620 <TIM_Base_SetConfig+0x124>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d108      	bne.n	800554e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	4313      	orrs	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a2f      	ldr	r2, [pc, #188]	; (8005610 <TIM_Base_SetConfig+0x114>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d01f      	beq.n	8005596 <TIM_Base_SetConfig+0x9a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800555c:	d01b      	beq.n	8005596 <TIM_Base_SetConfig+0x9a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a2c      	ldr	r2, [pc, #176]	; (8005614 <TIM_Base_SetConfig+0x118>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d017      	beq.n	8005596 <TIM_Base_SetConfig+0x9a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a2b      	ldr	r2, [pc, #172]	; (8005618 <TIM_Base_SetConfig+0x11c>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d013      	beq.n	8005596 <TIM_Base_SetConfig+0x9a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a2a      	ldr	r2, [pc, #168]	; (800561c <TIM_Base_SetConfig+0x120>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00f      	beq.n	8005596 <TIM_Base_SetConfig+0x9a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a29      	ldr	r2, [pc, #164]	; (8005620 <TIM_Base_SetConfig+0x124>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d00b      	beq.n	8005596 <TIM_Base_SetConfig+0x9a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a28      	ldr	r2, [pc, #160]	; (8005624 <TIM_Base_SetConfig+0x128>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d007      	beq.n	8005596 <TIM_Base_SetConfig+0x9a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a27      	ldr	r2, [pc, #156]	; (8005628 <TIM_Base_SetConfig+0x12c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d003      	beq.n	8005596 <TIM_Base_SetConfig+0x9a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a26      	ldr	r2, [pc, #152]	; (800562c <TIM_Base_SetConfig+0x130>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d108      	bne.n	80055a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800559c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a10      	ldr	r2, [pc, #64]	; (8005610 <TIM_Base_SetConfig+0x114>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d00f      	beq.n	80055f4 <TIM_Base_SetConfig+0xf8>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a12      	ldr	r2, [pc, #72]	; (8005620 <TIM_Base_SetConfig+0x124>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d00b      	beq.n	80055f4 <TIM_Base_SetConfig+0xf8>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a11      	ldr	r2, [pc, #68]	; (8005624 <TIM_Base_SetConfig+0x128>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d007      	beq.n	80055f4 <TIM_Base_SetConfig+0xf8>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a10      	ldr	r2, [pc, #64]	; (8005628 <TIM_Base_SetConfig+0x12c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d003      	beq.n	80055f4 <TIM_Base_SetConfig+0xf8>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a0f      	ldr	r2, [pc, #60]	; (800562c <TIM_Base_SetConfig+0x130>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d103      	bne.n	80055fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	691a      	ldr	r2, [r3, #16]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	615a      	str	r2, [r3, #20]
}
 8005602:	bf00      	nop
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	40012c00 	.word	0x40012c00
 8005614:	40000400 	.word	0x40000400
 8005618:	40000800 	.word	0x40000800
 800561c:	40000c00 	.word	0x40000c00
 8005620:	40013400 	.word	0x40013400
 8005624:	40014000 	.word	0x40014000
 8005628:	40014400 	.word	0x40014400
 800562c:	40014800 	.word	0x40014800

08005630 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	f023 0201 	bic.w	r2, r3, #1
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800565e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0303 	bic.w	r3, r3, #3
 800566a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	4313      	orrs	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f023 0302 	bic.w	r3, r3, #2
 800567c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	4313      	orrs	r3, r2
 8005686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a2c      	ldr	r2, [pc, #176]	; (800573c <TIM_OC1_SetConfig+0x10c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d00f      	beq.n	80056b0 <TIM_OC1_SetConfig+0x80>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a2b      	ldr	r2, [pc, #172]	; (8005740 <TIM_OC1_SetConfig+0x110>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d00b      	beq.n	80056b0 <TIM_OC1_SetConfig+0x80>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a2a      	ldr	r2, [pc, #168]	; (8005744 <TIM_OC1_SetConfig+0x114>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d007      	beq.n	80056b0 <TIM_OC1_SetConfig+0x80>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a29      	ldr	r2, [pc, #164]	; (8005748 <TIM_OC1_SetConfig+0x118>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d003      	beq.n	80056b0 <TIM_OC1_SetConfig+0x80>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a28      	ldr	r2, [pc, #160]	; (800574c <TIM_OC1_SetConfig+0x11c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d10c      	bne.n	80056ca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f023 0308 	bic.w	r3, r3, #8
 80056b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	4313      	orrs	r3, r2
 80056c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f023 0304 	bic.w	r3, r3, #4
 80056c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a1b      	ldr	r2, [pc, #108]	; (800573c <TIM_OC1_SetConfig+0x10c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d00f      	beq.n	80056f2 <TIM_OC1_SetConfig+0xc2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a1a      	ldr	r2, [pc, #104]	; (8005740 <TIM_OC1_SetConfig+0x110>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d00b      	beq.n	80056f2 <TIM_OC1_SetConfig+0xc2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a19      	ldr	r2, [pc, #100]	; (8005744 <TIM_OC1_SetConfig+0x114>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d007      	beq.n	80056f2 <TIM_OC1_SetConfig+0xc2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a18      	ldr	r2, [pc, #96]	; (8005748 <TIM_OC1_SetConfig+0x118>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d003      	beq.n	80056f2 <TIM_OC1_SetConfig+0xc2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a17      	ldr	r2, [pc, #92]	; (800574c <TIM_OC1_SetConfig+0x11c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d111      	bne.n	8005716 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005700:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	4313      	orrs	r3, r2
 800570a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	621a      	str	r2, [r3, #32]
}
 8005730:	bf00      	nop
 8005732:	371c      	adds	r7, #28
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	40012c00 	.word	0x40012c00
 8005740:	40013400 	.word	0x40013400
 8005744:	40014000 	.word	0x40014000
 8005748:	40014400 	.word	0x40014400
 800574c:	40014800 	.word	0x40014800

08005750 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	f023 0210 	bic.w	r2, r3, #16
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800577e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800578a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	021b      	lsls	r3, r3, #8
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4313      	orrs	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f023 0320 	bic.w	r3, r3, #32
 800579e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	011b      	lsls	r3, r3, #4
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a28      	ldr	r2, [pc, #160]	; (8005850 <TIM_OC2_SetConfig+0x100>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d003      	beq.n	80057bc <TIM_OC2_SetConfig+0x6c>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a27      	ldr	r2, [pc, #156]	; (8005854 <TIM_OC2_SetConfig+0x104>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d10d      	bne.n	80057d8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	011b      	lsls	r3, r3, #4
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a1d      	ldr	r2, [pc, #116]	; (8005850 <TIM_OC2_SetConfig+0x100>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d00f      	beq.n	8005800 <TIM_OC2_SetConfig+0xb0>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a1c      	ldr	r2, [pc, #112]	; (8005854 <TIM_OC2_SetConfig+0x104>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d00b      	beq.n	8005800 <TIM_OC2_SetConfig+0xb0>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a1b      	ldr	r2, [pc, #108]	; (8005858 <TIM_OC2_SetConfig+0x108>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d007      	beq.n	8005800 <TIM_OC2_SetConfig+0xb0>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a1a      	ldr	r2, [pc, #104]	; (800585c <TIM_OC2_SetConfig+0x10c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d003      	beq.n	8005800 <TIM_OC2_SetConfig+0xb0>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a19      	ldr	r2, [pc, #100]	; (8005860 <TIM_OC2_SetConfig+0x110>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d113      	bne.n	8005828 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005806:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800580e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	4313      	orrs	r3, r2
 800581a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	4313      	orrs	r3, r2
 8005826:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	621a      	str	r2, [r3, #32]
}
 8005842:	bf00      	nop
 8005844:	371c      	adds	r7, #28
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	40012c00 	.word	0x40012c00
 8005854:	40013400 	.word	0x40013400
 8005858:	40014000 	.word	0x40014000
 800585c:	40014400 	.word	0x40014400
 8005860:	40014800 	.word	0x40014800

08005864 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0303 	bic.w	r3, r3, #3
 800589e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	021b      	lsls	r3, r3, #8
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a27      	ldr	r2, [pc, #156]	; (8005960 <TIM_OC3_SetConfig+0xfc>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d003      	beq.n	80058ce <TIM_OC3_SetConfig+0x6a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a26      	ldr	r2, [pc, #152]	; (8005964 <TIM_OC3_SetConfig+0x100>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d10d      	bne.n	80058ea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	021b      	lsls	r3, r3, #8
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	4313      	orrs	r3, r2
 80058e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a1c      	ldr	r2, [pc, #112]	; (8005960 <TIM_OC3_SetConfig+0xfc>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00f      	beq.n	8005912 <TIM_OC3_SetConfig+0xae>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a1b      	ldr	r2, [pc, #108]	; (8005964 <TIM_OC3_SetConfig+0x100>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00b      	beq.n	8005912 <TIM_OC3_SetConfig+0xae>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a1a      	ldr	r2, [pc, #104]	; (8005968 <TIM_OC3_SetConfig+0x104>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d007      	beq.n	8005912 <TIM_OC3_SetConfig+0xae>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a19      	ldr	r2, [pc, #100]	; (800596c <TIM_OC3_SetConfig+0x108>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d003      	beq.n	8005912 <TIM_OC3_SetConfig+0xae>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a18      	ldr	r2, [pc, #96]	; (8005970 <TIM_OC3_SetConfig+0x10c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d113      	bne.n	800593a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4313      	orrs	r3, r2
 8005938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	621a      	str	r2, [r3, #32]
}
 8005954:	bf00      	nop
 8005956:	371c      	adds	r7, #28
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	40012c00 	.word	0x40012c00
 8005964:	40013400 	.word	0x40013400
 8005968:	40014000 	.word	0x40014000
 800596c:	40014400 	.word	0x40014400
 8005970:	40014800 	.word	0x40014800

08005974 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005974:	b480      	push	{r7}
 8005976:	b087      	sub	sp, #28
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	021b      	lsls	r3, r3, #8
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	031b      	lsls	r3, r3, #12
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a18      	ldr	r2, [pc, #96]	; (8005a34 <TIM_OC4_SetConfig+0xc0>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d00f      	beq.n	80059f8 <TIM_OC4_SetConfig+0x84>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a17      	ldr	r2, [pc, #92]	; (8005a38 <TIM_OC4_SetConfig+0xc4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00b      	beq.n	80059f8 <TIM_OC4_SetConfig+0x84>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a16      	ldr	r2, [pc, #88]	; (8005a3c <TIM_OC4_SetConfig+0xc8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d007      	beq.n	80059f8 <TIM_OC4_SetConfig+0x84>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a15      	ldr	r2, [pc, #84]	; (8005a40 <TIM_OC4_SetConfig+0xcc>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d003      	beq.n	80059f8 <TIM_OC4_SetConfig+0x84>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a14      	ldr	r2, [pc, #80]	; (8005a44 <TIM_OC4_SetConfig+0xd0>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d109      	bne.n	8005a0c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	019b      	lsls	r3, r3, #6
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	621a      	str	r2, [r3, #32]
}
 8005a26:	bf00      	nop
 8005a28:	371c      	adds	r7, #28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	40012c00 	.word	0x40012c00
 8005a38:	40013400 	.word	0x40013400
 8005a3c:	40014000 	.word	0x40014000
 8005a40:	40014400 	.word	0x40014400
 8005a44:	40014800 	.word	0x40014800

08005a48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	041b      	lsls	r3, r3, #16
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a17      	ldr	r2, [pc, #92]	; (8005afc <TIM_OC5_SetConfig+0xb4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d00f      	beq.n	8005ac2 <TIM_OC5_SetConfig+0x7a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a16      	ldr	r2, [pc, #88]	; (8005b00 <TIM_OC5_SetConfig+0xb8>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d00b      	beq.n	8005ac2 <TIM_OC5_SetConfig+0x7a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a15      	ldr	r2, [pc, #84]	; (8005b04 <TIM_OC5_SetConfig+0xbc>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d007      	beq.n	8005ac2 <TIM_OC5_SetConfig+0x7a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a14      	ldr	r2, [pc, #80]	; (8005b08 <TIM_OC5_SetConfig+0xc0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d003      	beq.n	8005ac2 <TIM_OC5_SetConfig+0x7a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a13      	ldr	r2, [pc, #76]	; (8005b0c <TIM_OC5_SetConfig+0xc4>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d109      	bne.n	8005ad6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ac8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	021b      	lsls	r3, r3, #8
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	621a      	str	r2, [r3, #32]
}
 8005af0:	bf00      	nop
 8005af2:	371c      	adds	r7, #28
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	40012c00 	.word	0x40012c00
 8005b00:	40013400 	.word	0x40013400
 8005b04:	40014000 	.word	0x40014000
 8005b08:	40014400 	.word	0x40014400
 8005b0c:	40014800 	.word	0x40014800

08005b10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	021b      	lsls	r3, r3, #8
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	051b      	lsls	r3, r3, #20
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a18      	ldr	r2, [pc, #96]	; (8005bc8 <TIM_OC6_SetConfig+0xb8>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d00f      	beq.n	8005b8c <TIM_OC6_SetConfig+0x7c>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a17      	ldr	r2, [pc, #92]	; (8005bcc <TIM_OC6_SetConfig+0xbc>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d00b      	beq.n	8005b8c <TIM_OC6_SetConfig+0x7c>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a16      	ldr	r2, [pc, #88]	; (8005bd0 <TIM_OC6_SetConfig+0xc0>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d007      	beq.n	8005b8c <TIM_OC6_SetConfig+0x7c>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a15      	ldr	r2, [pc, #84]	; (8005bd4 <TIM_OC6_SetConfig+0xc4>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d003      	beq.n	8005b8c <TIM_OC6_SetConfig+0x7c>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a14      	ldr	r2, [pc, #80]	; (8005bd8 <TIM_OC6_SetConfig+0xc8>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d109      	bne.n	8005ba0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	029b      	lsls	r3, r3, #10
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	621a      	str	r2, [r3, #32]
}
 8005bba:	bf00      	nop
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	40012c00 	.word	0x40012c00
 8005bcc:	40013400 	.word	0x40013400
 8005bd0:	40014000 	.word	0x40014000
 8005bd4:	40014400 	.word	0x40014400
 8005bd8:	40014800 	.word	0x40014800

08005bdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f003 031f 	and.w	r3, r3, #31
 8005bee:	2201      	movs	r2, #1
 8005bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a1a      	ldr	r2, [r3, #32]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	43db      	mvns	r3, r3
 8005bfe:	401a      	ands	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6a1a      	ldr	r2, [r3, #32]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f003 031f 	and.w	r3, r3, #31
 8005c0e:	6879      	ldr	r1, [r7, #4]
 8005c10:	fa01 f303 	lsl.w	r3, r1, r3
 8005c14:	431a      	orrs	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	621a      	str	r2, [r3, #32]
}
 8005c1a:	bf00      	nop
 8005c1c:	371c      	adds	r7, #28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
	...

08005c28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d101      	bne.n	8005c40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	e068      	b.n	8005d12 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a2e      	ldr	r2, [pc, #184]	; (8005d20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d004      	beq.n	8005c74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a2d      	ldr	r2, [pc, #180]	; (8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d108      	bne.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a1e      	ldr	r2, [pc, #120]	; (8005d20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d01d      	beq.n	8005ce6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb2:	d018      	beq.n	8005ce6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a1b      	ldr	r2, [pc, #108]	; (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d013      	beq.n	8005ce6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a1a      	ldr	r2, [pc, #104]	; (8005d2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d00e      	beq.n	8005ce6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a18      	ldr	r2, [pc, #96]	; (8005d30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d009      	beq.n	8005ce6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a13      	ldr	r2, [pc, #76]	; (8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d004      	beq.n	8005ce6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a14      	ldr	r2, [pc, #80]	; (8005d34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d10c      	bne.n	8005d00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	40012c00 	.word	0x40012c00
 8005d24:	40013400 	.word	0x40013400
 8005d28:	40000400 	.word	0x40000400
 8005d2c:	40000800 	.word	0x40000800
 8005d30:	40000c00 	.word	0x40000c00
 8005d34:	40014000 	.word	0x40014000

08005d38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d101      	bne.n	8005d54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d50:	2302      	movs	r3, #2
 8005d52:	e065      	b.n	8005e20 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	041b      	lsls	r3, r3, #16
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a16      	ldr	r2, [pc, #88]	; (8005e2c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d004      	beq.n	8005de2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a14      	ldr	r2, [pc, #80]	; (8005e30 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d115      	bne.n	8005e0e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	051b      	lsls	r3, r3, #20
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	40012c00 	.word	0x40012c00
 8005e30:	40013400 	.word	0x40013400

08005e34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e040      	b.n	8005ec8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7fa ff00 	bl	8000c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2224      	movs	r2, #36	; 0x24
 8005e60:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0201 	bic.w	r2, r2, #1
 8005e70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f82c 	bl	8005ed0 <UART_SetConfig>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d101      	bne.n	8005e82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e022      	b.n	8005ec8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fad8 	bl	8006440 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689a      	ldr	r2, [r3, #8]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005eae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f042 0201 	orr.w	r2, r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fb5f 	bl	8006584 <UART_CheckIdleState>
 8005ec6:	4603      	mov	r3, r0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ed4:	b08a      	sub	sp, #40	; 0x28
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005eda:	2300      	movs	r3, #0
 8005edc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	4ba4      	ldr	r3, [pc, #656]	; (8006190 <UART_SetConfig+0x2c0>)
 8005f00:	4013      	ands	r3, r2
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	6812      	ldr	r2, [r2, #0]
 8005f06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f08:	430b      	orrs	r3, r1
 8005f0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	68da      	ldr	r2, [r3, #12]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a99      	ldr	r2, [pc, #612]	; (8006194 <UART_SetConfig+0x2c4>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d004      	beq.n	8005f3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a90      	ldr	r2, [pc, #576]	; (8006198 <UART_SetConfig+0x2c8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d126      	bne.n	8005fa8 <UART_SetConfig+0xd8>
 8005f5a:	4b90      	ldr	r3, [pc, #576]	; (800619c <UART_SetConfig+0x2cc>)
 8005f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f60:	f003 0303 	and.w	r3, r3, #3
 8005f64:	2b03      	cmp	r3, #3
 8005f66:	d81b      	bhi.n	8005fa0 <UART_SetConfig+0xd0>
 8005f68:	a201      	add	r2, pc, #4	; (adr r2, 8005f70 <UART_SetConfig+0xa0>)
 8005f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6e:	bf00      	nop
 8005f70:	08005f81 	.word	0x08005f81
 8005f74:	08005f91 	.word	0x08005f91
 8005f78:	08005f89 	.word	0x08005f89
 8005f7c:	08005f99 	.word	0x08005f99
 8005f80:	2301      	movs	r3, #1
 8005f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f86:	e116      	b.n	80061b6 <UART_SetConfig+0x2e6>
 8005f88:	2302      	movs	r3, #2
 8005f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f8e:	e112      	b.n	80061b6 <UART_SetConfig+0x2e6>
 8005f90:	2304      	movs	r3, #4
 8005f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f96:	e10e      	b.n	80061b6 <UART_SetConfig+0x2e6>
 8005f98:	2308      	movs	r3, #8
 8005f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f9e:	e10a      	b.n	80061b6 <UART_SetConfig+0x2e6>
 8005fa0:	2310      	movs	r3, #16
 8005fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fa6:	e106      	b.n	80061b6 <UART_SetConfig+0x2e6>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a7c      	ldr	r2, [pc, #496]	; (80061a0 <UART_SetConfig+0x2d0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d138      	bne.n	8006024 <UART_SetConfig+0x154>
 8005fb2:	4b7a      	ldr	r3, [pc, #488]	; (800619c <UART_SetConfig+0x2cc>)
 8005fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb8:	f003 030c 	and.w	r3, r3, #12
 8005fbc:	2b0c      	cmp	r3, #12
 8005fbe:	d82d      	bhi.n	800601c <UART_SetConfig+0x14c>
 8005fc0:	a201      	add	r2, pc, #4	; (adr r2, 8005fc8 <UART_SetConfig+0xf8>)
 8005fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc6:	bf00      	nop
 8005fc8:	08005ffd 	.word	0x08005ffd
 8005fcc:	0800601d 	.word	0x0800601d
 8005fd0:	0800601d 	.word	0x0800601d
 8005fd4:	0800601d 	.word	0x0800601d
 8005fd8:	0800600d 	.word	0x0800600d
 8005fdc:	0800601d 	.word	0x0800601d
 8005fe0:	0800601d 	.word	0x0800601d
 8005fe4:	0800601d 	.word	0x0800601d
 8005fe8:	08006005 	.word	0x08006005
 8005fec:	0800601d 	.word	0x0800601d
 8005ff0:	0800601d 	.word	0x0800601d
 8005ff4:	0800601d 	.word	0x0800601d
 8005ff8:	08006015 	.word	0x08006015
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006002:	e0d8      	b.n	80061b6 <UART_SetConfig+0x2e6>
 8006004:	2302      	movs	r3, #2
 8006006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800600a:	e0d4      	b.n	80061b6 <UART_SetConfig+0x2e6>
 800600c:	2304      	movs	r3, #4
 800600e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006012:	e0d0      	b.n	80061b6 <UART_SetConfig+0x2e6>
 8006014:	2308      	movs	r3, #8
 8006016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800601a:	e0cc      	b.n	80061b6 <UART_SetConfig+0x2e6>
 800601c:	2310      	movs	r3, #16
 800601e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006022:	e0c8      	b.n	80061b6 <UART_SetConfig+0x2e6>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a5e      	ldr	r2, [pc, #376]	; (80061a4 <UART_SetConfig+0x2d4>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d125      	bne.n	800607a <UART_SetConfig+0x1aa>
 800602e:	4b5b      	ldr	r3, [pc, #364]	; (800619c <UART_SetConfig+0x2cc>)
 8006030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006034:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006038:	2b30      	cmp	r3, #48	; 0x30
 800603a:	d016      	beq.n	800606a <UART_SetConfig+0x19a>
 800603c:	2b30      	cmp	r3, #48	; 0x30
 800603e:	d818      	bhi.n	8006072 <UART_SetConfig+0x1a2>
 8006040:	2b20      	cmp	r3, #32
 8006042:	d00a      	beq.n	800605a <UART_SetConfig+0x18a>
 8006044:	2b20      	cmp	r3, #32
 8006046:	d814      	bhi.n	8006072 <UART_SetConfig+0x1a2>
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <UART_SetConfig+0x182>
 800604c:	2b10      	cmp	r3, #16
 800604e:	d008      	beq.n	8006062 <UART_SetConfig+0x192>
 8006050:	e00f      	b.n	8006072 <UART_SetConfig+0x1a2>
 8006052:	2300      	movs	r3, #0
 8006054:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006058:	e0ad      	b.n	80061b6 <UART_SetConfig+0x2e6>
 800605a:	2302      	movs	r3, #2
 800605c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006060:	e0a9      	b.n	80061b6 <UART_SetConfig+0x2e6>
 8006062:	2304      	movs	r3, #4
 8006064:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006068:	e0a5      	b.n	80061b6 <UART_SetConfig+0x2e6>
 800606a:	2308      	movs	r3, #8
 800606c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006070:	e0a1      	b.n	80061b6 <UART_SetConfig+0x2e6>
 8006072:	2310      	movs	r3, #16
 8006074:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006078:	e09d      	b.n	80061b6 <UART_SetConfig+0x2e6>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a4a      	ldr	r2, [pc, #296]	; (80061a8 <UART_SetConfig+0x2d8>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d125      	bne.n	80060d0 <UART_SetConfig+0x200>
 8006084:	4b45      	ldr	r3, [pc, #276]	; (800619c <UART_SetConfig+0x2cc>)
 8006086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800608e:	2bc0      	cmp	r3, #192	; 0xc0
 8006090:	d016      	beq.n	80060c0 <UART_SetConfig+0x1f0>
 8006092:	2bc0      	cmp	r3, #192	; 0xc0
 8006094:	d818      	bhi.n	80060c8 <UART_SetConfig+0x1f8>
 8006096:	2b80      	cmp	r3, #128	; 0x80
 8006098:	d00a      	beq.n	80060b0 <UART_SetConfig+0x1e0>
 800609a:	2b80      	cmp	r3, #128	; 0x80
 800609c:	d814      	bhi.n	80060c8 <UART_SetConfig+0x1f8>
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d002      	beq.n	80060a8 <UART_SetConfig+0x1d8>
 80060a2:	2b40      	cmp	r3, #64	; 0x40
 80060a4:	d008      	beq.n	80060b8 <UART_SetConfig+0x1e8>
 80060a6:	e00f      	b.n	80060c8 <UART_SetConfig+0x1f8>
 80060a8:	2300      	movs	r3, #0
 80060aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ae:	e082      	b.n	80061b6 <UART_SetConfig+0x2e6>
 80060b0:	2302      	movs	r3, #2
 80060b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060b6:	e07e      	b.n	80061b6 <UART_SetConfig+0x2e6>
 80060b8:	2304      	movs	r3, #4
 80060ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060be:	e07a      	b.n	80061b6 <UART_SetConfig+0x2e6>
 80060c0:	2308      	movs	r3, #8
 80060c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060c6:	e076      	b.n	80061b6 <UART_SetConfig+0x2e6>
 80060c8:	2310      	movs	r3, #16
 80060ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ce:	e072      	b.n	80061b6 <UART_SetConfig+0x2e6>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a35      	ldr	r2, [pc, #212]	; (80061ac <UART_SetConfig+0x2dc>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d12a      	bne.n	8006130 <UART_SetConfig+0x260>
 80060da:	4b30      	ldr	r3, [pc, #192]	; (800619c <UART_SetConfig+0x2cc>)
 80060dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060e8:	d01a      	beq.n	8006120 <UART_SetConfig+0x250>
 80060ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ee:	d81b      	bhi.n	8006128 <UART_SetConfig+0x258>
 80060f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060f4:	d00c      	beq.n	8006110 <UART_SetConfig+0x240>
 80060f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060fa:	d815      	bhi.n	8006128 <UART_SetConfig+0x258>
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d003      	beq.n	8006108 <UART_SetConfig+0x238>
 8006100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006104:	d008      	beq.n	8006118 <UART_SetConfig+0x248>
 8006106:	e00f      	b.n	8006128 <UART_SetConfig+0x258>
 8006108:	2300      	movs	r3, #0
 800610a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800610e:	e052      	b.n	80061b6 <UART_SetConfig+0x2e6>
 8006110:	2302      	movs	r3, #2
 8006112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006116:	e04e      	b.n	80061b6 <UART_SetConfig+0x2e6>
 8006118:	2304      	movs	r3, #4
 800611a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800611e:	e04a      	b.n	80061b6 <UART_SetConfig+0x2e6>
 8006120:	2308      	movs	r3, #8
 8006122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006126:	e046      	b.n	80061b6 <UART_SetConfig+0x2e6>
 8006128:	2310      	movs	r3, #16
 800612a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800612e:	e042      	b.n	80061b6 <UART_SetConfig+0x2e6>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a17      	ldr	r2, [pc, #92]	; (8006194 <UART_SetConfig+0x2c4>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d13a      	bne.n	80061b0 <UART_SetConfig+0x2e0>
 800613a:	4b18      	ldr	r3, [pc, #96]	; (800619c <UART_SetConfig+0x2cc>)
 800613c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006140:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006144:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006148:	d01a      	beq.n	8006180 <UART_SetConfig+0x2b0>
 800614a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800614e:	d81b      	bhi.n	8006188 <UART_SetConfig+0x2b8>
 8006150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006154:	d00c      	beq.n	8006170 <UART_SetConfig+0x2a0>
 8006156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800615a:	d815      	bhi.n	8006188 <UART_SetConfig+0x2b8>
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <UART_SetConfig+0x298>
 8006160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006164:	d008      	beq.n	8006178 <UART_SetConfig+0x2a8>
 8006166:	e00f      	b.n	8006188 <UART_SetConfig+0x2b8>
 8006168:	2300      	movs	r3, #0
 800616a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800616e:	e022      	b.n	80061b6 <UART_SetConfig+0x2e6>
 8006170:	2302      	movs	r3, #2
 8006172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006176:	e01e      	b.n	80061b6 <UART_SetConfig+0x2e6>
 8006178:	2304      	movs	r3, #4
 800617a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800617e:	e01a      	b.n	80061b6 <UART_SetConfig+0x2e6>
 8006180:	2308      	movs	r3, #8
 8006182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006186:	e016      	b.n	80061b6 <UART_SetConfig+0x2e6>
 8006188:	2310      	movs	r3, #16
 800618a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800618e:	e012      	b.n	80061b6 <UART_SetConfig+0x2e6>
 8006190:	efff69f3 	.word	0xefff69f3
 8006194:	40008000 	.word	0x40008000
 8006198:	40013800 	.word	0x40013800
 800619c:	40021000 	.word	0x40021000
 80061a0:	40004400 	.word	0x40004400
 80061a4:	40004800 	.word	0x40004800
 80061a8:	40004c00 	.word	0x40004c00
 80061ac:	40005000 	.word	0x40005000
 80061b0:	2310      	movs	r3, #16
 80061b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a9f      	ldr	r2, [pc, #636]	; (8006438 <UART_SetConfig+0x568>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d17a      	bne.n	80062b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d824      	bhi.n	8006212 <UART_SetConfig+0x342>
 80061c8:	a201      	add	r2, pc, #4	; (adr r2, 80061d0 <UART_SetConfig+0x300>)
 80061ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ce:	bf00      	nop
 80061d0:	080061f5 	.word	0x080061f5
 80061d4:	08006213 	.word	0x08006213
 80061d8:	080061fd 	.word	0x080061fd
 80061dc:	08006213 	.word	0x08006213
 80061e0:	08006203 	.word	0x08006203
 80061e4:	08006213 	.word	0x08006213
 80061e8:	08006213 	.word	0x08006213
 80061ec:	08006213 	.word	0x08006213
 80061f0:	0800620b 	.word	0x0800620b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061f4:	f7fe f958 	bl	80044a8 <HAL_RCC_GetPCLK1Freq>
 80061f8:	61f8      	str	r0, [r7, #28]
        break;
 80061fa:	e010      	b.n	800621e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061fc:	4b8f      	ldr	r3, [pc, #572]	; (800643c <UART_SetConfig+0x56c>)
 80061fe:	61fb      	str	r3, [r7, #28]
        break;
 8006200:	e00d      	b.n	800621e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006202:	f7fe f8b9 	bl	8004378 <HAL_RCC_GetSysClockFreq>
 8006206:	61f8      	str	r0, [r7, #28]
        break;
 8006208:	e009      	b.n	800621e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800620a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800620e:	61fb      	str	r3, [r7, #28]
        break;
 8006210:	e005      	b.n	800621e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006212:	2300      	movs	r3, #0
 8006214:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800621c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 80fb 	beq.w	800641c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	4613      	mov	r3, r2
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	4413      	add	r3, r2
 8006230:	69fa      	ldr	r2, [r7, #28]
 8006232:	429a      	cmp	r2, r3
 8006234:	d305      	bcc.n	8006242 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800623c:	69fa      	ldr	r2, [r7, #28]
 800623e:	429a      	cmp	r2, r3
 8006240:	d903      	bls.n	800624a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006248:	e0e8      	b.n	800641c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	2200      	movs	r2, #0
 800624e:	461c      	mov	r4, r3
 8006250:	4615      	mov	r5, r2
 8006252:	f04f 0200 	mov.w	r2, #0
 8006256:	f04f 0300 	mov.w	r3, #0
 800625a:	022b      	lsls	r3, r5, #8
 800625c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006260:	0222      	lsls	r2, r4, #8
 8006262:	68f9      	ldr	r1, [r7, #12]
 8006264:	6849      	ldr	r1, [r1, #4]
 8006266:	0849      	lsrs	r1, r1, #1
 8006268:	2000      	movs	r0, #0
 800626a:	4688      	mov	r8, r1
 800626c:	4681      	mov	r9, r0
 800626e:	eb12 0a08 	adds.w	sl, r2, r8
 8006272:	eb43 0b09 	adc.w	fp, r3, r9
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	603b      	str	r3, [r7, #0]
 800627e:	607a      	str	r2, [r7, #4]
 8006280:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006284:	4650      	mov	r0, sl
 8006286:	4659      	mov	r1, fp
 8006288:	f7f9 ff9e 	bl	80001c8 <__aeabi_uldivmod>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4613      	mov	r3, r2
 8006292:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800629a:	d308      	bcc.n	80062ae <UART_SetConfig+0x3de>
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062a2:	d204      	bcs.n	80062ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	69ba      	ldr	r2, [r7, #24]
 80062aa:	60da      	str	r2, [r3, #12]
 80062ac:	e0b6      	b.n	800641c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80062b4:	e0b2      	b.n	800641c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062be:	d15e      	bne.n	800637e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80062c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062c4:	2b08      	cmp	r3, #8
 80062c6:	d828      	bhi.n	800631a <UART_SetConfig+0x44a>
 80062c8:	a201      	add	r2, pc, #4	; (adr r2, 80062d0 <UART_SetConfig+0x400>)
 80062ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ce:	bf00      	nop
 80062d0:	080062f5 	.word	0x080062f5
 80062d4:	080062fd 	.word	0x080062fd
 80062d8:	08006305 	.word	0x08006305
 80062dc:	0800631b 	.word	0x0800631b
 80062e0:	0800630b 	.word	0x0800630b
 80062e4:	0800631b 	.word	0x0800631b
 80062e8:	0800631b 	.word	0x0800631b
 80062ec:	0800631b 	.word	0x0800631b
 80062f0:	08006313 	.word	0x08006313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062f4:	f7fe f8d8 	bl	80044a8 <HAL_RCC_GetPCLK1Freq>
 80062f8:	61f8      	str	r0, [r7, #28]
        break;
 80062fa:	e014      	b.n	8006326 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062fc:	f7fe f8ea 	bl	80044d4 <HAL_RCC_GetPCLK2Freq>
 8006300:	61f8      	str	r0, [r7, #28]
        break;
 8006302:	e010      	b.n	8006326 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006304:	4b4d      	ldr	r3, [pc, #308]	; (800643c <UART_SetConfig+0x56c>)
 8006306:	61fb      	str	r3, [r7, #28]
        break;
 8006308:	e00d      	b.n	8006326 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800630a:	f7fe f835 	bl	8004378 <HAL_RCC_GetSysClockFreq>
 800630e:	61f8      	str	r0, [r7, #28]
        break;
 8006310:	e009      	b.n	8006326 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006316:	61fb      	str	r3, [r7, #28]
        break;
 8006318:	e005      	b.n	8006326 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800631a:	2300      	movs	r3, #0
 800631c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006324:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d077      	beq.n	800641c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	005a      	lsls	r2, r3, #1
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	085b      	lsrs	r3, r3, #1
 8006336:	441a      	add	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006340:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	2b0f      	cmp	r3, #15
 8006346:	d916      	bls.n	8006376 <UART_SetConfig+0x4a6>
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800634e:	d212      	bcs.n	8006376 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	b29b      	uxth	r3, r3
 8006354:	f023 030f 	bic.w	r3, r3, #15
 8006358:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	085b      	lsrs	r3, r3, #1
 800635e:	b29b      	uxth	r3, r3
 8006360:	f003 0307 	and.w	r3, r3, #7
 8006364:	b29a      	uxth	r2, r3
 8006366:	8afb      	ldrh	r3, [r7, #22]
 8006368:	4313      	orrs	r3, r2
 800636a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	8afa      	ldrh	r2, [r7, #22]
 8006372:	60da      	str	r2, [r3, #12]
 8006374:	e052      	b.n	800641c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800637c:	e04e      	b.n	800641c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800637e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006382:	2b08      	cmp	r3, #8
 8006384:	d827      	bhi.n	80063d6 <UART_SetConfig+0x506>
 8006386:	a201      	add	r2, pc, #4	; (adr r2, 800638c <UART_SetConfig+0x4bc>)
 8006388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638c:	080063b1 	.word	0x080063b1
 8006390:	080063b9 	.word	0x080063b9
 8006394:	080063c1 	.word	0x080063c1
 8006398:	080063d7 	.word	0x080063d7
 800639c:	080063c7 	.word	0x080063c7
 80063a0:	080063d7 	.word	0x080063d7
 80063a4:	080063d7 	.word	0x080063d7
 80063a8:	080063d7 	.word	0x080063d7
 80063ac:	080063cf 	.word	0x080063cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063b0:	f7fe f87a 	bl	80044a8 <HAL_RCC_GetPCLK1Freq>
 80063b4:	61f8      	str	r0, [r7, #28]
        break;
 80063b6:	e014      	b.n	80063e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063b8:	f7fe f88c 	bl	80044d4 <HAL_RCC_GetPCLK2Freq>
 80063bc:	61f8      	str	r0, [r7, #28]
        break;
 80063be:	e010      	b.n	80063e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063c0:	4b1e      	ldr	r3, [pc, #120]	; (800643c <UART_SetConfig+0x56c>)
 80063c2:	61fb      	str	r3, [r7, #28]
        break;
 80063c4:	e00d      	b.n	80063e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063c6:	f7fd ffd7 	bl	8004378 <HAL_RCC_GetSysClockFreq>
 80063ca:	61f8      	str	r0, [r7, #28]
        break;
 80063cc:	e009      	b.n	80063e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063d2:	61fb      	str	r3, [r7, #28]
        break;
 80063d4:	e005      	b.n	80063e2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80063e0:	bf00      	nop
    }

    if (pclk != 0U)
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d019      	beq.n	800641c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	085a      	lsrs	r2, r3, #1
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	441a      	add	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	2b0f      	cmp	r3, #15
 8006400:	d909      	bls.n	8006416 <UART_SetConfig+0x546>
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006408:	d205      	bcs.n	8006416 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	b29a      	uxth	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	60da      	str	r2, [r3, #12]
 8006414:	e002      	b.n	800641c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006428:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800642c:	4618      	mov	r0, r3
 800642e:	3728      	adds	r7, #40	; 0x28
 8006430:	46bd      	mov	sp, r7
 8006432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006436:	bf00      	nop
 8006438:	40008000 	.word	0x40008000
 800643c:	00f42400 	.word	0x00f42400

08006440 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00a      	beq.n	800646a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00a      	beq.n	800648c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	430a      	orrs	r2, r1
 800648a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006490:	f003 0304 	and.w	r3, r3, #4
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00a      	beq.n	80064ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b2:	f003 0308 	and.w	r3, r3, #8
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	430a      	orrs	r2, r1
 80064ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d4:	f003 0310 	and.w	r3, r3, #16
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00a      	beq.n	80064f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f6:	f003 0320 	and.w	r3, r3, #32
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00a      	beq.n	8006514 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	430a      	orrs	r2, r1
 8006512:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651c:	2b00      	cmp	r3, #0
 800651e:	d01a      	beq.n	8006556 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	430a      	orrs	r2, r1
 8006534:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800653e:	d10a      	bne.n	8006556 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	430a      	orrs	r2, r1
 8006554:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00a      	beq.n	8006578 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	430a      	orrs	r2, r1
 8006576:	605a      	str	r2, [r3, #4]
  }
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af02      	add	r7, sp, #8
 800658a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006594:	f7fa fe4e 	bl	8001234 <HAL_GetTick>
 8006598:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0308 	and.w	r3, r3, #8
 80065a4:	2b08      	cmp	r3, #8
 80065a6:	d10e      	bne.n	80065c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f82d 	bl	8006616 <UART_WaitOnFlagUntilTimeout>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e023      	b.n	800660e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0304 	and.w	r3, r3, #4
 80065d0:	2b04      	cmp	r3, #4
 80065d2:	d10e      	bne.n	80065f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f817 	bl	8006616 <UART_WaitOnFlagUntilTimeout>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e00d      	b.n	800660e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2220      	movs	r2, #32
 80065f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2220      	movs	r2, #32
 80065fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b09c      	sub	sp, #112	; 0x70
 800661a:	af00      	add	r7, sp, #0
 800661c:	60f8      	str	r0, [r7, #12]
 800661e:	60b9      	str	r1, [r7, #8]
 8006620:	603b      	str	r3, [r7, #0]
 8006622:	4613      	mov	r3, r2
 8006624:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006626:	e0a5      	b.n	8006774 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006628:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800662a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662e:	f000 80a1 	beq.w	8006774 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006632:	f7fa fdff 	bl	8001234 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800663e:	429a      	cmp	r2, r3
 8006640:	d302      	bcc.n	8006648 <UART_WaitOnFlagUntilTimeout+0x32>
 8006642:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006644:	2b00      	cmp	r3, #0
 8006646:	d13e      	bne.n	80066c6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006650:	e853 3f00 	ldrex	r3, [r3]
 8006654:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006658:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800665c:	667b      	str	r3, [r7, #100]	; 0x64
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006666:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006668:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800666c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e6      	bne.n	8006648 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	3308      	adds	r3, #8
 8006680:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006684:	e853 3f00 	ldrex	r3, [r3]
 8006688:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800668a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668c:	f023 0301 	bic.w	r3, r3, #1
 8006690:	663b      	str	r3, [r7, #96]	; 0x60
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3308      	adds	r3, #8
 8006698:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800669a:	64ba      	str	r2, [r7, #72]	; 0x48
 800669c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066a2:	e841 2300 	strex	r3, r2, [r1]
 80066a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80066a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1e5      	bne.n	800667a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2220      	movs	r2, #32
 80066b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2220      	movs	r2, #32
 80066b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e067      	b.n	8006796 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d04f      	beq.n	8006774 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066e2:	d147      	bne.n	8006774 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066ec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f6:	e853 3f00 	ldrex	r3, [r3]
 80066fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006702:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800670c:	637b      	str	r3, [r7, #52]	; 0x34
 800670e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006710:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006714:	e841 2300 	strex	r3, r2, [r1]
 8006718:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800671a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e6      	bne.n	80066ee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	3308      	adds	r3, #8
 8006726:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	e853 3f00 	ldrex	r3, [r3]
 800672e:	613b      	str	r3, [r7, #16]
   return(result);
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	f023 0301 	bic.w	r3, r3, #1
 8006736:	66bb      	str	r3, [r7, #104]	; 0x68
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3308      	adds	r3, #8
 800673e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006740:	623a      	str	r2, [r7, #32]
 8006742:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006744:	69f9      	ldr	r1, [r7, #28]
 8006746:	6a3a      	ldr	r2, [r7, #32]
 8006748:	e841 2300 	strex	r3, r2, [r1]
 800674c:	61bb      	str	r3, [r7, #24]
   return(result);
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1e5      	bne.n	8006720 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2220      	movs	r2, #32
 8006758:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2220      	movs	r2, #32
 800675e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2220      	movs	r2, #32
 8006764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e010      	b.n	8006796 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	69da      	ldr	r2, [r3, #28]
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	4013      	ands	r3, r2
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	429a      	cmp	r2, r3
 8006782:	bf0c      	ite	eq
 8006784:	2301      	moveq	r3, #1
 8006786:	2300      	movne	r3, #0
 8006788:	b2db      	uxtb	r3, r3
 800678a:	461a      	mov	r2, r3
 800678c:	79fb      	ldrb	r3, [r7, #7]
 800678e:	429a      	cmp	r2, r3
 8006790:	f43f af4a 	beq.w	8006628 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3770      	adds	r7, #112	; 0x70
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
	...

080067a0 <arm_rfft_32_fast_init_f32>:
 80067a0:	b178      	cbz	r0, 80067c2 <arm_rfft_32_fast_init_f32+0x22>
 80067a2:	b430      	push	{r4, r5}
 80067a4:	4908      	ldr	r1, [pc, #32]	; (80067c8 <arm_rfft_32_fast_init_f32+0x28>)
 80067a6:	4a09      	ldr	r2, [pc, #36]	; (80067cc <arm_rfft_32_fast_init_f32+0x2c>)
 80067a8:	2310      	movs	r3, #16
 80067aa:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80067ae:	8003      	strh	r3, [r0, #0]
 80067b0:	2520      	movs	r5, #32
 80067b2:	2414      	movs	r4, #20
 80067b4:	4b06      	ldr	r3, [pc, #24]	; (80067d0 <arm_rfft_32_fast_init_f32+0x30>)
 80067b6:	8205      	strh	r5, [r0, #16]
 80067b8:	8184      	strh	r4, [r0, #12]
 80067ba:	6143      	str	r3, [r0, #20]
 80067bc:	bc30      	pop	{r4, r5}
 80067be:	2000      	movs	r0, #0
 80067c0:	4770      	bx	lr
 80067c2:	f04f 30ff 	mov.w	r0, #4294967295
 80067c6:	4770      	bx	lr
 80067c8:	08008b34 	.word	0x08008b34
 80067cc:	0800d46c 	.word	0x0800d46c
 80067d0:	080161ec 	.word	0x080161ec

080067d4 <arm_rfft_64_fast_init_f32>:
 80067d4:	b178      	cbz	r0, 80067f6 <arm_rfft_64_fast_init_f32+0x22>
 80067d6:	b430      	push	{r4, r5}
 80067d8:	4908      	ldr	r1, [pc, #32]	; (80067fc <arm_rfft_64_fast_init_f32+0x28>)
 80067da:	4a09      	ldr	r2, [pc, #36]	; (8006800 <arm_rfft_64_fast_init_f32+0x2c>)
 80067dc:	2320      	movs	r3, #32
 80067de:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80067e2:	8003      	strh	r3, [r0, #0]
 80067e4:	2540      	movs	r5, #64	; 0x40
 80067e6:	2430      	movs	r4, #48	; 0x30
 80067e8:	4b06      	ldr	r3, [pc, #24]	; (8006804 <arm_rfft_64_fast_init_f32+0x30>)
 80067ea:	8205      	strh	r5, [r0, #16]
 80067ec:	8184      	strh	r4, [r0, #12]
 80067ee:	6143      	str	r3, [r0, #20]
 80067f0:	bc30      	pop	{r4, r5}
 80067f2:	2000      	movs	r0, #0
 80067f4:	4770      	bx	lr
 80067f6:	f04f 30ff 	mov.w	r0, #4294967295
 80067fa:	4770      	bx	lr
 80067fc:	0800ac8c 	.word	0x0800ac8c
 8006800:	08011cec 	.word	0x08011cec
 8006804:	0801aa6c 	.word	0x0801aa6c

08006808 <arm_rfft_256_fast_init_f32>:
 8006808:	b180      	cbz	r0, 800682c <arm_rfft_256_fast_init_f32+0x24>
 800680a:	b430      	push	{r4, r5}
 800680c:	4909      	ldr	r1, [pc, #36]	; (8006834 <arm_rfft_256_fast_init_f32+0x2c>)
 800680e:	4a0a      	ldr	r2, [pc, #40]	; (8006838 <arm_rfft_256_fast_init_f32+0x30>)
 8006810:	2380      	movs	r3, #128	; 0x80
 8006812:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006816:	8003      	strh	r3, [r0, #0]
 8006818:	f44f 7580 	mov.w	r5, #256	; 0x100
 800681c:	24d0      	movs	r4, #208	; 0xd0
 800681e:	4b07      	ldr	r3, [pc, #28]	; (800683c <arm_rfft_256_fast_init_f32+0x34>)
 8006820:	8205      	strh	r5, [r0, #16]
 8006822:	8184      	strh	r4, [r0, #12]
 8006824:	6143      	str	r3, [r0, #20]
 8006826:	bc30      	pop	{r4, r5}
 8006828:	2000      	movs	r0, #0
 800682a:	4770      	bx	lr
 800682c:	f04f 30ff 	mov.w	r0, #4294967295
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	08008994 	.word	0x08008994
 8006838:	0800d06c 	.word	0x0800d06c
 800683c:	08015dec 	.word	0x08015dec

08006840 <arm_rfft_512_fast_init_f32>:
 8006840:	b190      	cbz	r0, 8006868 <arm_rfft_512_fast_init_f32+0x28>
 8006842:	b430      	push	{r4, r5}
 8006844:	490a      	ldr	r1, [pc, #40]	; (8006870 <arm_rfft_512_fast_init_f32+0x30>)
 8006846:	4a0b      	ldr	r2, [pc, #44]	; (8006874 <arm_rfft_512_fast_init_f32+0x34>)
 8006848:	f44f 7380 	mov.w	r3, #256	; 0x100
 800684c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006850:	8003      	strh	r3, [r0, #0]
 8006852:	f44f 7500 	mov.w	r5, #512	; 0x200
 8006856:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800685a:	4b07      	ldr	r3, [pc, #28]	; (8006878 <arm_rfft_512_fast_init_f32+0x38>)
 800685c:	8205      	strh	r5, [r0, #16]
 800685e:	8184      	strh	r4, [r0, #12]
 8006860:	6143      	str	r3, [r0, #20]
 8006862:	bc30      	pop	{r4, r5}
 8006864:	2000      	movs	r0, #0
 8006866:	4770      	bx	lr
 8006868:	f04f 30ff 	mov.w	r0, #4294967295
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	0800a91c 	.word	0x0800a91c
 8006874:	080114ec 	.word	0x080114ec
 8006878:	0801a26c 	.word	0x0801a26c

0800687c <arm_rfft_1024_fast_init_f32>:
 800687c:	b190      	cbz	r0, 80068a4 <arm_rfft_1024_fast_init_f32+0x28>
 800687e:	b430      	push	{r4, r5}
 8006880:	490a      	ldr	r1, [pc, #40]	; (80068ac <arm_rfft_1024_fast_init_f32+0x30>)
 8006882:	4a0b      	ldr	r2, [pc, #44]	; (80068b0 <arm_rfft_1024_fast_init_f32+0x34>)
 8006884:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006888:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800688c:	8003      	strh	r3, [r0, #0]
 800688e:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8006892:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8006896:	4b07      	ldr	r3, [pc, #28]	; (80068b4 <arm_rfft_1024_fast_init_f32+0x38>)
 8006898:	8205      	strh	r5, [r0, #16]
 800689a:	8184      	strh	r4, [r0, #12]
 800689c:	6143      	str	r3, [r0, #20]
 800689e:	bc30      	pop	{r4, r5}
 80068a0:	2000      	movs	r0, #0
 80068a2:	4770      	bx	lr
 80068a4:	f04f 30ff 	mov.w	r0, #4294967295
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	0800acec 	.word	0x0800acec
 80068b0:	08011dec 	.word	0x08011dec
 80068b4:	08012dec 	.word	0x08012dec

080068b8 <arm_rfft_2048_fast_init_f32>:
 80068b8:	b190      	cbz	r0, 80068e0 <arm_rfft_2048_fast_init_f32+0x28>
 80068ba:	b430      	push	{r4, r5}
 80068bc:	490a      	ldr	r1, [pc, #40]	; (80068e8 <arm_rfft_2048_fast_init_f32+0x30>)
 80068be:	4a0b      	ldr	r2, [pc, #44]	; (80068ec <arm_rfft_2048_fast_init_f32+0x34>)
 80068c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068c4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80068c8:	8003      	strh	r3, [r0, #0]
 80068ca:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80068ce:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 80068d2:	4b07      	ldr	r3, [pc, #28]	; (80068f0 <arm_rfft_2048_fast_init_f32+0x38>)
 80068d4:	8205      	strh	r5, [r0, #16]
 80068d6:	8184      	strh	r4, [r0, #12]
 80068d8:	6143      	str	r3, [r0, #20]
 80068da:	bc30      	pop	{r4, r5}
 80068dc:	2000      	movs	r0, #0
 80068de:	4770      	bx	lr
 80068e0:	f04f 30ff 	mov.w	r0, #4294967295
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	08007b84 	.word	0x08007b84
 80068ec:	0800b06c 	.word	0x0800b06c
 80068f0:	08013dec 	.word	0x08013dec

080068f4 <arm_rfft_4096_fast_init_f32>:
 80068f4:	b190      	cbz	r0, 800691c <arm_rfft_4096_fast_init_f32+0x28>
 80068f6:	b430      	push	{r4, r5}
 80068f8:	490a      	ldr	r1, [pc, #40]	; (8006924 <arm_rfft_4096_fast_init_f32+0x30>)
 80068fa:	4a0b      	ldr	r2, [pc, #44]	; (8006928 <arm_rfft_4096_fast_init_f32+0x34>)
 80068fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006900:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006904:	8003      	strh	r3, [r0, #0]
 8006906:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800690a:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800690e:	4b07      	ldr	r3, [pc, #28]	; (800692c <arm_rfft_4096_fast_init_f32+0x38>)
 8006910:	8205      	strh	r5, [r0, #16]
 8006912:	8184      	strh	r4, [r0, #12]
 8006914:	6143      	str	r3, [r0, #20]
 8006916:	bc30      	pop	{r4, r5}
 8006918:	2000      	movs	r0, #0
 800691a:	4770      	bx	lr
 800691c:	f04f 30ff 	mov.w	r0, #4294967295
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	08008b5c 	.word	0x08008b5c
 8006928:	0800d4ec 	.word	0x0800d4ec
 800692c:	0801626c 	.word	0x0801626c

08006930 <arm_rfft_fast_init_f32>:
 8006930:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006934:	d01f      	beq.n	8006976 <arm_rfft_fast_init_f32+0x46>
 8006936:	d90b      	bls.n	8006950 <arm_rfft_fast_init_f32+0x20>
 8006938:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800693c:	d019      	beq.n	8006972 <arm_rfft_fast_init_f32+0x42>
 800693e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8006942:	d012      	beq.n	800696a <arm_rfft_fast_init_f32+0x3a>
 8006944:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006948:	d00d      	beq.n	8006966 <arm_rfft_fast_init_f32+0x36>
 800694a:	f04f 30ff 	mov.w	r0, #4294967295
 800694e:	4770      	bx	lr
 8006950:	2940      	cmp	r1, #64	; 0x40
 8006952:	d00c      	beq.n	800696e <arm_rfft_fast_init_f32+0x3e>
 8006954:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006958:	d003      	beq.n	8006962 <arm_rfft_fast_init_f32+0x32>
 800695a:	2920      	cmp	r1, #32
 800695c:	d1f5      	bne.n	800694a <arm_rfft_fast_init_f32+0x1a>
 800695e:	4b07      	ldr	r3, [pc, #28]	; (800697c <arm_rfft_fast_init_f32+0x4c>)
 8006960:	4718      	bx	r3
 8006962:	4b07      	ldr	r3, [pc, #28]	; (8006980 <arm_rfft_fast_init_f32+0x50>)
 8006964:	4718      	bx	r3
 8006966:	4b07      	ldr	r3, [pc, #28]	; (8006984 <arm_rfft_fast_init_f32+0x54>)
 8006968:	4718      	bx	r3
 800696a:	4b07      	ldr	r3, [pc, #28]	; (8006988 <arm_rfft_fast_init_f32+0x58>)
 800696c:	4718      	bx	r3
 800696e:	4b07      	ldr	r3, [pc, #28]	; (800698c <arm_rfft_fast_init_f32+0x5c>)
 8006970:	e7f6      	b.n	8006960 <arm_rfft_fast_init_f32+0x30>
 8006972:	4b07      	ldr	r3, [pc, #28]	; (8006990 <arm_rfft_fast_init_f32+0x60>)
 8006974:	e7f4      	b.n	8006960 <arm_rfft_fast_init_f32+0x30>
 8006976:	4b07      	ldr	r3, [pc, #28]	; (8006994 <arm_rfft_fast_init_f32+0x64>)
 8006978:	e7f2      	b.n	8006960 <arm_rfft_fast_init_f32+0x30>
 800697a:	bf00      	nop
 800697c:	080067a1 	.word	0x080067a1
 8006980:	08006809 	.word	0x08006809
 8006984:	0800687d 	.word	0x0800687d
 8006988:	080068f5 	.word	0x080068f5
 800698c:	080067d5 	.word	0x080067d5
 8006990:	080068b9 	.word	0x080068b9
 8006994:	08006841 	.word	0x08006841

08006998 <stage_rfft_f32>:
 8006998:	b410      	push	{r4}
 800699a:	edd1 7a00 	vldr	s15, [r1]
 800699e:	ed91 7a01 	vldr	s14, [r1, #4]
 80069a2:	8804      	ldrh	r4, [r0, #0]
 80069a4:	6940      	ldr	r0, [r0, #20]
 80069a6:	ee37 7a07 	vadd.f32	s14, s14, s14
 80069aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80069ae:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 80069b2:	ee77 6a87 	vadd.f32	s13, s15, s14
 80069b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069ba:	3c01      	subs	r4, #1
 80069bc:	ee26 7a84 	vmul.f32	s14, s13, s8
 80069c0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80069c4:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 80069c8:	ed82 7a00 	vstr	s14, [r2]
 80069cc:	edc2 7a01 	vstr	s15, [r2, #4]
 80069d0:	3010      	adds	r0, #16
 80069d2:	3210      	adds	r2, #16
 80069d4:	3b08      	subs	r3, #8
 80069d6:	3110      	adds	r1, #16
 80069d8:	ed11 5a02 	vldr	s10, [r1, #-8]
 80069dc:	ed93 7a02 	vldr	s14, [r3, #8]
 80069e0:	ed50 6a02 	vldr	s13, [r0, #-8]
 80069e4:	edd3 4a03 	vldr	s9, [r3, #12]
 80069e8:	ed51 7a01 	vldr	s15, [r1, #-4]
 80069ec:	ed10 6a01 	vldr	s12, [r0, #-4]
 80069f0:	ee77 5a45 	vsub.f32	s11, s14, s10
 80069f4:	ee37 7a05 	vadd.f32	s14, s14, s10
 80069f8:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80069fc:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8006a00:	ee66 5a25 	vmul.f32	s11, s12, s11
 8006a04:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006a08:	ee37 7a23 	vadd.f32	s14, s14, s7
 8006a0c:	ee66 6a85 	vmul.f32	s13, s13, s10
 8006a10:	ee26 6a05 	vmul.f32	s12, s12, s10
 8006a14:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006a18:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006a1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a20:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006a24:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006a28:	3c01      	subs	r4, #1
 8006a2a:	ed02 7a02 	vstr	s14, [r2, #-8]
 8006a2e:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006a32:	f1a3 0308 	sub.w	r3, r3, #8
 8006a36:	f101 0108 	add.w	r1, r1, #8
 8006a3a:	f100 0008 	add.w	r0, r0, #8
 8006a3e:	f102 0208 	add.w	r2, r2, #8
 8006a42:	d1c9      	bne.n	80069d8 <stage_rfft_f32+0x40>
 8006a44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop

08006a4c <merge_rfft_f32>:
 8006a4c:	b410      	push	{r4}
 8006a4e:	edd1 7a00 	vldr	s15, [r1]
 8006a52:	edd1 6a01 	vldr	s13, [r1, #4]
 8006a56:	8804      	ldrh	r4, [r0, #0]
 8006a58:	6940      	ldr	r0, [r0, #20]
 8006a5a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006a5e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a62:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8006a66:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006a6a:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006a6e:	3c01      	subs	r4, #1
 8006a70:	ed82 7a00 	vstr	s14, [r2]
 8006a74:	edc2 7a01 	vstr	s15, [r2, #4]
 8006a78:	b3dc      	cbz	r4, 8006af2 <merge_rfft_f32+0xa6>
 8006a7a:	00e3      	lsls	r3, r4, #3
 8006a7c:	3b08      	subs	r3, #8
 8006a7e:	440b      	add	r3, r1
 8006a80:	3010      	adds	r0, #16
 8006a82:	3210      	adds	r2, #16
 8006a84:	3110      	adds	r1, #16
 8006a86:	ed11 5a02 	vldr	s10, [r1, #-8]
 8006a8a:	ed93 7a02 	vldr	s14, [r3, #8]
 8006a8e:	ed50 6a02 	vldr	s13, [r0, #-8]
 8006a92:	edd3 4a03 	vldr	s9, [r3, #12]
 8006a96:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006a9a:	ed10 6a01 	vldr	s12, [r0, #-4]
 8006a9e:	ee75 5a47 	vsub.f32	s11, s10, s14
 8006aa2:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006aa6:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8006aaa:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8006aae:	ee66 5a25 	vmul.f32	s11, s12, s11
 8006ab2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006ab6:	ee37 7a63 	vsub.f32	s14, s14, s7
 8006aba:	ee66 6a85 	vmul.f32	s13, s13, s10
 8006abe:	ee26 6a05 	vmul.f32	s12, s12, s10
 8006ac2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006ac6:	ee37 7a46 	vsub.f32	s14, s14, s12
 8006aca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ace:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006ad2:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006ad6:	3c01      	subs	r4, #1
 8006ad8:	ed02 7a02 	vstr	s14, [r2, #-8]
 8006adc:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006ae0:	f1a3 0308 	sub.w	r3, r3, #8
 8006ae4:	f101 0108 	add.w	r1, r1, #8
 8006ae8:	f100 0008 	add.w	r0, r0, #8
 8006aec:	f102 0208 	add.w	r2, r2, #8
 8006af0:	d1c9      	bne.n	8006a86 <merge_rfft_f32+0x3a>
 8006af2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <arm_rfft_fast_f32>:
 8006af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006afc:	8a05      	ldrh	r5, [r0, #16]
 8006afe:	086d      	lsrs	r5, r5, #1
 8006b00:	8005      	strh	r5, [r0, #0]
 8006b02:	4604      	mov	r4, r0
 8006b04:	4616      	mov	r6, r2
 8006b06:	461d      	mov	r5, r3
 8006b08:	b14b      	cbz	r3, 8006b1e <arm_rfft_fast_f32+0x26>
 8006b0a:	f7ff ff9f 	bl	8006a4c <merge_rfft_f32>
 8006b0e:	462a      	mov	r2, r5
 8006b10:	4631      	mov	r1, r6
 8006b12:	4620      	mov	r0, r4
 8006b14:	2301      	movs	r3, #1
 8006b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b1a:	f000 bb33 	b.w	8007184 <arm_cfft_f32>
 8006b1e:	460f      	mov	r7, r1
 8006b20:	461a      	mov	r2, r3
 8006b22:	2301      	movs	r3, #1
 8006b24:	f000 fb2e 	bl	8007184 <arm_cfft_f32>
 8006b28:	4632      	mov	r2, r6
 8006b2a:	4639      	mov	r1, r7
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b32:	f7ff bf31 	b.w	8006998 <stage_rfft_f32>
 8006b36:	bf00      	nop

08006b38 <arm_cfft_radix8by2_f32>:
 8006b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b3c:	ed2d 8b08 	vpush	{d8-d11}
 8006b40:	4607      	mov	r7, r0
 8006b42:	4608      	mov	r0, r1
 8006b44:	f8b7 c000 	ldrh.w	ip, [r7]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8006b4e:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8006b52:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006b56:	f000 80b0 	beq.w	8006cba <arm_cfft_radix8by2_f32+0x182>
 8006b5a:	008c      	lsls	r4, r1, #2
 8006b5c:	3410      	adds	r4, #16
 8006b5e:	f100 0310 	add.w	r3, r0, #16
 8006b62:	1906      	adds	r6, r0, r4
 8006b64:	3210      	adds	r2, #16
 8006b66:	4444      	add	r4, r8
 8006b68:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8006b6c:	f108 0510 	add.w	r5, r8, #16
 8006b70:	ed15 2a04 	vldr	s4, [r5, #-16]
 8006b74:	ed55 2a03 	vldr	s5, [r5, #-12]
 8006b78:	ed54 4a04 	vldr	s9, [r4, #-16]
 8006b7c:	ed14 4a03 	vldr	s8, [r4, #-12]
 8006b80:	ed14 6a02 	vldr	s12, [r4, #-8]
 8006b84:	ed54 5a01 	vldr	s11, [r4, #-4]
 8006b88:	ed53 3a04 	vldr	s7, [r3, #-16]
 8006b8c:	ed15 0a02 	vldr	s0, [r5, #-8]
 8006b90:	ed55 0a01 	vldr	s1, [r5, #-4]
 8006b94:	ed56 6a04 	vldr	s13, [r6, #-16]
 8006b98:	ed16 3a03 	vldr	s6, [r6, #-12]
 8006b9c:	ed13 7a03 	vldr	s14, [r3, #-12]
 8006ba0:	ed13 5a02 	vldr	s10, [r3, #-8]
 8006ba4:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006ba8:	ed16 1a02 	vldr	s2, [r6, #-8]
 8006bac:	ed56 1a01 	vldr	s3, [r6, #-4]
 8006bb0:	ee73 ba82 	vadd.f32	s23, s7, s4
 8006bb4:	ee37 ba22 	vadd.f32	s22, s14, s5
 8006bb8:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8006bbc:	ee33 9a04 	vadd.f32	s18, s6, s8
 8006bc0:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8006bc4:	ee75 aa00 	vadd.f32	s21, s10, s0
 8006bc8:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8006bcc:	ee71 8a06 	vadd.f32	s17, s2, s12
 8006bd0:	ed43 ba04 	vstr	s23, [r3, #-16]
 8006bd4:	ed03 ba03 	vstr	s22, [r3, #-12]
 8006bd8:	ed43 aa02 	vstr	s21, [r3, #-8]
 8006bdc:	ed03 aa01 	vstr	s20, [r3, #-4]
 8006be0:	ed06 8a01 	vstr	s16, [r6, #-4]
 8006be4:	ed46 9a04 	vstr	s19, [r6, #-16]
 8006be8:	ed06 9a03 	vstr	s18, [r6, #-12]
 8006bec:	ed46 8a02 	vstr	s17, [r6, #-8]
 8006bf0:	ee37 7a62 	vsub.f32	s14, s14, s5
 8006bf4:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8006bf8:	ee34 4a43 	vsub.f32	s8, s8, s6
 8006bfc:	ed52 6a03 	vldr	s13, [r2, #-12]
 8006c00:	ed12 3a04 	vldr	s6, [r2, #-16]
 8006c04:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8006c08:	ee27 8a26 	vmul.f32	s16, s14, s13
 8006c0c:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8006c10:	ee23 2a83 	vmul.f32	s4, s7, s6
 8006c14:	ee64 4a83 	vmul.f32	s9, s9, s6
 8006c18:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8006c1c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8006c20:	ee64 6a26 	vmul.f32	s13, s8, s13
 8006c24:	ee24 4a03 	vmul.f32	s8, s8, s6
 8006c28:	ee37 7a63 	vsub.f32	s14, s14, s7
 8006c2c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006c30:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8006c34:	ee32 3a08 	vadd.f32	s6, s4, s16
 8006c38:	ed05 7a03 	vstr	s14, [r5, #-12]
 8006c3c:	ed05 3a04 	vstr	s6, [r5, #-16]
 8006c40:	ed04 4a04 	vstr	s8, [r4, #-16]
 8006c44:	ed44 6a03 	vstr	s13, [r4, #-12]
 8006c48:	ed12 7a01 	vldr	s14, [r2, #-4]
 8006c4c:	ee76 6a41 	vsub.f32	s13, s12, s2
 8006c50:	ee35 5a40 	vsub.f32	s10, s10, s0
 8006c54:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8006c58:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006c5c:	ed52 5a02 	vldr	s11, [r2, #-8]
 8006c60:	ee67 3a87 	vmul.f32	s7, s15, s14
 8006c64:	ee66 4a87 	vmul.f32	s9, s13, s14
 8006c68:	ee25 4a25 	vmul.f32	s8, s10, s11
 8006c6c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006c70:	ee25 5a07 	vmul.f32	s10, s10, s14
 8006c74:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8006c78:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006c7c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8006c80:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8006c84:	ee74 5a23 	vadd.f32	s11, s8, s7
 8006c88:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8006c8c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006c90:	3310      	adds	r3, #16
 8006c92:	4563      	cmp	r3, ip
 8006c94:	ed45 5a02 	vstr	s11, [r5, #-8]
 8006c98:	f106 0610 	add.w	r6, r6, #16
 8006c9c:	ed45 7a01 	vstr	s15, [r5, #-4]
 8006ca0:	f102 0210 	add.w	r2, r2, #16
 8006ca4:	ed04 6a02 	vstr	s12, [r4, #-8]
 8006ca8:	ed04 7a01 	vstr	s14, [r4, #-4]
 8006cac:	f105 0510 	add.w	r5, r5, #16
 8006cb0:	f104 0410 	add.w	r4, r4, #16
 8006cb4:	f47f af5c 	bne.w	8006b70 <arm_cfft_radix8by2_f32+0x38>
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	b28c      	uxth	r4, r1
 8006cbc:	4621      	mov	r1, r4
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	f000 fc1c 	bl	80074fc <arm_radix8_butterfly_f32>
 8006cc4:	ecbd 8b08 	vpop	{d8-d11}
 8006cc8:	4621      	mov	r1, r4
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	4640      	mov	r0, r8
 8006cce:	2302      	movs	r3, #2
 8006cd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd4:	f000 bc12 	b.w	80074fc <arm_radix8_butterfly_f32>

08006cd8 <arm_cfft_radix8by4_f32>:
 8006cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cdc:	ed2d 8b0a 	vpush	{d8-d12}
 8006ce0:	b08d      	sub	sp, #52	; 0x34
 8006ce2:	460d      	mov	r5, r1
 8006ce4:	910b      	str	r1, [sp, #44]	; 0x2c
 8006ce6:	8801      	ldrh	r1, [r0, #0]
 8006ce8:	6842      	ldr	r2, [r0, #4]
 8006cea:	900a      	str	r0, [sp, #40]	; 0x28
 8006cec:	0849      	lsrs	r1, r1, #1
 8006cee:	008b      	lsls	r3, r1, #2
 8006cf0:	18ee      	adds	r6, r5, r3
 8006cf2:	18f0      	adds	r0, r6, r3
 8006cf4:	edd0 5a00 	vldr	s11, [r0]
 8006cf8:	edd5 7a00 	vldr	s15, [r5]
 8006cfc:	ed96 7a00 	vldr	s14, [r6]
 8006d00:	edd0 3a01 	vldr	s7, [r0, #4]
 8006d04:	ed96 4a01 	vldr	s8, [r6, #4]
 8006d08:	ed95 5a01 	vldr	s10, [r5, #4]
 8006d0c:	9008      	str	r0, [sp, #32]
 8006d0e:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8006d12:	18c7      	adds	r7, r0, r3
 8006d14:	edd7 4a00 	vldr	s9, [r7]
 8006d18:	ed97 3a01 	vldr	s6, [r7, #4]
 8006d1c:	9701      	str	r7, [sp, #4]
 8006d1e:	ee77 6a06 	vadd.f32	s13, s14, s12
 8006d22:	462c      	mov	r4, r5
 8006d24:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006d28:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006d2c:	ee16 ca90 	vmov	ip, s13
 8006d30:	f844 cb08 	str.w	ip, [r4], #8
 8006d34:	ee75 6a23 	vadd.f32	s13, s10, s7
 8006d38:	edd6 5a01 	vldr	s11, [r6, #4]
 8006d3c:	edd7 2a01 	vldr	s5, [r7, #4]
 8006d40:	9404      	str	r4, [sp, #16]
 8006d42:	ee35 5a63 	vsub.f32	s10, s10, s7
 8006d46:	ee74 3a27 	vadd.f32	s7, s8, s15
 8006d4a:	ee36 6a47 	vsub.f32	s12, s12, s14
 8006d4e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8006d52:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8006d56:	0849      	lsrs	r1, r1, #1
 8006d58:	f102 0e08 	add.w	lr, r2, #8
 8006d5c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8006d60:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8006d64:	9109      	str	r1, [sp, #36]	; 0x24
 8006d66:	ee35 4a47 	vsub.f32	s8, s10, s14
 8006d6a:	f1a1 0902 	sub.w	r9, r1, #2
 8006d6e:	f8cd e00c 	str.w	lr, [sp, #12]
 8006d72:	4631      	mov	r1, r6
 8006d74:	ee13 ea90 	vmov	lr, s7
 8006d78:	ee36 6a64 	vsub.f32	s12, s12, s9
 8006d7c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8006d80:	4604      	mov	r4, r0
 8006d82:	edc5 5a01 	vstr	s11, [r5, #4]
 8006d86:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006d8a:	f841 eb08 	str.w	lr, [r1], #8
 8006d8e:	ee34 5a24 	vadd.f32	s10, s8, s9
 8006d92:	ee16 ea10 	vmov	lr, s12
 8006d96:	ed86 5a01 	vstr	s10, [r6, #4]
 8006d9a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8006d9e:	f844 eb08 	str.w	lr, [r4], #8
 8006da2:	ee77 7a83 	vadd.f32	s15, s15, s6
 8006da6:	edc0 6a01 	vstr	s13, [r0, #4]
 8006daa:	9405      	str	r4, [sp, #20]
 8006dac:	4604      	mov	r4, r0
 8006dae:	ee17 0a90 	vmov	r0, s15
 8006db2:	9106      	str	r1, [sp, #24]
 8006db4:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006db8:	f102 0110 	add.w	r1, r2, #16
 8006dbc:	46bc      	mov	ip, r7
 8006dbe:	9100      	str	r1, [sp, #0]
 8006dc0:	f847 0b08 	str.w	r0, [r7], #8
 8006dc4:	f102 0118 	add.w	r1, r2, #24
 8006dc8:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8006dcc:	9102      	str	r1, [sp, #8]
 8006dce:	ed8c 7a01 	vstr	s14, [ip, #4]
 8006dd2:	9007      	str	r0, [sp, #28]
 8006dd4:	f000 8134 	beq.w	8007040 <arm_cfft_radix8by4_f32+0x368>
 8006dd8:	f102 0920 	add.w	r9, r2, #32
 8006ddc:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8006de0:	9a01      	ldr	r2, [sp, #4]
 8006de2:	f8dd a000 	ldr.w	sl, [sp]
 8006de6:	3b0c      	subs	r3, #12
 8006de8:	4683      	mov	fp, r0
 8006dea:	4463      	add	r3, ip
 8006dec:	f105 0e10 	add.w	lr, r5, #16
 8006df0:	f1a4 010c 	sub.w	r1, r4, #12
 8006df4:	f104 0510 	add.w	r5, r4, #16
 8006df8:	f1a6 0c0c 	sub.w	ip, r6, #12
 8006dfc:	f1a2 040c 	sub.w	r4, r2, #12
 8006e00:	f106 0010 	add.w	r0, r6, #16
 8006e04:	3210      	adds	r2, #16
 8006e06:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8006e0a:	ed55 5a02 	vldr	s11, [r5, #-8]
 8006e0e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8006e12:	ed52 1a02 	vldr	s3, [r2, #-8]
 8006e16:	ed55 6a01 	vldr	s13, [r5, #-4]
 8006e1a:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8006e1e:	ed12 1a01 	vldr	s2, [r2, #-4]
 8006e22:	ed10 8a01 	vldr	s16, [r0, #-4]
 8006e26:	ee35 4a25 	vadd.f32	s8, s10, s11
 8006e2a:	ee30 6a26 	vadd.f32	s12, s0, s13
 8006e2e:	ee37 7a84 	vadd.f32	s14, s15, s8
 8006e32:	ee30 0a66 	vsub.f32	s0, s0, s13
 8006e36:	ee37 7a21 	vadd.f32	s14, s14, s3
 8006e3a:	ee75 5a65 	vsub.f32	s11, s10, s11
 8006e3e:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8006e42:	ed10 7a01 	vldr	s14, [r0, #-4]
 8006e46:	ed52 6a01 	vldr	s13, [r2, #-4]
 8006e4a:	ee36 7a07 	vadd.f32	s14, s12, s14
 8006e4e:	ee78 aa25 	vadd.f32	s21, s16, s11
 8006e52:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006e56:	ee70 3a67 	vsub.f32	s7, s0, s15
 8006e5a:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8006e5e:	ed94 7a02 	vldr	s14, [r4, #8]
 8006e62:	ed9c 2a02 	vldr	s4, [ip, #8]
 8006e66:	ed91 ba02 	vldr	s22, [r1, #8]
 8006e6a:	edd3 9a02 	vldr	s19, [r3, #8]
 8006e6e:	edd4 2a01 	vldr	s5, [r4, #4]
 8006e72:	ed9c 9a01 	vldr	s18, [ip, #4]
 8006e76:	ed93 5a01 	vldr	s10, [r3, #4]
 8006e7a:	edd1 0a01 	vldr	s1, [r1, #4]
 8006e7e:	ee72 6a07 	vadd.f32	s13, s4, s14
 8006e82:	ee32 2a47 	vsub.f32	s4, s4, s14
 8006e86:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8006e8a:	ee79 4a22 	vadd.f32	s9, s18, s5
 8006e8e:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8006e92:	ee79 2a62 	vsub.f32	s5, s18, s5
 8006e96:	ed8c 7a02 	vstr	s14, [ip, #8]
 8006e9a:	ed91 7a01 	vldr	s14, [r1, #4]
 8006e9e:	edd3 8a01 	vldr	s17, [r3, #4]
 8006ea2:	ee34 7a87 	vadd.f32	s14, s9, s14
 8006ea6:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8006eaa:	ee37 7a28 	vadd.f32	s14, s14, s17
 8006eae:	ee32 9a60 	vsub.f32	s18, s4, s1
 8006eb2:	ed8c 7a01 	vstr	s14, [ip, #4]
 8006eb6:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8006eba:	ed1a aa02 	vldr	s20, [sl, #-8]
 8006ebe:	ee73 8a22 	vadd.f32	s17, s6, s5
 8006ec2:	ee39 9a05 	vadd.f32	s18, s18, s10
 8006ec6:	ee7a aac1 	vsub.f32	s21, s21, s2
 8006eca:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8006ece:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8006ed2:	ee69 ba07 	vmul.f32	s23, s18, s14
 8006ed6:	ee6a aa87 	vmul.f32	s21, s21, s14
 8006eda:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8006ede:	ee63 ca87 	vmul.f32	s25, s7, s14
 8006ee2:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8006ee6:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8006eea:	ee68 8a87 	vmul.f32	s17, s17, s14
 8006eee:	ee73 3aea 	vsub.f32	s7, s7, s21
 8006ef2:	ee78 8a89 	vadd.f32	s17, s17, s18
 8006ef6:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8006efa:	ee3b aaca 	vsub.f32	s20, s23, s20
 8006efe:	ee34 4a67 	vsub.f32	s8, s8, s15
 8006f02:	ee76 6acb 	vsub.f32	s13, s13, s22
 8006f06:	ee36 6a48 	vsub.f32	s12, s12, s16
 8006f0a:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8006f0e:	ed00 7a02 	vstr	s14, [r0, #-8]
 8006f12:	ed40 3a01 	vstr	s7, [r0, #-4]
 8006f16:	edc1 8a01 	vstr	s17, [r1, #4]
 8006f1a:	ed81 aa02 	vstr	s20, [r1, #8]
 8006f1e:	ed59 3a04 	vldr	s7, [r9, #-16]
 8006f22:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8006f26:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8006f2a:	ed59 6a03 	vldr	s13, [r9, #-12]
 8006f2e:	ee34 4a61 	vsub.f32	s8, s8, s3
 8006f32:	ee36 6a41 	vsub.f32	s12, s12, s2
 8006f36:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8006f3a:	ee66 9a26 	vmul.f32	s19, s12, s13
 8006f3e:	ee24 9a23 	vmul.f32	s18, s8, s7
 8006f42:	ee26 6a23 	vmul.f32	s12, s12, s7
 8006f46:	ee24 4a26 	vmul.f32	s8, s8, s13
 8006f4a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006f4e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8006f52:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8006f56:	ee36 6a44 	vsub.f32	s12, s12, s8
 8006f5a:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006f5e:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8006f62:	ee79 3a29 	vadd.f32	s7, s18, s19
 8006f66:	ee75 6a60 	vsub.f32	s13, s10, s1
 8006f6a:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8006f6e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006f72:	ed45 3a02 	vstr	s7, [r5, #-8]
 8006f76:	ed05 6a01 	vstr	s12, [r5, #-4]
 8006f7a:	ed84 7a01 	vstr	s14, [r4, #4]
 8006f7e:	ed84 4a02 	vstr	s8, [r4, #8]
 8006f82:	ee35 6a81 	vadd.f32	s12, s11, s2
 8006f86:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8006f8a:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 8006f8e:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 8006f92:	ee33 3a62 	vsub.f32	s6, s6, s5
 8006f96:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8006f9a:	ee67 2a26 	vmul.f32	s5, s14, s13
 8006f9e:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8006fa2:	ee26 5a25 	vmul.f32	s10, s12, s11
 8006fa6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006faa:	ee26 6a26 	vmul.f32	s12, s12, s13
 8006fae:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006fb2:	ee63 6a26 	vmul.f32	s13, s6, s13
 8006fb6:	ee23 3a25 	vmul.f32	s6, s6, s11
 8006fba:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006fbe:	ee75 5a24 	vadd.f32	s11, s10, s9
 8006fc2:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8006fc6:	ee36 7a87 	vadd.f32	s14, s13, s14
 8006fca:	f1bb 0b01 	subs.w	fp, fp, #1
 8006fce:	ed42 5a02 	vstr	s11, [r2, #-8]
 8006fd2:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006fd6:	f10e 0e08 	add.w	lr, lr, #8
 8006fda:	ed83 3a02 	vstr	s6, [r3, #8]
 8006fde:	ed83 7a01 	vstr	s14, [r3, #4]
 8006fe2:	f1ac 0c08 	sub.w	ip, ip, #8
 8006fe6:	f10a 0a08 	add.w	sl, sl, #8
 8006fea:	f100 0008 	add.w	r0, r0, #8
 8006fee:	f1a1 0108 	sub.w	r1, r1, #8
 8006ff2:	f109 0910 	add.w	r9, r9, #16
 8006ff6:	f105 0508 	add.w	r5, r5, #8
 8006ffa:	f1a4 0408 	sub.w	r4, r4, #8
 8006ffe:	f108 0818 	add.w	r8, r8, #24
 8007002:	f102 0208 	add.w	r2, r2, #8
 8007006:	f1a3 0308 	sub.w	r3, r3, #8
 800700a:	f47f aefc 	bne.w	8006e06 <arm_cfft_radix8by4_f32+0x12e>
 800700e:	9907      	ldr	r1, [sp, #28]
 8007010:	9800      	ldr	r0, [sp, #0]
 8007012:	00cb      	lsls	r3, r1, #3
 8007014:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8007018:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800701c:	9100      	str	r1, [sp, #0]
 800701e:	9904      	ldr	r1, [sp, #16]
 8007020:	4419      	add	r1, r3
 8007022:	9104      	str	r1, [sp, #16]
 8007024:	9903      	ldr	r1, [sp, #12]
 8007026:	4419      	add	r1, r3
 8007028:	9103      	str	r1, [sp, #12]
 800702a:	9906      	ldr	r1, [sp, #24]
 800702c:	4419      	add	r1, r3
 800702e:	9106      	str	r1, [sp, #24]
 8007030:	9905      	ldr	r1, [sp, #20]
 8007032:	441f      	add	r7, r3
 8007034:	4419      	add	r1, r3
 8007036:	9b02      	ldr	r3, [sp, #8]
 8007038:	9105      	str	r1, [sp, #20]
 800703a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800703e:	9302      	str	r3, [sp, #8]
 8007040:	9904      	ldr	r1, [sp, #16]
 8007042:	9805      	ldr	r0, [sp, #20]
 8007044:	ed91 4a00 	vldr	s8, [r1]
 8007048:	edd0 6a00 	vldr	s13, [r0]
 800704c:	9b06      	ldr	r3, [sp, #24]
 800704e:	ed97 3a00 	vldr	s6, [r7]
 8007052:	edd3 7a00 	vldr	s15, [r3]
 8007056:	edd0 4a01 	vldr	s9, [r0, #4]
 800705a:	edd1 3a01 	vldr	s7, [r1, #4]
 800705e:	ed97 2a01 	vldr	s4, [r7, #4]
 8007062:	ed93 7a01 	vldr	s14, [r3, #4]
 8007066:	9a03      	ldr	r2, [sp, #12]
 8007068:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800706c:	ee34 6a26 	vadd.f32	s12, s8, s13
 8007070:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8007074:	ee37 5a86 	vadd.f32	s10, s15, s12
 8007078:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800707c:	ee35 5a03 	vadd.f32	s10, s10, s6
 8007080:	ee74 6a66 	vsub.f32	s13, s8, s13
 8007084:	ed81 5a00 	vstr	s10, [r1]
 8007088:	ed93 5a01 	vldr	s10, [r3, #4]
 800708c:	edd7 4a01 	vldr	s9, [r7, #4]
 8007090:	ee35 5a85 	vadd.f32	s10, s11, s10
 8007094:	ee37 4a26 	vadd.f32	s8, s14, s13
 8007098:	ee35 5a24 	vadd.f32	s10, s10, s9
 800709c:	ee73 4ae7 	vsub.f32	s9, s7, s15
 80070a0:	ed81 5a01 	vstr	s10, [r1, #4]
 80070a4:	edd2 1a00 	vldr	s3, [r2]
 80070a8:	edd2 2a01 	vldr	s5, [r2, #4]
 80070ac:	ee34 5a83 	vadd.f32	s10, s9, s6
 80070b0:	ee34 4a42 	vsub.f32	s8, s8, s4
 80070b4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80070b8:	ee64 4a21 	vmul.f32	s9, s8, s3
 80070bc:	ee24 4a22 	vmul.f32	s8, s8, s5
 80070c0:	ee65 2a22 	vmul.f32	s5, s10, s5
 80070c4:	ee25 5a21 	vmul.f32	s10, s10, s3
 80070c8:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80070cc:	ee35 5a44 	vsub.f32	s10, s10, s8
 80070d0:	edc3 2a00 	vstr	s5, [r3]
 80070d4:	ed83 5a01 	vstr	s10, [r3, #4]
 80070d8:	ee75 5ac7 	vsub.f32	s11, s11, s14
 80070dc:	9b00      	ldr	r3, [sp, #0]
 80070de:	ee36 6a43 	vsub.f32	s12, s12, s6
 80070e2:	ed93 4a01 	vldr	s8, [r3, #4]
 80070e6:	ed93 5a00 	vldr	s10, [r3]
 80070ea:	9b02      	ldr	r3, [sp, #8]
 80070ec:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80070f0:	ee66 4a05 	vmul.f32	s9, s12, s10
 80070f4:	ee25 5a85 	vmul.f32	s10, s11, s10
 80070f8:	ee26 6a04 	vmul.f32	s12, s12, s8
 80070fc:	ee65 5a84 	vmul.f32	s11, s11, s8
 8007100:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007104:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8007108:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800710c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007110:	ed80 6a01 	vstr	s12, [r0, #4]
 8007114:	edc0 5a00 	vstr	s11, [r0]
 8007118:	edd3 5a01 	vldr	s11, [r3, #4]
 800711c:	edd3 6a00 	vldr	s13, [r3]
 8007120:	ee37 7a02 	vadd.f32	s14, s14, s4
 8007124:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8007128:	ee27 6a26 	vmul.f32	s12, s14, s13
 800712c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007130:	ee27 7a25 	vmul.f32	s14, s14, s11
 8007134:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007138:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800713c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8007140:	ed87 7a01 	vstr	s14, [r7, #4]
 8007144:	edc7 7a00 	vstr	s15, [r7]
 8007148:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800714c:	4621      	mov	r1, r4
 800714e:	686a      	ldr	r2, [r5, #4]
 8007150:	2304      	movs	r3, #4
 8007152:	f000 f9d3 	bl	80074fc <arm_radix8_butterfly_f32>
 8007156:	4630      	mov	r0, r6
 8007158:	4621      	mov	r1, r4
 800715a:	686a      	ldr	r2, [r5, #4]
 800715c:	2304      	movs	r3, #4
 800715e:	f000 f9cd 	bl	80074fc <arm_radix8_butterfly_f32>
 8007162:	9808      	ldr	r0, [sp, #32]
 8007164:	686a      	ldr	r2, [r5, #4]
 8007166:	4621      	mov	r1, r4
 8007168:	2304      	movs	r3, #4
 800716a:	f000 f9c7 	bl	80074fc <arm_radix8_butterfly_f32>
 800716e:	686a      	ldr	r2, [r5, #4]
 8007170:	9801      	ldr	r0, [sp, #4]
 8007172:	4621      	mov	r1, r4
 8007174:	2304      	movs	r3, #4
 8007176:	b00d      	add	sp, #52	; 0x34
 8007178:	ecbd 8b0a 	vpop	{d8-d12}
 800717c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007180:	f000 b9bc 	b.w	80074fc <arm_radix8_butterfly_f32>

08007184 <arm_cfft_f32>:
 8007184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007188:	2a01      	cmp	r2, #1
 800718a:	4606      	mov	r6, r0
 800718c:	4617      	mov	r7, r2
 800718e:	460c      	mov	r4, r1
 8007190:	4698      	mov	r8, r3
 8007192:	8805      	ldrh	r5, [r0, #0]
 8007194:	d056      	beq.n	8007244 <arm_cfft_f32+0xc0>
 8007196:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800719a:	d063      	beq.n	8007264 <arm_cfft_f32+0xe0>
 800719c:	d916      	bls.n	80071cc <arm_cfft_f32+0x48>
 800719e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80071a2:	d01a      	beq.n	80071da <arm_cfft_f32+0x56>
 80071a4:	d947      	bls.n	8007236 <arm_cfft_f32+0xb2>
 80071a6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80071aa:	d05b      	beq.n	8007264 <arm_cfft_f32+0xe0>
 80071ac:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80071b0:	d105      	bne.n	80071be <arm_cfft_f32+0x3a>
 80071b2:	2301      	movs	r3, #1
 80071b4:	6872      	ldr	r2, [r6, #4]
 80071b6:	4629      	mov	r1, r5
 80071b8:	4620      	mov	r0, r4
 80071ba:	f000 f99f 	bl	80074fc <arm_radix8_butterfly_f32>
 80071be:	f1b8 0f00 	cmp.w	r8, #0
 80071c2:	d111      	bne.n	80071e8 <arm_cfft_f32+0x64>
 80071c4:	2f01      	cmp	r7, #1
 80071c6:	d016      	beq.n	80071f6 <arm_cfft_f32+0x72>
 80071c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071cc:	2d20      	cmp	r5, #32
 80071ce:	d049      	beq.n	8007264 <arm_cfft_f32+0xe0>
 80071d0:	d935      	bls.n	800723e <arm_cfft_f32+0xba>
 80071d2:	2d40      	cmp	r5, #64	; 0x40
 80071d4:	d0ed      	beq.n	80071b2 <arm_cfft_f32+0x2e>
 80071d6:	2d80      	cmp	r5, #128	; 0x80
 80071d8:	d1f1      	bne.n	80071be <arm_cfft_f32+0x3a>
 80071da:	4621      	mov	r1, r4
 80071dc:	4630      	mov	r0, r6
 80071de:	f7ff fcab 	bl	8006b38 <arm_cfft_radix8by2_f32>
 80071e2:	f1b8 0f00 	cmp.w	r8, #0
 80071e6:	d0ed      	beq.n	80071c4 <arm_cfft_f32+0x40>
 80071e8:	68b2      	ldr	r2, [r6, #8]
 80071ea:	89b1      	ldrh	r1, [r6, #12]
 80071ec:	4620      	mov	r0, r4
 80071ee:	f000 f841 	bl	8007274 <arm_bitreversal_32>
 80071f2:	2f01      	cmp	r7, #1
 80071f4:	d1e8      	bne.n	80071c8 <arm_cfft_f32+0x44>
 80071f6:	ee07 5a90 	vmov	s15, r5
 80071fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007202:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007206:	2d00      	cmp	r5, #0
 8007208:	d0de      	beq.n	80071c8 <arm_cfft_f32+0x44>
 800720a:	f104 0108 	add.w	r1, r4, #8
 800720e:	2300      	movs	r3, #0
 8007210:	3301      	adds	r3, #1
 8007212:	429d      	cmp	r5, r3
 8007214:	f101 0108 	add.w	r1, r1, #8
 8007218:	ed11 7a04 	vldr	s14, [r1, #-16]
 800721c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8007220:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007224:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007228:	ed01 7a04 	vstr	s14, [r1, #-16]
 800722c:	ed41 7a03 	vstr	s15, [r1, #-12]
 8007230:	d1ee      	bne.n	8007210 <arm_cfft_f32+0x8c>
 8007232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007236:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800723a:	d0ba      	beq.n	80071b2 <arm_cfft_f32+0x2e>
 800723c:	e7bf      	b.n	80071be <arm_cfft_f32+0x3a>
 800723e:	2d10      	cmp	r5, #16
 8007240:	d0cb      	beq.n	80071da <arm_cfft_f32+0x56>
 8007242:	e7bc      	b.n	80071be <arm_cfft_f32+0x3a>
 8007244:	b19d      	cbz	r5, 800726e <arm_cfft_f32+0xea>
 8007246:	f101 030c 	add.w	r3, r1, #12
 800724a:	2200      	movs	r2, #0
 800724c:	ed53 7a02 	vldr	s15, [r3, #-8]
 8007250:	3201      	adds	r2, #1
 8007252:	eef1 7a67 	vneg.f32	s15, s15
 8007256:	4295      	cmp	r5, r2
 8007258:	ed43 7a02 	vstr	s15, [r3, #-8]
 800725c:	f103 0308 	add.w	r3, r3, #8
 8007260:	d1f4      	bne.n	800724c <arm_cfft_f32+0xc8>
 8007262:	e798      	b.n	8007196 <arm_cfft_f32+0x12>
 8007264:	4621      	mov	r1, r4
 8007266:	4630      	mov	r0, r6
 8007268:	f7ff fd36 	bl	8006cd8 <arm_cfft_radix8by4_f32>
 800726c:	e7a7      	b.n	80071be <arm_cfft_f32+0x3a>
 800726e:	2b00      	cmp	r3, #0
 8007270:	d0aa      	beq.n	80071c8 <arm_cfft_f32+0x44>
 8007272:	e7b9      	b.n	80071e8 <arm_cfft_f32+0x64>

08007274 <arm_bitreversal_32>:
 8007274:	b1e9      	cbz	r1, 80072b2 <arm_bitreversal_32+0x3e>
 8007276:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007278:	2500      	movs	r5, #0
 800727a:	f102 0e02 	add.w	lr, r2, #2
 800727e:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8007282:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8007286:	08a4      	lsrs	r4, r4, #2
 8007288:	089b      	lsrs	r3, r3, #2
 800728a:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800728e:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8007292:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8007296:	00a6      	lsls	r6, r4, #2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800729e:	3304      	adds	r3, #4
 80072a0:	1d34      	adds	r4, r6, #4
 80072a2:	3502      	adds	r5, #2
 80072a4:	58c6      	ldr	r6, [r0, r3]
 80072a6:	5907      	ldr	r7, [r0, r4]
 80072a8:	50c7      	str	r7, [r0, r3]
 80072aa:	428d      	cmp	r5, r1
 80072ac:	5106      	str	r6, [r0, r4]
 80072ae:	d3e6      	bcc.n	800727e <arm_bitreversal_32+0xa>
 80072b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072b2:	4770      	bx	lr

080072b4 <arm_cmplx_mag_f32>:
 80072b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072b8:	ed2d 8b02 	vpush	{d8}
 80072bc:	0897      	lsrs	r7, r2, #2
 80072be:	b084      	sub	sp, #16
 80072c0:	d077      	beq.n	80073b2 <arm_cmplx_mag_f32+0xfe>
 80072c2:	f04f 0800 	mov.w	r8, #0
 80072c6:	f100 0420 	add.w	r4, r0, #32
 80072ca:	f101 0510 	add.w	r5, r1, #16
 80072ce:	463e      	mov	r6, r7
 80072d0:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 80072d4:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 80072d8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80072dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80072e0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80072e4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80072e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ec:	f2c0 80c5 	blt.w	800747a <arm_cmplx_mag_f32+0x1c6>
 80072f0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80072f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072f8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80072fc:	f100 80cb 	bmi.w	8007496 <arm_cmplx_mag_f32+0x1e2>
 8007300:	ed05 8a04 	vstr	s16, [r5, #-16]
 8007304:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 8007308:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 800730c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007310:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007314:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007318:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800731c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007320:	f2c0 80a8 	blt.w	8007474 <arm_cmplx_mag_f32+0x1c0>
 8007324:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800732c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007330:	f100 80a8 	bmi.w	8007484 <arm_cmplx_mag_f32+0x1d0>
 8007334:	ed05 8a03 	vstr	s16, [r5, #-12]
 8007338:	ed14 0a04 	vldr	s0, [r4, #-16]
 800733c:	ed54 7a03 	vldr	s15, [r4, #-12]
 8007340:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007344:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007348:	ee30 0a27 	vadd.f32	s0, s0, s15
 800734c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007354:	f2c0 808b 	blt.w	800746e <arm_cmplx_mag_f32+0x1ba>
 8007358:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800735c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007360:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007364:	f100 80a9 	bmi.w	80074ba <arm_cmplx_mag_f32+0x206>
 8007368:	ed05 8a02 	vstr	s16, [r5, #-8]
 800736c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8007370:	ed54 7a01 	vldr	s15, [r4, #-4]
 8007374:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007378:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800737c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007380:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007388:	db6e      	blt.n	8007468 <arm_cmplx_mag_f32+0x1b4>
 800738a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800738e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007392:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007396:	f100 8087 	bmi.w	80074a8 <arm_cmplx_mag_f32+0x1f4>
 800739a:	ed05 8a01 	vstr	s16, [r5, #-4]
 800739e:	3e01      	subs	r6, #1
 80073a0:	f104 0420 	add.w	r4, r4, #32
 80073a4:	f105 0510 	add.w	r5, r5, #16
 80073a8:	d192      	bne.n	80072d0 <arm_cmplx_mag_f32+0x1c>
 80073aa:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 80073ae:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 80073b2:	f012 0203 	ands.w	r2, r2, #3
 80073b6:	d052      	beq.n	800745e <arm_cmplx_mag_f32+0x1aa>
 80073b8:	ed90 0a00 	vldr	s0, [r0]
 80073bc:	edd0 7a01 	vldr	s15, [r0, #4]
 80073c0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80073c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80073c8:	2300      	movs	r3, #0
 80073ca:	ee37 0a80 	vadd.f32	s0, s15, s0
 80073ce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80073d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d6:	bfb8      	it	lt
 80073d8:	600b      	strlt	r3, [r1, #0]
 80073da:	db08      	blt.n	80073ee <arm_cmplx_mag_f32+0x13a>
 80073dc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80073e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80073e8:	d479      	bmi.n	80074de <arm_cmplx_mag_f32+0x22a>
 80073ea:	ed81 8a00 	vstr	s16, [r1]
 80073ee:	3a01      	subs	r2, #1
 80073f0:	d035      	beq.n	800745e <arm_cmplx_mag_f32+0x1aa>
 80073f2:	ed90 0a02 	vldr	s0, [r0, #8]
 80073f6:	edd0 7a03 	vldr	s15, [r0, #12]
 80073fa:	ee20 0a00 	vmul.f32	s0, s0, s0
 80073fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007402:	2300      	movs	r3, #0
 8007404:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007408:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800740c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007410:	bfb8      	it	lt
 8007412:	604b      	strlt	r3, [r1, #4]
 8007414:	db08      	blt.n	8007428 <arm_cmplx_mag_f32+0x174>
 8007416:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800741a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800741e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007422:	d453      	bmi.n	80074cc <arm_cmplx_mag_f32+0x218>
 8007424:	ed81 8a01 	vstr	s16, [r1, #4]
 8007428:	2a01      	cmp	r2, #1
 800742a:	d018      	beq.n	800745e <arm_cmplx_mag_f32+0x1aa>
 800742c:	ed90 0a04 	vldr	s0, [r0, #16]
 8007430:	edd0 7a05 	vldr	s15, [r0, #20]
 8007434:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007438:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800743c:	2300      	movs	r3, #0
 800743e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007442:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800744a:	db19      	blt.n	8007480 <arm_cmplx_mag_f32+0x1cc>
 800744c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007454:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007458:	d44a      	bmi.n	80074f0 <arm_cmplx_mag_f32+0x23c>
 800745a:	ed81 8a02 	vstr	s16, [r1, #8]
 800745e:	b004      	add	sp, #16
 8007460:	ecbd 8b02 	vpop	{d8}
 8007464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007468:	f845 8c04 	str.w	r8, [r5, #-4]
 800746c:	e797      	b.n	800739e <arm_cmplx_mag_f32+0xea>
 800746e:	f845 8c08 	str.w	r8, [r5, #-8]
 8007472:	e77b      	b.n	800736c <arm_cmplx_mag_f32+0xb8>
 8007474:	f845 8c0c 	str.w	r8, [r5, #-12]
 8007478:	e75e      	b.n	8007338 <arm_cmplx_mag_f32+0x84>
 800747a:	f845 8c10 	str.w	r8, [r5, #-16]
 800747e:	e741      	b.n	8007304 <arm_cmplx_mag_f32+0x50>
 8007480:	608b      	str	r3, [r1, #8]
 8007482:	e7ec      	b.n	800745e <arm_cmplx_mag_f32+0x1aa>
 8007484:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8007488:	9001      	str	r0, [sp, #4]
 800748a:	f000 fb29 	bl	8007ae0 <sqrtf>
 800748e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8007492:	9801      	ldr	r0, [sp, #4]
 8007494:	e74e      	b.n	8007334 <arm_cmplx_mag_f32+0x80>
 8007496:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800749a:	9001      	str	r0, [sp, #4]
 800749c:	f000 fb20 	bl	8007ae0 <sqrtf>
 80074a0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80074a4:	9801      	ldr	r0, [sp, #4]
 80074a6:	e72b      	b.n	8007300 <arm_cmplx_mag_f32+0x4c>
 80074a8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80074ac:	9001      	str	r0, [sp, #4]
 80074ae:	f000 fb17 	bl	8007ae0 <sqrtf>
 80074b2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80074b6:	9801      	ldr	r0, [sp, #4]
 80074b8:	e76f      	b.n	800739a <arm_cmplx_mag_f32+0xe6>
 80074ba:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80074be:	9001      	str	r0, [sp, #4]
 80074c0:	f000 fb0e 	bl	8007ae0 <sqrtf>
 80074c4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80074c8:	9801      	ldr	r0, [sp, #4]
 80074ca:	e74d      	b.n	8007368 <arm_cmplx_mag_f32+0xb4>
 80074cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074d0:	9201      	str	r2, [sp, #4]
 80074d2:	f000 fb05 	bl	8007ae0 <sqrtf>
 80074d6:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80074da:	9903      	ldr	r1, [sp, #12]
 80074dc:	e7a2      	b.n	8007424 <arm_cmplx_mag_f32+0x170>
 80074de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074e2:	9201      	str	r2, [sp, #4]
 80074e4:	f000 fafc 	bl	8007ae0 <sqrtf>
 80074e8:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80074ec:	9903      	ldr	r1, [sp, #12]
 80074ee:	e77c      	b.n	80073ea <arm_cmplx_mag_f32+0x136>
 80074f0:	9101      	str	r1, [sp, #4]
 80074f2:	f000 faf5 	bl	8007ae0 <sqrtf>
 80074f6:	9901      	ldr	r1, [sp, #4]
 80074f8:	e7af      	b.n	800745a <arm_cmplx_mag_f32+0x1a6>
 80074fa:	bf00      	nop

080074fc <arm_radix8_butterfly_f32>:
 80074fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007500:	ed2d 8b10 	vpush	{d8-d15}
 8007504:	b095      	sub	sp, #84	; 0x54
 8007506:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800750a:	4603      	mov	r3, r0
 800750c:	3304      	adds	r3, #4
 800750e:	ed9f bab9 	vldr	s22, [pc, #740]	; 80077f4 <arm_radix8_butterfly_f32+0x2f8>
 8007512:	9012      	str	r0, [sp, #72]	; 0x48
 8007514:	468b      	mov	fp, r1
 8007516:	9313      	str	r3, [sp, #76]	; 0x4c
 8007518:	4689      	mov	r9, r1
 800751a:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800751e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007520:	960f      	str	r6, [sp, #60]	; 0x3c
 8007522:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8007526:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800752a:	eb03 0508 	add.w	r5, r3, r8
 800752e:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8007532:	eb05 040e 	add.w	r4, r5, lr
 8007536:	0137      	lsls	r7, r6, #4
 8007538:	eba6 030a 	sub.w	r3, r6, sl
 800753c:	eb04 000e 	add.w	r0, r4, lr
 8007540:	44b2      	add	sl, r6
 8007542:	1d3a      	adds	r2, r7, #4
 8007544:	9702      	str	r7, [sp, #8]
 8007546:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800754a:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800754e:	ebae 0c06 	sub.w	ip, lr, r6
 8007552:	9703      	str	r7, [sp, #12]
 8007554:	eb03 0708 	add.w	r7, r3, r8
 8007558:	9701      	str	r7, [sp, #4]
 800755a:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800755e:	9706      	str	r7, [sp, #24]
 8007560:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8007562:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8007566:	f10e 0104 	add.w	r1, lr, #4
 800756a:	4439      	add	r1, r7
 800756c:	443a      	add	r2, r7
 800756e:	0137      	lsls	r7, r6, #4
 8007570:	00f6      	lsls	r6, r6, #3
 8007572:	9704      	str	r7, [sp, #16]
 8007574:	9605      	str	r6, [sp, #20]
 8007576:	9f01      	ldr	r7, [sp, #4]
 8007578:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800757a:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800757e:	f04f 0c00 	mov.w	ip, #0
 8007582:	edd4 6a00 	vldr	s13, [r4]
 8007586:	edd7 1a00 	vldr	s3, [r7]
 800758a:	ed16 aa01 	vldr	s20, [r6, #-4]
 800758e:	edd5 5a00 	vldr	s11, [r5]
 8007592:	ed52 9a01 	vldr	s19, [r2, #-4]
 8007596:	ed90 6a00 	vldr	s12, [r0]
 800759a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800759e:	ed93 3a00 	vldr	s6, [r3]
 80075a2:	ee39 0a86 	vadd.f32	s0, s19, s12
 80075a6:	ee33 2a21 	vadd.f32	s4, s6, s3
 80075aa:	ee37 5aa6 	vadd.f32	s10, s15, s13
 80075ae:	ee7a 4a25 	vadd.f32	s9, s20, s11
 80075b2:	ee35 7a02 	vadd.f32	s14, s10, s4
 80075b6:	ee34 4a80 	vadd.f32	s8, s9, s0
 80075ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80075be:	ee74 6a07 	vadd.f32	s13, s8, s14
 80075c2:	ee34 4a47 	vsub.f32	s8, s8, s14
 80075c6:	ed46 6a01 	vstr	s13, [r6, #-4]
 80075ca:	ed85 4a00 	vstr	s8, [r5]
 80075ce:	edd1 6a00 	vldr	s13, [r1]
 80075d2:	ed94 9a01 	vldr	s18, [r4, #4]
 80075d6:	edd3 2a01 	vldr	s5, [r3, #4]
 80075da:	edd7 8a01 	vldr	s17, [r7, #4]
 80075de:	edd6 0a00 	vldr	s1, [r6]
 80075e2:	edd5 3a01 	vldr	s7, [r5, #4]
 80075e6:	ed90 8a01 	vldr	s16, [r0, #4]
 80075ea:	ed92 7a00 	vldr	s14, [r2]
 80075ee:	ee33 3a61 	vsub.f32	s6, s6, s3
 80075f2:	ee36 4ac9 	vsub.f32	s8, s13, s18
 80075f6:	ee72 aae8 	vsub.f32	s21, s5, s17
 80075fa:	ee77 1ac3 	vsub.f32	s3, s15, s6
 80075fe:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8007602:	ee77 7a83 	vadd.f32	s15, s15, s6
 8007606:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800760a:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800760e:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8007612:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8007616:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800761a:	ee77 0a08 	vadd.f32	s1, s14, s16
 800761e:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8007622:	ee37 7a48 	vsub.f32	s14, s14, s16
 8007626:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800762a:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800762e:	ee76 6a89 	vadd.f32	s13, s13, s18
 8007632:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8007636:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800763a:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800763e:	ee35 5a42 	vsub.f32	s10, s10, s4
 8007642:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8007646:	ee33 2a20 	vadd.f32	s4, s6, s1
 800764a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800764e:	ee33 3a60 	vsub.f32	s6, s6, s1
 8007652:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8007656:	ee77 0a01 	vadd.f32	s1, s14, s2
 800765a:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800765e:	ee37 7a41 	vsub.f32	s14, s14, s2
 8007662:	ee73 1a84 	vadd.f32	s3, s7, s8
 8007666:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800766a:	ee76 3a27 	vadd.f32	s7, s12, s15
 800766e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8007672:	ee32 8a00 	vadd.f32	s16, s4, s0
 8007676:	ee33 1a45 	vsub.f32	s2, s6, s10
 800767a:	ee32 2a40 	vsub.f32	s4, s4, s0
 800767e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8007682:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8007686:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800768a:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800768e:	ee34 6a67 	vsub.f32	s12, s8, s15
 8007692:	ee75 4a87 	vadd.f32	s9, s11, s14
 8007696:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800769a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800769e:	ee77 7a84 	vadd.f32	s15, s15, s8
 80076a2:	ee71 5ae3 	vsub.f32	s11, s3, s7
 80076a6:	44dc      	add	ip, fp
 80076a8:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80076ac:	45e1      	cmp	r9, ip
 80076ae:	ed86 8a00 	vstr	s16, [r6]
 80076b2:	ed85 2a01 	vstr	s4, [r5, #4]
 80076b6:	4456      	add	r6, sl
 80076b8:	ed02 0a01 	vstr	s0, [r2, #-4]
 80076bc:	4455      	add	r5, sl
 80076be:	edc0 6a00 	vstr	s13, [r0]
 80076c2:	ed82 1a00 	vstr	s2, [r2]
 80076c6:	ed80 5a01 	vstr	s10, [r0, #4]
 80076ca:	4452      	add	r2, sl
 80076cc:	ed01 3a01 	vstr	s6, [r1, #-4]
 80076d0:	4450      	add	r0, sl
 80076d2:	edc7 2a00 	vstr	s5, [r7]
 80076d6:	edc4 4a00 	vstr	s9, [r4]
 80076da:	ed83 7a00 	vstr	s14, [r3]
 80076de:	edc1 5a00 	vstr	s11, [r1]
 80076e2:	edc7 3a01 	vstr	s7, [r7, #4]
 80076e6:	4451      	add	r1, sl
 80076e8:	ed84 6a01 	vstr	s12, [r4, #4]
 80076ec:	4457      	add	r7, sl
 80076ee:	edc3 7a01 	vstr	s15, [r3, #4]
 80076f2:	4454      	add	r4, sl
 80076f4:	4453      	add	r3, sl
 80076f6:	f63f af44 	bhi.w	8007582 <arm_radix8_butterfly_f32+0x86>
 80076fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076fc:	2b07      	cmp	r3, #7
 80076fe:	f240 81b7 	bls.w	8007a70 <arm_radix8_butterfly_f32+0x574>
 8007702:	9b06      	ldr	r3, [sp, #24]
 8007704:	9903      	ldr	r1, [sp, #12]
 8007706:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007708:	9e05      	ldr	r6, [sp, #20]
 800770a:	9a04      	ldr	r2, [sp, #16]
 800770c:	f103 0c08 	add.w	ip, r3, #8
 8007710:	9b02      	ldr	r3, [sp, #8]
 8007712:	3108      	adds	r1, #8
 8007714:	f108 0808 	add.w	r8, r8, #8
 8007718:	1841      	adds	r1, r0, r1
 800771a:	3608      	adds	r6, #8
 800771c:	330c      	adds	r3, #12
 800771e:	4604      	mov	r4, r0
 8007720:	4444      	add	r4, r8
 8007722:	18c3      	adds	r3, r0, r3
 8007724:	9109      	str	r1, [sp, #36]	; 0x24
 8007726:	1981      	adds	r1, r0, r6
 8007728:	f10e 0e08 	add.w	lr, lr, #8
 800772c:	3208      	adds	r2, #8
 800772e:	940b      	str	r4, [sp, #44]	; 0x2c
 8007730:	9107      	str	r1, [sp, #28]
 8007732:	4604      	mov	r4, r0
 8007734:	4601      	mov	r1, r0
 8007736:	9304      	str	r3, [sp, #16]
 8007738:	f100 030c 	add.w	r3, r0, #12
 800773c:	4474      	add	r4, lr
 800773e:	f04f 0801 	mov.w	r8, #1
 8007742:	1882      	adds	r2, r0, r2
 8007744:	4461      	add	r1, ip
 8007746:	9305      	str	r3, [sp, #20]
 8007748:	464b      	mov	r3, r9
 800774a:	940a      	str	r4, [sp, #40]	; 0x28
 800774c:	46c1      	mov	r9, r8
 800774e:	9208      	str	r2, [sp, #32]
 8007750:	46d8      	mov	r8, fp
 8007752:	9106      	str	r1, [sp, #24]
 8007754:	f04f 0e00 	mov.w	lr, #0
 8007758:	469b      	mov	fp, r3
 800775a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800775c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800775e:	449e      	add	lr, r3
 8007760:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8007764:	441a      	add	r2, r3
 8007766:	920e      	str	r2, [sp, #56]	; 0x38
 8007768:	441a      	add	r2, r3
 800776a:	18d4      	adds	r4, r2, r3
 800776c:	18e5      	adds	r5, r4, r3
 800776e:	18ee      	adds	r6, r5, r3
 8007770:	18f7      	adds	r7, r6, r3
 8007772:	eb07 0c03 	add.w	ip, r7, r3
 8007776:	920d      	str	r2, [sp, #52]	; 0x34
 8007778:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800777c:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8007780:	910c      	str	r1, [sp, #48]	; 0x30
 8007782:	4419      	add	r1, r3
 8007784:	9103      	str	r1, [sp, #12]
 8007786:	4419      	add	r1, r3
 8007788:	18ca      	adds	r2, r1, r3
 800778a:	9202      	str	r2, [sp, #8]
 800778c:	441a      	add	r2, r3
 800778e:	18d0      	adds	r0, r2, r3
 8007790:	ed92 ea01 	vldr	s28, [r2, #4]
 8007794:	9a02      	ldr	r2, [sp, #8]
 8007796:	edd4 7a00 	vldr	s15, [r4]
 800779a:	edd2 da01 	vldr	s27, [r2, #4]
 800779e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077a0:	ed91 da01 	vldr	s26, [r1, #4]
 80077a4:	ed92 ca01 	vldr	s24, [r2, #4]
 80077a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077aa:	9903      	ldr	r1, [sp, #12]
 80077ac:	edcd 7a03 	vstr	s15, [sp, #12]
 80077b0:	edd2 7a00 	vldr	s15, [r2]
 80077b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077b6:	edcd 7a02 	vstr	s15, [sp, #8]
 80077ba:	edd2 7a00 	vldr	s15, [r2]
 80077be:	edd0 ea01 	vldr	s29, [r0, #4]
 80077c2:	edd1 ca01 	vldr	s25, [r1, #4]
 80077c6:	eddc ba00 	vldr	s23, [ip]
 80077ca:	edd7 aa00 	vldr	s21, [r7]
 80077ce:	ed96 aa00 	vldr	s20, [r6]
 80077d2:	edd5 9a00 	vldr	s19, [r5]
 80077d6:	edcd 7a01 	vstr	s15, [sp, #4]
 80077da:	4403      	add	r3, r0
 80077dc:	ed93 fa01 	vldr	s30, [r3, #4]
 80077e0:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 80077e4:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 80077e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80077ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80077f0:	46cc      	mov	ip, r9
 80077f2:	e001      	b.n	80077f8 <arm_radix8_butterfly_f32+0x2fc>
 80077f4:	3f3504f3 	.word	0x3f3504f3
 80077f8:	ed91 6a00 	vldr	s12, [r1]
 80077fc:	ed93 5a00 	vldr	s10, [r3]
 8007800:	edd0 fa00 	vldr	s31, [r0]
 8007804:	edd4 7a00 	vldr	s15, [r4]
 8007808:	ed95 7a00 	vldr	s14, [r5]
 800780c:	ed56 3a01 	vldr	s7, [r6, #-4]
 8007810:	ed17 3a01 	vldr	s6, [r7, #-4]
 8007814:	ed92 2a00 	vldr	s4, [r2]
 8007818:	ed96 0a00 	vldr	s0, [r6]
 800781c:	ee33 8a85 	vadd.f32	s16, s7, s10
 8007820:	ee32 1a06 	vadd.f32	s2, s4, s12
 8007824:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8007828:	ee77 4a87 	vadd.f32	s9, s15, s14
 800782c:	ee78 1a04 	vadd.f32	s3, s16, s8
 8007830:	ee71 6a24 	vadd.f32	s13, s2, s9
 8007834:	ee32 2a46 	vsub.f32	s4, s4, s12
 8007838:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800783c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007840:	ed06 6a01 	vstr	s12, [r6, #-4]
 8007844:	edd4 8a01 	vldr	s17, [r4, #4]
 8007848:	ed92 9a01 	vldr	s18, [r2, #4]
 800784c:	edd7 0a00 	vldr	s1, [r7]
 8007850:	edd1 2a01 	vldr	s5, [r1, #4]
 8007854:	ed95 7a01 	vldr	s14, [r5, #4]
 8007858:	ed93 6a01 	vldr	s12, [r3, #4]
 800785c:	edd0 5a01 	vldr	s11, [r0, #4]
 8007860:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8007864:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8007868:	ee39 5a62 	vsub.f32	s10, s18, s5
 800786c:	ee78 fac7 	vsub.f32	s31, s17, s14
 8007870:	ee38 4a44 	vsub.f32	s8, s16, s8
 8007874:	ee38 7a87 	vadd.f32	s14, s17, s14
 8007878:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800787c:	ee79 2a22 	vadd.f32	s5, s18, s5
 8007880:	ee32 9a27 	vadd.f32	s18, s4, s15
 8007884:	ee72 7a67 	vsub.f32	s15, s4, s15
 8007888:	ee30 2a06 	vadd.f32	s4, s0, s12
 800788c:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8007890:	ee71 4a64 	vsub.f32	s9, s2, s9
 8007894:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8007898:	ee32 1a08 	vadd.f32	s2, s4, s16
 800789c:	ee72 fa87 	vadd.f32	s31, s5, s14
 80078a0:	ee32 2a48 	vsub.f32	s4, s4, s16
 80078a4:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80078a8:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80078ac:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80078b0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80078b4:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80078b8:	ee29 9a0b 	vmul.f32	s18, s18, s22
 80078bc:	ee71 1a6f 	vsub.f32	s3, s2, s31
 80078c0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80078c4:	ee30 6a46 	vsub.f32	s12, s0, s12
 80078c8:	ee74 0a22 	vadd.f32	s1, s8, s5
 80078cc:	ee36 0a28 	vadd.f32	s0, s12, s17
 80078d0:	ee74 2a62 	vsub.f32	s5, s8, s5
 80078d4:	ee36 6a68 	vsub.f32	s12, s12, s17
 80078d8:	ee32 4a64 	vsub.f32	s8, s4, s9
 80078dc:	ee73 8a09 	vadd.f32	s17, s6, s18
 80078e0:	ee74 4a82 	vadd.f32	s9, s9, s4
 80078e4:	ee33 9a49 	vsub.f32	s18, s6, s18
 80078e8:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 80078ec:	ee35 3a85 	vadd.f32	s6, s11, s10
 80078f0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80078f4:	ee33 5aa7 	vadd.f32	s10, s7, s15
 80078f8:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80078fc:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8007900:	ee30 7a68 	vsub.f32	s14, s0, s17
 8007904:	ee35 8a03 	vadd.f32	s16, s10, s6
 8007908:	ee38 0a80 	vadd.f32	s0, s17, s0
 800790c:	ee73 3a82 	vadd.f32	s7, s7, s4
 8007910:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8007914:	ed9d 2a01 	vldr	s4, [sp, #4]
 8007918:	eddd 1a02 	vldr	s3, [sp, #8]
 800791c:	ee35 5a43 	vsub.f32	s10, s10, s6
 8007920:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8007924:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8007928:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800792c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8007930:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8007934:	ee76 5a49 	vsub.f32	s11, s12, s18
 8007938:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800793c:	ee39 6a06 	vadd.f32	s12, s18, s12
 8007940:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8007944:	ee21 4a84 	vmul.f32	s8, s3, s8
 8007948:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800794c:	ee22 7a07 	vmul.f32	s14, s4, s14
 8007950:	ee22 2a08 	vmul.f32	s4, s4, s16
 8007954:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8007958:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800795c:	ee31 1a09 	vadd.f32	s2, s2, s18
 8007960:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8007964:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8007968:	ee74 0a60 	vsub.f32	s1, s8, s1
 800796c:	ee37 7a48 	vsub.f32	s14, s14, s16
 8007970:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8007974:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8007978:	ee72 1a21 	vadd.f32	s3, s4, s3
 800797c:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8007980:	ee38 2a89 	vadd.f32	s4, s17, s18
 8007984:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8007988:	ee38 8a04 	vadd.f32	s16, s16, s8
 800798c:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8007990:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8007994:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8007998:	eddd 5a03 	vldr	s11, [sp, #12]
 800799c:	edc6 fa00 	vstr	s31, [r6]
 80079a0:	ee2b 0a80 	vmul.f32	s0, s23, s0
 80079a4:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80079a8:	ee30 0a45 	vsub.f32	s0, s0, s10
 80079ac:	ee6a 4a03 	vmul.f32	s9, s20, s6
 80079b0:	ee65 8aa7 	vmul.f32	s17, s11, s15
 80079b4:	ee2d 5a06 	vmul.f32	s10, s26, s12
 80079b8:	ee2e 3a03 	vmul.f32	s6, s28, s6
 80079bc:	ee6d 7a27 	vmul.f32	s15, s26, s15
 80079c0:	ee25 6a86 	vmul.f32	s12, s11, s12
 80079c4:	ee74 4a89 	vadd.f32	s9, s9, s18
 80079c8:	ee34 3a43 	vsub.f32	s6, s8, s6
 80079cc:	ee78 8a85 	vadd.f32	s17, s17, s10
 80079d0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80079d4:	44c4      	add	ip, r8
 80079d6:	45e3      	cmp	fp, ip
 80079d8:	edc3 3a00 	vstr	s7, [r3]
 80079dc:	edc3 6a01 	vstr	s13, [r3, #4]
 80079e0:	4456      	add	r6, sl
 80079e2:	ed07 1a01 	vstr	s2, [r7, #-4]
 80079e6:	edc7 0a00 	vstr	s1, [r7]
 80079ea:	4453      	add	r3, sl
 80079ec:	ed80 2a00 	vstr	s4, [r0]
 80079f0:	edc0 2a01 	vstr	s5, [r0, #4]
 80079f4:	4457      	add	r7, sl
 80079f6:	edc2 1a00 	vstr	s3, [r2]
 80079fa:	ed82 7a01 	vstr	s14, [r2, #4]
 80079fe:	4450      	add	r0, sl
 8007a00:	ed85 8a00 	vstr	s16, [r5]
 8007a04:	ed85 0a01 	vstr	s0, [r5, #4]
 8007a08:	4452      	add	r2, sl
 8007a0a:	edc1 4a00 	vstr	s9, [r1]
 8007a0e:	4455      	add	r5, sl
 8007a10:	ed81 3a01 	vstr	s6, [r1, #4]
 8007a14:	edc4 8a00 	vstr	s17, [r4]
 8007a18:	ed84 6a01 	vstr	s12, [r4, #4]
 8007a1c:	4451      	add	r1, sl
 8007a1e:	4454      	add	r4, sl
 8007a20:	f63f aeea 	bhi.w	80077f8 <arm_radix8_butterfly_f32+0x2fc>
 8007a24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a26:	3308      	adds	r3, #8
 8007a28:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a32:	3308      	adds	r3, #8
 8007a34:	9309      	str	r3, [sp, #36]	; 0x24
 8007a36:	9b08      	ldr	r3, [sp, #32]
 8007a38:	3308      	adds	r3, #8
 8007a3a:	9308      	str	r3, [sp, #32]
 8007a3c:	9b07      	ldr	r3, [sp, #28]
 8007a3e:	3308      	adds	r3, #8
 8007a40:	9307      	str	r3, [sp, #28]
 8007a42:	9b06      	ldr	r3, [sp, #24]
 8007a44:	3308      	adds	r3, #8
 8007a46:	9306      	str	r3, [sp, #24]
 8007a48:	9b05      	ldr	r3, [sp, #20]
 8007a4a:	3308      	adds	r3, #8
 8007a4c:	9305      	str	r3, [sp, #20]
 8007a4e:	9b04      	ldr	r3, [sp, #16]
 8007a50:	3308      	adds	r3, #8
 8007a52:	9304      	str	r3, [sp, #16]
 8007a54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a56:	f109 0901 	add.w	r9, r9, #1
 8007a5a:	454b      	cmp	r3, r9
 8007a5c:	f47f ae7d 	bne.w	800775a <arm_radix8_butterfly_f32+0x25e>
 8007a60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a62:	00db      	lsls	r3, r3, #3
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	46d9      	mov	r9, fp
 8007a68:	9310      	str	r3, [sp, #64]	; 0x40
 8007a6a:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8007a6e:	e554      	b.n	800751a <arm_radix8_butterfly_f32+0x1e>
 8007a70:	b015      	add	sp, #84	; 0x54
 8007a72:	ecbd 8b10 	vpop	{d8-d15}
 8007a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a7a:	bf00      	nop

08007a7c <__errno>:
 8007a7c:	4b01      	ldr	r3, [pc, #4]	; (8007a84 <__errno+0x8>)
 8007a7e:	6818      	ldr	r0, [r3, #0]
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	2000000c 	.word	0x2000000c

08007a88 <__libc_init_array>:
 8007a88:	b570      	push	{r4, r5, r6, lr}
 8007a8a:	4d0d      	ldr	r5, [pc, #52]	; (8007ac0 <__libc_init_array+0x38>)
 8007a8c:	4c0d      	ldr	r4, [pc, #52]	; (8007ac4 <__libc_init_array+0x3c>)
 8007a8e:	1b64      	subs	r4, r4, r5
 8007a90:	10a4      	asrs	r4, r4, #2
 8007a92:	2600      	movs	r6, #0
 8007a94:	42a6      	cmp	r6, r4
 8007a96:	d109      	bne.n	8007aac <__libc_init_array+0x24>
 8007a98:	4d0b      	ldr	r5, [pc, #44]	; (8007ac8 <__libc_init_array+0x40>)
 8007a9a:	4c0c      	ldr	r4, [pc, #48]	; (8007acc <__libc_init_array+0x44>)
 8007a9c:	f000 f842 	bl	8007b24 <_init>
 8007aa0:	1b64      	subs	r4, r4, r5
 8007aa2:	10a4      	asrs	r4, r4, #2
 8007aa4:	2600      	movs	r6, #0
 8007aa6:	42a6      	cmp	r6, r4
 8007aa8:	d105      	bne.n	8007ab6 <__libc_init_array+0x2e>
 8007aaa:	bd70      	pop	{r4, r5, r6, pc}
 8007aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ab0:	4798      	blx	r3
 8007ab2:	3601      	adds	r6, #1
 8007ab4:	e7ee      	b.n	8007a94 <__libc_init_array+0xc>
 8007ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aba:	4798      	blx	r3
 8007abc:	3601      	adds	r6, #1
 8007abe:	e7f2      	b.n	8007aa6 <__libc_init_array+0x1e>
 8007ac0:	0801ab74 	.word	0x0801ab74
 8007ac4:	0801ab74 	.word	0x0801ab74
 8007ac8:	0801ab74 	.word	0x0801ab74
 8007acc:	0801ab78 	.word	0x0801ab78

08007ad0 <memset>:
 8007ad0:	4402      	add	r2, r0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d100      	bne.n	8007ada <memset+0xa>
 8007ad8:	4770      	bx	lr
 8007ada:	f803 1b01 	strb.w	r1, [r3], #1
 8007ade:	e7f9      	b.n	8007ad4 <memset+0x4>

08007ae0 <sqrtf>:
 8007ae0:	b508      	push	{r3, lr}
 8007ae2:	ed2d 8b02 	vpush	{d8}
 8007ae6:	eeb0 8a40 	vmov.f32	s16, s0
 8007aea:	f000 f817 	bl	8007b1c <__ieee754_sqrtf>
 8007aee:	eeb4 8a48 	vcmp.f32	s16, s16
 8007af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007af6:	d60c      	bvs.n	8007b12 <sqrtf+0x32>
 8007af8:	eddf 8a07 	vldr	s17, [pc, #28]	; 8007b18 <sqrtf+0x38>
 8007afc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b04:	d505      	bpl.n	8007b12 <sqrtf+0x32>
 8007b06:	f7ff ffb9 	bl	8007a7c <__errno>
 8007b0a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007b0e:	2321      	movs	r3, #33	; 0x21
 8007b10:	6003      	str	r3, [r0, #0]
 8007b12:	ecbd 8b02 	vpop	{d8}
 8007b16:	bd08      	pop	{r3, pc}
 8007b18:	00000000 	.word	0x00000000

08007b1c <__ieee754_sqrtf>:
 8007b1c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007b20:	4770      	bx	lr
	...

08007b24 <_init>:
 8007b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b26:	bf00      	nop
 8007b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b2a:	bc08      	pop	{r3}
 8007b2c:	469e      	mov	lr, r3
 8007b2e:	4770      	bx	lr

08007b30 <_fini>:
 8007b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b32:	bf00      	nop
 8007b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b36:	bc08      	pop	{r3}
 8007b38:	469e      	mov	lr, r3
 8007b3a:	4770      	bx	lr
